###################
他システムとの連携
###################

:著者: Kompira 開発チーム

.. highlight:: none


-------------
はじめに
-------------

Kompiraで他システムにデータを受け渡す、また他システムからデータを受け取るための方法、必要な設定等について説明します。

.. _sendevt:

------------------------------
Kompiraへのイベント送信
------------------------------

:ref:`package_jobmngr` および :ref:`package_sendevt` に含まれる
kompira_sendevtコマンドを用いることで、Kompiraに対してイベント情報を送信することができます。
ここでは、kompira_sendevtを用いたKompiraへのイベント送信について説明します。

kompira_sendevtスクリプトは、引数で指定された ``<keyword>=<value>`` の組を
メッセージに詰めて、Kompiraサーバに送信します。

.. code::

    /opt/kompira/bin/kompira_sendevt [options] [<key1>=<value1> ...]

key1とvalue1を結ぶ '=' の両側にスペースを入れないように注意してください。
ジョブフローは、受信したメッセージを辞書型のデータとして参照することができます。

引数が指定されなかった場合は、標準入力を1つのkeyとしてKompiraサーバに送信します。

インストール時に --amqps-verify オプションを付けるなどして、SSL 証明書の検証が有効になっている Kompira サーバに kompira_sendevt でメッセージを送信するためにはその Kompira サーバが発行した SSL 証明書が必要になります。
その場合は、以下について注意してください。

- 事前に Kompira サーバから SSL 証明書を取得しておく必要があります。 :ref:`ssl_certs` を参照してください。
- kompira_sendevt コマンドを実行するユーザが SSL 証明書を読み込める必要があります。証明書ファイルにアクセスできるユーザで実行するか、証明書ファイルのパーミッションを調整してください。

^^^^^^^^^^^^^^^^^^^^^^^^^^^
Windows からのイベント送信
^^^^^^^^^^^^^^^^^^^^^^^^^^^

:ref:`package_sendevt_install_windows` に従って Windows にイベント送信パッケージをインストールすることで、
Linuxの場合と同様に kompira_sendevt コマンドを用いて Windows からイベント送信を行うことができます。

.. note::

    手順 :ref:`package_sendevt_install_windows` に沿ってインストールした場合、
    kompira_sendevt コマンドは ``C:\Kompira\Scripts\kompira_sendevt.exe`` にインストールされます。

    また、Windows 環境ではデフォルトのログディレクトリが ``C:\Kompira\Log`` になりますので、事前に作成しておいてください。
    ログディレクトリが存在しない場合は kompira_sendevt コマンドを実行する時に警告が表示され、標準出力上にログが出力されます。

.. versionchanged:: 1.6.8

    Windows 環境でのデフォルトのログディレクトリが ``C:\Kompira\Log`` になりました。

.. _sendevt_option:

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kompira_sendevtのオプション
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kompira_sendevtコマンドには以下のオプションがあります。
コマンドラインで指定したオプションは、設定ファイルでの指定より優先されます。

+-------------------------------------+----------------------------------------------------------------------------------------------------------------+
| オプション                          | 説明                                                                                                           |
+=====================================+================================================================================================================+
| ``-c, --config=CONF``               | 設定ファイルを指定します(CONFは設定ファイルのパス)。                                                           |
|                                     | デフォルトでは ``/opt/kompira/kompira.conf`` (Windows環境では ``C:\Kompira\kompira.conf``) が読み込まれます。  |
+-------------------------------------+----------------------------------------------------------------------------------------------------------------+
| ``-s, --server=SERVER``             | 送信先のKompiraサーバのIPアドレス、もしくはサーバ名を指定します。                                              |
+-------------------------------------+----------------------------------------------------------------------------------------------------------------+
| ``-p, --port=PORT``                 | 送信先Kompiraサーバのメッセージキューのポート番号を指定します。                                                |
+-------------------------------------+----------------------------------------------------------------------------------------------------------------+
| ``--user=USER``                     | 送信先Kompiraメッセージキューのユーザー名を指定します。                                                        |
+-------------------------------------+----------------------------------------------------------------------------------------------------------------+
| ``--password=PASSWORD``             | 送信先Kompiraメッセージキューのパスワードを指定します。                                                        |
+-------------------------------------+----------------------------------------------------------------------------------------------------------------+
| ``--test-connection``               | AMQP サーバへの接続テストを行ないます。データは送信しません。                                                  |
+-------------------------------------+----------------------------------------------------------------------------------------------------------------+
| ``--ssl``                           | メッセージキューの接続にSSLを用います。                                                                        |
+-------------------------------------+----------------------------------------------------------------------------------------------------------------+
| ``--ssl-verify``                    | SSLでサーバ証明書を検証します。                                                                                |
+-------------------------------------+----------------------------------------------------------------------------------------------------------------+
| ``--ssl-cacertfile=SSL_CACERTFILE`` | SSLでサーバ証明書の検証に利用するCA証明書を指定します。                                                        |
+-------------------------------------+----------------------------------------------------------------------------------------------------------------+
| ``--ssl-certfile=SSL_CERTFILE``     | SSL接続するときの証明書ファイルを指定します。                                                                  |
+-------------------------------------+----------------------------------------------------------------------------------------------------------------+
| ``--ssl-keyfile=SSL_KEYFILE``       | SSL接続するときの秘密鍵ファイルを指定します。                                                                  |
+-------------------------------------+----------------------------------------------------------------------------------------------------------------+
| ``--channel=CHANNEL``               | メッセージを送信するチャネルのKompiraファイルシステム上のパスを指定します。                                    |
+-------------------------------------+----------------------------------------------------------------------------------------------------------------+
| ``--site-id=SITE_ID``               | KompiraサイトIDを指定します。                                                                                  |
+-------------------------------------+----------------------------------------------------------------------------------------------------------------+
| ``--max-retry=MAX_RETRY``           | イベントの送信を最大何回試みるかを指定します。                                                                 |
+-------------------------------------+----------------------------------------------------------------------------------------------------------------+
| ``--retry-interval=RETRY_INTERVAL`` | イベントの送信間隔を指定します(単位は秒)。                                                                     |
+-------------------------------------+----------------------------------------------------------------------------------------------------------------+
| ``--dry-run``                       | 実際にはデータを送信せずに、送信内容を標準出力に表示します。                                                   |
+-------------------------------------+----------------------------------------------------------------------------------------------------------------+

コマンドラインオプションで指定していない AMQP の接続に関するパラメータは設定ファイルのデフォルト値が適用されます。
例えばユーザ名とパスワードは接続先のサーバ名が localhost の場合は guest/guest になり、それ以外では kompira/kompira になります。
詳しくは :ref:`file_settings` を参照してください。

.. versionchanged:: 1.6.8

    設定ファイルが指定されていないとき、Windows 環境では ``C:\Kompira\kompira.conf`` が適用されるようになりました。

.. versionadded:: 1.6.8

    新しいオプション --test-connection, --ssl-verify, --ssl-cacertfile, --ssl-certfile, --ssl-keyfile が追加されました。


.. _receive_mail:

-----------------------
Kompiraでのメール受信
-----------------------

Kompira_sendevtを用いて、Kompiraサーバが受信したメール内容をジョブフローで扱えるようにする方法を説明します。

.. note::
    IMAP サーバを使用している場合、以下に紹介する方法の他に、メールチャネルを使用することでメール内容をジョブフローで扱うことができます。
    詳しくは :type_object:`MailChannel` を参照してください。


^^^^^^^^^^^^
Linuxの設定
^^^^^^^^^^^^
Sendmail用のエイリアスである /etc/aliases ファイルに設定を記述することで、Kompiraサーバの特定のアカウント宛のメールに対して、任意のコマンドの実行を指定することができます。

以下はkompiraサーバのkompiraアカウント宛にメールが送られた際、メールをkompira_sendevtに送る場合の設定です。 ::

    kompira:    "|LANG=ja_JP.UTF-8 /opt/kompira/bin/kompira_sendevt --channel=/system/channels/Mail"

/etc/aliasesに上記を記述した後、下記のコマンドを実行することで設定が反映されます。 ::

    % newaliases

.. note::
   お使いのシステムによっては smrsh を使用する必要がある場合があります。その場合、kompira_sendevt コマンドのシンボリックリンクを smrsh のディレクトリに作成してください。

^^^^^^^^^^^^^^^^^^
Kompiraの設定
^^^^^^^^^^^^^^^^^^

kompira_sendevtは任意のチャネルに値を送ることができます。
ここでは/system/channels/Mailというメールを受信する専用のチャネルを作成しておきましょう。

以下はメール内容を受信し、内容を表示するジョブフロー例です。 ::

    </system/channels/Mail>
    -> [mail = $RESULT]
    -> mail_parse(mail)
    -> [parsed_mail = $RESULT]
    -> print(parsed_mail['Subject'])
    -> print(parsed_mail['Body'])

Kompiraの組み込みジョブであるmail_parseを使うことで、MIME形式のメールテキストをパースし、辞書形式で値を扱うことができるようになります。


------------------------
監視システムとの連携
------------------------

Kompiraは、ZabbixやNagiosなど外部の監視サーバと連携することが可能です。
連携したい外部システムから、Kompiraのメッセージキュー（RabbitMQ）に対してイベント情報を送信することで、ジョブフローからそのイベントを受信できるようになります。

ここでは、Zabbixを例にして、障害の発生をKompiraに通知する方法について説
明します。


^^^^^^^^^^^^^^^^^^^^^^^^^^
イベント送受信の確認
^^^^^^^^^^^^^^^^^^^^^^^^^^

Zabbixが動作しているサーバに、Kompiraに対してイベント情報を送信するため
のスクリプトを準備します。ここでは、kompira_sendevtを用いた方法について説
明します。

1) **ZabbixサーバにKompiraエージェントをインストールする。**

Kompiraマニュアル(:ref:`package_sendevt`)にしたがってKompiraのイベント送信パッケージを
Zabbixが動作しているサーバにインストールします。
(ジョブマネージャを動作させない場合、ジョブマネージャの起動設定は不要です。)

2) **設定ファイルの変更**

Zabbixサーバ側の/opt/kompira/kompira.confファイルの書き換えます。

具体的には、[amqp-connection]セクションのserver項目に、Kompiraサーバの
IPアドレス、もしくはホスト名を設定します。また、[event]セクションの
channel項目が/system/channels/Alertに設定されていることも確認してくださ
い。

3) **メッセージの通知確認**

この時点で、kompira_sendevtを実行して、Kompiraサーバに対して正しくイベントが通知できることを確認します。Zabbixサーバ側で、以下のコマンドを実行してください。::

   $ /opt/kompira/bin/kompira_sendevt test=hello

次に、Kompiraにログインし、/system/channels/Alertのページを参照し、メッ
セージ数が増えていることを確認してください。

4) **メッセージの受信方法**

次に、/system/channels/Alertに到着したメッセージはジョブフローから読み
出してみます。以下のようなジョブフローを定義して、実行してみてください。 ::

    </system/channels/Alert> -> [message = $RESULT] -> print(message.test)

コンソールに、helloと表示されたら成功です。

^^^^^^^^^^^^^^^^^^^
Zabbixの設定
^^^^^^^^^^^^^^^^^^^

次に、Zabbixの設定を行います。

Zabbixにログインし、「アクションの設定」メニューからアクションを新規に
作成し、その中にアクションのオペレーションを新規に作成してください。オ
ペレーションのタイプはリモートコマンドにします。

リモートコマンドの内容はたとえば以下のようにします。 ::

    Zabbix server:python /opt/kompira/bin/kompira_sendevt status="{TRIGGER.STATUS}"
      severity="{TRIGGER.NSEVERITY}" hostname="{HOSTNAME}"
      trigger_name="{TRIGGER.NAME}" trigger_key="{TRIGGER.KEY}"
      detail="{TRIGGER.KEY}: {ITEM.LASTVALUE}"

ここでは、以下のようなキーを含む辞書データをKompiraに送るように設定しています。

    +--------------+--------------------------------------------------+
    | キー名       | 内容（値）                                       |
    +==============+==================================================+
    | status       | トリガーの状態                                   |
    +--------------+--------------------------------------------------+
    | severity     | 深刻度                                           |
    +--------------+--------------------------------------------------+
    | hostname     | 障害の発生したホスト名                           |
    +--------------+--------------------------------------------------+
    | trigger_name | トリガー名                                       |
    +--------------+--------------------------------------------------+
    | trigger_key  | トリガーキー                                     |
    +--------------+--------------------------------------------------+
    | detail       | イベント詳細情報(トリガーキーとイベント値の組み) |
    +--------------+--------------------------------------------------+

あとは、ここで登録したアクションが、障害イベントをトリガーとしてキック
されるように設定を行います。詳しくは、Zabbixのマニュアル等を参照してく
ださい。


-------------------
Redmineとの連携
-------------------

外部のチケッティングシステムとの連携例として、KompiraのジョブフローからRedmineに対してチケットを発行する方法について説明します。

^^^^^^^^^^^^^^^^
Redmineの設定
^^^^^^^^^^^^^^^^

1) **REST APIの有効化**

「管理」->「設定」->「認証」から、「RESTによるWebサービスを有効にする」チェックをつけて保存します。

2) **プロジェクトの作成**

「管理」->「プロジェクト」から「新しいプロジェクト」を選択し、プロジェクト「test」を作成します。

3) **優先度の設定**

「管理」->「列挙項目」でチケットの優先度に値を設定します。(例：「高」「中」「低」)

また、どれか1つを「デフォルト値」と設定します。

(※) デフォルト値を設定しない場合は、API呼び出しの際にpriority_idの値が必要となります。

4) **ユーザの作成**

「管理」->「ユーザ」から「新しいユーザー」を選択し、任意のユーザを作成します。

作成したユーザでログインし、「個人設定」ページにあるAPIアクセスキーを控えておきます。


^^^^^^^^^^^^^^^^^^^^^
チケットを発行する
^^^^^^^^^^^^^^^^^^^^^

Redmineのチケットを発行するには、必要な情報をjson形式のデータに変換し、POSTリクエストをRedmineのURLに送信します。

そのためには、Kompiraの組み込みジョブであるurlopenに辞書型のデータを渡して呼び出します。

具体的には以下のようなジョブフローを記述することで、Redmineに対してチケットを発行することができます。 ::

    |redmine_server = '192.168.0.1'|
    |redmine_key = '1234567890abcdef1234567890abcdef12345678'|
    |ticket_title = 'Task from Kompira'|
    |project_name = 'test'|

    [url = 'http://$redmine_server/issues.json?format=json&key=$redmine_key']
    -> [ticket = {issue = {subject = ticket_title, project_id = project_name}}]
    -> urlopen(url=url, data=ticket, timeout=60, encode='json')

「redmine_key」には「4. ユーザの作成」で確認したAPIアクセスキーを設定します。

上記に加えて、チケットの優先度、説明、担当者、カテゴリなどの情報を含めることもできます。

また、チケットの更新・削除、チケット情報の一覧の取得なども行うことができます。
詳しくはRedmine API仕様を参照してください。

--------------------
SNMPトラップの受信
--------------------

Linuxコマンドのsnmptrapd(8)とsnmptrap(1)を用いて、KompiraのジョブフローでSNMPトラップを受信する方法を説明します。

^^^^^^^^^^
環境
^^^^^^^^^^
+------------------------+-----------------+------------+
|                        | IP Address      | OS         |
+------------------------+-----------------+------------+
| Kompiraサーバ          | 192.168.213.100 | CentOS 6.5 |
+------------------------+-----------------+------------+
| SNMPエージェントサーバ | 192.168.213.101 | CentOS 6.5 |
+------------------------+-----------------+------------+

^^^^^^^^^^^^^^^^^^^^^^
Kompiraサーバの設定
^^^^^^^^^^^^^^^^^^^^^^

KompiraサーバにはKompiraがインストール済みであるとします。

1) **snmptrapdをインストール**

::

    $ yum install net-snmp

2) **/etc/snmp/snmptrapd.confを編集**

SNMPトラップをハンドルするため、snmptrapd.confを編集します。

::

    authCommunity     log,execute,net default
    traphandle default    /opt/kompira/bin/kompira_sendevt --channel=/system/channels/snmptrap

ここでdefaultは「全てのOID」を表します。


3) **Kompiraにジョブフローを追加**

「/system/channels/snmptrap」チャネルを作成し、このチャネルへのデータを待ち受けるジョブフローを作成、実行します。 ::

    </system/channels/snmptrap> ->
    print($RESULT)


4) **snmptrapdを起動**

::

    $ service snmptrapd start


^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
SNMPエージェントサーバの設定
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
snmptrapコマンドをインストール
::

    $ yum install net-snmp-utils

^^^^^^^^^^^^^^^^^^^^
SNMPトラップの送信
^^^^^^^^^^^^^^^^^^^^
SNMPエージェントサーバ上でsnmptrapコマンドを実行します。 ::

    $ snmptrap -v 2c -c default 192.168.213.100 '' netSnmp.99999 netSnmp.99999.1 s "hello world"

Kompiraサーバ側で正しく受信できた場合、/var/log/messagesに以下のようなログが表示されます。 ::

    $ tail -f /var/log/messages
    Dec 13 16:29:30 kompira-server snmptrapd[6110]: 2012-12-13 16:29:30 <UNKNOWN>
    [UDP: [192.168.213.101]:56313->[192.168.213.100]]:#012DISMAN-EVENT-MIB::sysUpTimeInstance = Timeticks: (590254) 1:38:22.54
    #011SNMPv2-MIB::snmpTrapOID.0 = OID: NET-SNMP-MIB::netSnmp.99999#011NET-SNMP-MIN::netSnmp.99999.1 = STRING: "hello world"

また、Kompira上で実行していたジョブフロープロセスのコンソールには以下のような受信結果が表示されます。 ::

    <UNKNOWN>
    UDP: [192.168.213.101]:56313->[192.168.213.100]
    DISMAN-EVENT-MIB::sysUpTimeInstance 0:0:18:39.04
    SNMPv2-MIB::snmpTrapOID.0 NET-SNMP-MIB::netSnmp.99999
    NET-SNMP-MIB::netSnmp.99999.1 "hello world"
