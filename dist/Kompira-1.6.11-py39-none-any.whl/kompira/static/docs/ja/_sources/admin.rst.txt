=====================================
管理ガイド
=====================================

:著者: Kompira 開発チーム

.. highlight:: none

.. _admin_introduction:

----------------------
はじめに
----------------------

このマニュアルでは、Kompiraを管理するための情報について記述します。

インストール、アップデート、Kompira全体の設定、ログなどについて知りたい場合には本マニュアルを参照してください。

本マニュアルでは、Linux上でのコマンド実行プロンプトとして一般ユーザーの場合は ``$``、ルート権限ユーザーの場合は ``#`` を表記します。

.. ifconfig:: language == 'ja'

    .. code::

        $ echo '一般ユーザーでコマンド実行'
        # echo 'ルート権限ユーザーでコマンド実行'

.. ifconfig:: language != 'ja'

    .. code::

        $ echo 'command execution by general user'
        # echo 'command execution by root privileged user'

.. _package:

----------------------------
Kompiraパッケージ管理
----------------------------

Kompira関連パッケージのインストールとアップデートについて説明します。

.. seealso::
    本節ではKompiraパッケージを単一のサーバ上で動作させる場合についてのみ説明をしています。
    Kompiraを冗長構成で動作させたい場合は :ref:`HA` を参照してください。


.. _package_kind:

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
インストールパッケージの種類
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Kompiraには以下に示す種類のパッケージが存在しています。

+----------------------------+------------------------------------------------+
| パッケージ名               | 説明                                           |
+============================+================================================+
| Kompiraパッケージ          | Kompiraの本体にあたるパッケージです。          |
|                            | Kompiraのコア機能群、ジョブマネージャ、        |
|                            | イベント送信スクリプトを含みます。             |
+----------------------------+------------------------------------------------+
| ジョブマネージャパッケージ | ジョブマネージャとイベント送信スクリプトを含む |
|                            | パッケージです。                               |
+----------------------------+------------------------------------------------+
| イベント送信パッケージ     | イベント送信スクリプトを含むパッケージです。   |
+----------------------------+------------------------------------------------+

Kompiraを初めてお使いになる場合は、まずKompiraパッケージのインストールから始めてみましょう。

ジョブマネージャパッケージはKompiraパッケージをインストールしたサーバ以外にもジョブマネージャプロセスを起動させたい場合に使用します。

.. Kompiraとジョブマネージャのアーキテクチャについては、 :ref:`kompira_architecture` を参照してください。

イベント送信パッケージは別サーバからKompiraに対してイベントを送信させたい場合に使用します。
イベント送信を利用したシステム間の連携については :doc:`coordination` を参照してください。


.. _package_install_sh:

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
インストールスクリプト
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

install.shを用いることで、Kompiraの各種パッケージのインストールを行うことができます。

.. code::

    install.sh [options]

インストール処理にはKompiraで使用するミドルウェアのインストール、データベースの構築、プロセスの自動起動設定が含まれます。

install.shはコマンドの成功・失敗に関わらず *install.<プロセス番号>.log* という名称のログファイルを作成します。

.. note::

   Red Hat にインストールする場合は、事前にサブスクリプションを登録しておく必要があります。


************
制限
************

install.sh は RHEL/CentOS でのインストールのみサポートしています。

install.sh では外部から Kompira で使用する各種ミドルウェアをダウンロードします。
インターネットに接続可能な環境で実行してください。

プロキシ経由でインターネットに接続する環境の場合は以下のように --proxy オプションを付けて install.sh を実行してください。

.. code::

    # ./install.sh --proxy proxy:3128

.. note::
    オプションに渡す "proxy" や "3128" の部分は導入環境のプロキシサーバ
    のホスト名（またはIPアドレス）やポート番号に合わせてください。

認証付きプロキシサーバの場合は、以下のように "user" にユーザー名を、"password" にパスワードを指定して install.sh を実行してください。

.. code::

    # ./install.sh --proxy user:password@proxy:3128


***************************
コマンドラインオプション
***************************

install.shに指定可能なオプションは以下の通りです。

.. tabularcolumns:: |\Y{0.3}|\Y{0.7}|
.. table::
    :class: longtable
    :widths: auto

    +----------------------------------+------------------------------------------------------------------------------------------------------+
    | オプション                       | 説明                                                                                                 |
    +==================================+======================================================================================================+
    | ``--https``                      | Kompira サーバに対するアクセスをHTTPSのみに制限します（Kompira v1.5.0 からデフォルト）。             |
    |                                  | HTTPでアクセスすると自動的にHTTPSにリダイレクトされるようになります。                                |
    +----------------------------------+------------------------------------------------------------------------------------------------------+
    | ``--no-https``                   | Kompira サーバに対する HTTP アクセスを許容します。                                                   |
    +----------------------------------+------------------------------------------------------------------------------------------------------+
    | ``--amqps``                      | Kompira サーバに対する AMQP のアクセスを SSL で保護します（Kompira v1.6.8 からデフォルト）。         |
    +----------------------------------+------------------------------------------------------------------------------------------------------+
    | ``--amqps-verify``               | Kompira サーバに対する AMQP のアクセスを SSL で保護します (SSL証明書の検証を伴います)。              |
    +----------------------------------+------------------------------------------------------------------------------------------------------+
    | ``--no-ampqs``                   | Kompira サーバに対する AMQP のアクセスを SSL で保護しません。                                        |
    +----------------------------------+------------------------------------------------------------------------------------------------------+
    | ``--allow-insecure-amqp``        | Kompira サーバに対する外部からの非 SSL での AMQP アクセスを許可します。                              |
    +----------------------------------+------------------------------------------------------------------------------------------------------+
    | ``--backup``                     | データベースのバックアップ取得およびリストア処理を指示します。                                       |
    +----------------------------------+------------------------------------------------------------------------------------------------------+
    | ``--no-backup``                  | データベースのバックアップ取得およびリストア処理をスキップします。                                   |
    +----------------------------------+------------------------------------------------------------------------------------------------------+
    | ``--backup-process``             | データベースのバックアップ取得時にプロセスオブジェクトを含めるようにします。                         |
    +----------------------------------+------------------------------------------------------------------------------------------------------+
    | ``--no-backup-process``          | データベースのバックアップ取得時にプロセスオブジェクトを含めないようにします。                       |
    +----------------------------------+------------------------------------------------------------------------------------------------------+
    | ``--rhui``                       | RHUI モードでインストールします。                                                                    |
    +----------------------------------+------------------------------------------------------------------------------------------------------+
    | ``--rhel-option-repo <repo>``    | RHEL レポジトリを指定します。                                                                        |
    +----------------------------------+------------------------------------------------------------------------------------------------------+
    | ``--skip-python3-install``       | Python3 のインストールをスキップします。                                                             |
    +----------------------------------+------------------------------------------------------------------------------------------------------+
    | ``--skip-cluster-start``         | 冗長構成時の更新インストールで冗長構成の起動 (pcs cluster start)をスキップします。                   |
    +----------------------------------+------------------------------------------------------------------------------------------------------+
    | ``--skip-rabbitmq-update``       | rabbitmq-server のアップデートをスキップします。                                                     |
    +----------------------------------+------------------------------------------------------------------------------------------------------+
    | ``--skip-postgresql-update``     | postgresql のアップデートをスキップします。                                                          |
    +----------------------------------+------------------------------------------------------------------------------------------------------+
    | ``--rabbitmq-version <ver>``     | インストールする rabbitmq-server バージョンを指定します。(3.10.* など)                               |
    +----------------------------------+------------------------------------------------------------------------------------------------------+
    | ``--postgresql-version <ver>``   | インストールする postgresql バージョンを指定します。(16 や 16.4 や 16.* など)                        |
    +----------------------------------+------------------------------------------------------------------------------------------------------+
    | ``--initdata``                   | 明示的にデータベースを初期化します。                                                                 |
    +----------------------------------+------------------------------------------------------------------------------------------------------+
    | ``--initfile``                   | 明示的に添付ファイルの保存先を初期化します。                                                         |
    +----------------------------------+------------------------------------------------------------------------------------------------------+
    | ``--secret-key <secret-key>``    | パスワードフィールドの暗号化用キー文字列を指定します。(キーは8文字以上)                              |
    +----------------------------------+------------------------------------------------------------------------------------------------------+
    | ``--force``                      | Kompira のメジャーバージョンが異なっていても強制的にインストールを試行します。                       |
    |                                  | また既存データベースがあるときに削除確認をせず、データベース初期化してインストールを試行します。     |
    +----------------------------------+------------------------------------------------------------------------------------------------------+
    | ``--proxy <proxy>``              | プロキシサーバのURLを指定してインストールを行います。                                                |
    |                                  | ここで指定したプロキシサーバは Kompira サービスの環境変数として設定され、                            |
    |                                  | ジョブフローから外部 HTTP アクセスするときにも適用されます。                                         |
    +----------------------------------+------------------------------------------------------------------------------------------------------+
    | ``--temp-proxy <proxy>``         | インストール時だけ適用するプロキシサーバのURLを指定してインストールを行います。                      |
    +----------------------------------+------------------------------------------------------------------------------------------------------+
    | ``--noproxy <hosts>``            | プロキシサーバの対象から除外するホストをコンマ区切りのリストで指定します。                           |
    +----------------------------------+------------------------------------------------------------------------------------------------------+
    | ``--temp-noproxy <hosts>``       | インストール時のみのプロキシの除外設定を指定します。                                                 |
    +----------------------------------+------------------------------------------------------------------------------------------------------+
    | ``--locale-lang <LANG>``         | ロケールを指定してインストールを行ないます。                                                         |
    +----------------------------------+------------------------------------------------------------------------------------------------------+
    | ``--locale-timezone <ZONENAME>`` | タイムゾーンを指定してインストールを行ないます。                                                     |
    +----------------------------------+------------------------------------------------------------------------------------------------------+
    | ``--jobmngr <kompira_ip>``       | ジョブマネージャパッケージのインストール、アップデートを行います。                                   |
    |                                  | Kompiraパッケージをインストールしたサーバを示すホスト名もしくはIPアドレスを指定する必要があります。  |
    +----------------------------------+------------------------------------------------------------------------------------------------------+
    | ``--sendevt <kompira_ip>``       | イベント送信パッケージのインストール、アップデートを行います。                                       |
    |                                  | Kompiraパッケージをインストールしたサーバを示すホスト名もしくはIPアドレスを指定する必要があります。  |
    +----------------------------------+------------------------------------------------------------------------------------------------------+
    | ``--with-rpm <rpms>``            | 追加でインストールする RPM パッケージを指定します。                                                  |
    +----------------------------------+------------------------------------------------------------------------------------------------------+
    | ``--with-whl <wheels>``          | 追加でインストールする wheel パッケージを指定します。                                                |
    +----------------------------------+------------------------------------------------------------------------------------------------------+
    | ``--with-gdb``                   | Kompiraのデバッグに必要なツール類をインストールします。                                              |
    +----------------------------------+------------------------------------------------------------------------------------------------------+
    | ``--offline``                    | kompira-extra パッケージを利用してオフラインモードでインストールします。                             |
    +----------------------------------+------------------------------------------------------------------------------------------------------+
    | ``--extra``                      | オフラインインストール用の kompira-extra パッケージを作成します。                                    |
    +----------------------------------+------------------------------------------------------------------------------------------------------+
    | ``--extra-without-ha``           | 冗長構成用の HA パッケージは含まない kompira-extra パッケージを作成します。                          |
    +----------------------------------+------------------------------------------------------------------------------------------------------+
    | ``--install-only``               | パッケージのインストールのみ行い、完了後の各種デーモンサービスの起動は行いません。                   |
    +----------------------------------+------------------------------------------------------------------------------------------------------+
    | ``--dry-run``                    | ドライランモードで実行します。パラメータチェックのみで、実際のセットアップは行いません。             |
    +----------------------------------+------------------------------------------------------------------------------------------------------+
    | ``--help``                       | ヘルプメッセージを表示します。                                                                       |
    +----------------------------------+------------------------------------------------------------------------------------------------------+

jobmngr, sendevt オプションは排他です。

.. versionadded:: 1.6.2

    --extra および --secret-key オプションが追加されました。

.. versionadded:: 1.6.4

    --extra-without-ha オプションが追加されました。

.. versionadded:: 1.6.6

    --skip-cluster-start オプションが追加されました。

.. versionadded:: 1.6.7

    --install-only オプションが追加されました。

.. versionadded:: 1.6.8

    --amqps, --amqps-verify, --no-ampqs および --allow-insecure-amqp オプションが追加されました。

.. versionadded:: 1.6.8.post2

    --skip-rabbitmq-update および --rabbitmq-version オプションが追加されました。

.. versionadded:: 1.6.10

    --backup, --no-backup-process, --skip-postgresql-update および --postgresql-version オプションが追加されました。

.. _package_kompira:

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Kompiraパッケージ
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Kompiraの本体にあたるパッケージのインストール・アップデートについて記述します。

.. _package_kompira_install:

***********************
インストール
***********************

Kompiraパッケージを展開し、install.shを実行します。
<version>はKompiraのバージョン番号に置き換えてください。

.. code::

    $ tar zxf kompira-<version>-bin.tar.gz
    $ cd kompira-<version>-bin
    # ./install.sh
    [2020-09-17 02:00:24] ****: ****************************************************************
    [2020-09-17 02:00:24] ****: Kompira-1.6.0:
    [2020-09-17 02:00:24] ****: Start: Install the Kompira
    [2020-09-17 02:00:24] ****:
    [2020-09-17 02:00:24] INFO:     SYSTEM                   = CENT
    [2020-09-17 02:00:24] INFO:     SYSTEM_NAME              = cent8
    [2020-09-17 02:00:24] INFO:     SYSTEM_RELEASE           = CentOS Linux release 8.2.2004 (Core)
    [2020-09-17 02:00:24] INFO:     SYSTEM_RELEASEVER        = 8.2.2004
    [2020-09-17 02:00:24] INFO:     PLATFORM_PYTHON          = /usr/libexec/platform-python
    [2020-09-17 02:00:24] INFO:     PYTHON                   = /bin/python3.6

    ...

    [2020-09-17 02:02:46] ****: ----------------------------------------------------------------
    [2020-09-17 02:02:46] ****: Test access to kompira.
    [2020-09-17 02:02:46] ****:
    [2020-09-17 02:02:48] INFO: Access succeeded:   <div class="brand-version">1.6.0</div>
    [2020-09-17 02:02:48] ****:
    [2020-09-17 02:02:48] ****: Finish: Install the Kompira (status=0)
    [2020-09-17 02:02:48] ****: ****************************************************************


インストーラは自動でKompiraパッケージのインストール処理を行います。
「Finish: Install the Kompira (status=0)」という表示があれば、正常に完了しています。

インストールが完了したら以下のURLに対してWebブラウザからKompiraサーバにアクセスし、
ログイン画面が表示されることを確認してください。

この際、サーバ証明書の警告が表示されます。この警告を表示されなくなるようにするためには、
Kompira サーバ用のSSL証明書を取得し、Kompiraサーバ上のApacheへのインストールを行ってください。

.. code::

    https://<Hostname or ipaddress of Kompira server>/

.. note::

    HTTP でアクセスする場合は --no-https オプションを付けてインストールする必要があります。

Webブラウザでの操作方法については、操作ガイドマニュアルを参照してください。


.. _package_kompira_update:

**********************
アップデート
**********************

既にKompiraパッケージがインストールされている場合に、アップデートを行う方法について説明します。

Kompiraのバージョン番号形式は次のように定められています。

    .. code::

        1.<major-version>.<minor-version>

マイナーバージョン番号のみが変更されるアップデートをマイナーアップデート、
メジャーバージョン番号が変更されるアップデートをメジャーアップデートと呼びます。

例えばバージョン1.5.0から1.5.2へのアップデートはマイナーアップデート、
バージョン1.4.10から1.5.0へのアップデートはメジャーアップデートとなります。

メジャーアップデートはアーキテクチャ構成やDBスキーマの定義変更を含む可能性のある
アップデートであるため、マイナーアップデートとは異なる作業が必要となる場合があります。

アップデートの際は、現在使用しているKompiraバージョンとアップデートするKompiraバージョンを確認の上で作業を行ってください。


**マイナーアップデート**

    マイナーアップデートの場合は、オプション無しで install.sh を起動します。

    .. code::

        $ tar zxf kompira-<version>-bin.tar.gz
        $ cd kompira-<version>-bin
        # ./install.sh
        [2020-09-17 22:56:32] ****: ****************************************************************
        [2020-09-17 22:56:32] ****: Kompira-1.6.0:
        [2020-09-17 22:56:32] ****: Start: Install the Kompira
        [2020-09-17 22:56:32] ****:
        [2020-09-17 22:56:32] INFO:     SYSTEM                   = CENT
        [2020-09-17 22:56:32] INFO:     SYSTEM_NAME              = cent8
        [2020-09-17 22:56:32] INFO:     SYSTEM_RELEASE           = CentOS Linux release 8.2.2004 (Core)
        [2020-09-17 22:56:33] INFO:     SYSTEM_RELEASEVER        = 8.2.2004
        [2020-09-17 22:56:33] INFO:     PLATFORM_PYTHON          = /usr/libexec/platform-python
        [2020-09-17 22:56:33] INFO:     PYTHON                   = /bin/python3.6

        ...

        [2020-09-17 22:57:00] ****: ----------------------------------------------------------------
        [2020-09-17 22:57:00] ****: Check version of Kompira installed.
        [2020-09-17 22:57:00] ****:
        [2020-09-17 22:57:00] INFO: VERSION=1.6.0b4 [pip=/opt/kompira/bin/pip]
        [2020-09-17 22:57:00] INFO: A compatible version is installed.

        ...

        [2020-09-17 22:58:18] ****: ----------------------------------------------------------------
        [2020-09-17 22:58:18] ****: Test access to kompira.
        [2020-09-17 22:58:18] ****:
        [2020-09-17 22:58:19] INFO: Access succeeded:   <div class="brand-version">1.6.0</div>
        [2020-09-17 22:58:19] ****:
        [2020-09-17 22:58:19] ****: Finish: Install the Kompira (status=0)
        [2020-09-17 22:58:19] ****: ****************************************************************

    インストーラは自動でKompiraパッケージのアップデート処理を行います。
    「Finish: Install the Kompira (status=0)」という表示があれば、正常に完了しています。

    アップデートが完了したらWebブラウザからKompiraにログインし、
    Kompiraのバージョン番号表記が更新されていることを確認してください。

**メジャーアップデート**

    メジャーアップデートの場合は以下の手順でアップデートを行います。

    - export_dataコマンドでKompiraに保存されているデータを取り出す
    - install.shコマンドで --initdata オプションを付けてデータベース初期化モードで Kompira をインストールする
    - import_dataコマンドで最初に取り出したデータをKompiraに保存する

    install.shコマンドを実行する時点で、既存のデータベースが初期化されることに注意してください。

    .. code::

        $ cd kompira-<version>-bin
        $ /opt/kompira/bin/manage.py export_data --owner-mode --virtual-mode / > backup.json
        # ./install.sh --force --initdata
        $ /opt/kompira/bin/manage.py import_data --owner-mode --overwrite-mode backup.json
        [2018-04-09 21:44:15,936:30953:MainProcess] INFO: import data: start...
        [2018-04-09 21:44:16,010:30953:MainProcess] INFO: import object: imported "system/types/TypeObject" to "/system/types/TypeObject" (updated)
        [2018-04-09 21:44:16,022:30953:MainProcess] INFO: import object: imported "system/types/Directory" to "/system/types/Directory" (updated)
        [2018-04-09 21:44:16,033:30953:MainProcess] INFO: import object: imported "system" to "/system" (updated)

        ...

        [2018-04-09 21:44:22,126:30953:MainProcess] INFO: import fields: /user/data: []
        [2018-04-09 21:44:22,164:30953:MainProcess] INFO: import fields: /user/data/nodes: []
        [2018-04-09 21:44:22,202:30953:MainProcess] INFO: import fields: /user/data/accounts: []
        [2018-04-09 21:44:22,218:30953:MainProcess] INFO: import data: finished (created=0, updated=59, skipped=0, error=0, warning=0)

    install.shを実行する際は、データベースを初期化するために --initdata オプションと --force オプションを指定します。

    import_dataの処理が完了したらWebブラウザからKompiraにログインし、
    Kompiraのバージョン番号表記が更新されていること、既存のKompira上で作成していたKompiraオブジェクトが
    存在することを確認してください。

    .. note::
       Ver.1.5以前からVer1.6へアップデートする場合、上記の手順でアップデートすることはできません。以前のバージョンのKompiraを一度削除してから、
       改めて、Ver1.6を新規インストールしてください。

    .. note::

       Ver.1.5以前のKompiraからVer1.6へアップデートする場合、完全な互換性は保証されませんので、移行したジョブフローやライブラリオブジェクトが
       そのままでは動作しない可能性があります。必要に応じて、個々のジョブフローやライブラリを修正した上で、それらの動作確認を実施してください。


*****************************
PostgreSQL のアップグレード
*****************************

Ver.1.6.0 から Ver.1.6.9 までは PostgreSQL 12 を固定的にインストールしていましたが、PostgreSQL 12 は 2024/11 に EOL を迎えました。
そこで、Ver.1.6.10 以降の Kompira では PostgreSQL 13 以上のインストールに対応するようになりました。

- Kompira を新規インストールする場合は、その時点の Kompira が対応している最新の PostgreSQL をインストールします。
- Kompira をアップデートする場合は、既存の PostgreSQL のメジャーバージョンを保持します。ただし PostgreSQL のマイナーアップデートは実施されます。

いずれの場合でも、install.sh の ``--postgresql-version`` オプションでインストールする PostgreSQL のバージョンを指定することができます。

- install.sh に ``--postgresql-version=16`` や ``--postgresql-version=16.*`` と指定すると、指定したメジャーバージョンの最新版をインストールします。
- install.sh に ``--postgresql-version=16.4`` などと指定すると、特定のバージョンをインストールします。

Kompira のアップデート時にバージョンを指定して PostgreSQL をインストールするときに、例えば 12.17 から 17.0 など、メジャーバージョンが上がる場合を PostgreSQL のアップグレードと言います。
install.sh は PostgreSQL のアップグレードを検出すると、以下のようなメッセージを表示して実際にアップグレードを実行するか確認します。

.. code::

    # ./install.sh --postgresql-version=17

        ...

    [2024-10-29 12:00:00] ****: ----------------------------------------------------------------
    [2024-10-29 12:00:00] ****: Check current PostgreSQL and Kompira database existence.
    [2024-10-29 12:00:00] ****: 
    [2024-10-29 12:00:00] INFO: CUR_PG_BINDIR=/usr/pgsql-12/bin
    [2024-10-29 12:00:00] INFO: CUR_PG_DATADIR=/var/lib/pgsql/12/data
    [2024-10-29 12:00:00] INFO: CUR_PG_SERVICE=postgresql-12
    [2024-10-29 12:00:00] INFO: CUR_PG_VERSION=12.17
    [2024-10-29 12:00:00] INFO: CUR_PG_MAJVER=12
    [2024-10-29 12:00:00] INFO: Check free space for PostgreSQL migration
    [2024-10-29 12:00:00] INFO: Data used:       152,856 KiB (/var/lib/pgsql/12/data)
    [2024-10-29 12:00:00] INFO: Free space:    9,344,912 KiB (/var/lib/pgsql)
    [2024-10-29 12:00:00] INFO: Free space rate: 6113.54% (OK)
    [2024-10-29 12:00:00] WARN: PostgreSQL migration (12->17) detected, Are you sure?

    MIGRATE POSTGRESQL 12 TO 17 AND CONTINUE INSTALLATION? (yes/No) 


PostgreSQL のアップグレードを実施してインストールを継続する場合は ``y`` を入力してください。 ``n`` を入力するとインストールを中止します。
なお、install.sh に ``--force`` オプションを付けている場合は、この確認は行われずアップグレードとインストールを継続します。

PostgreSQL のアップグレードを実施する場合、install.sh 内部で PostgreSQL の pg_upgrade ユーティリティを実行して全てのデータを新しいバージョンに移行します。

.. note::

    pg_upgrade はサーバ内で全てのデータをコピーすることになるため、データベースクラスタが利用しているデータ量と同程度の空き容量が必要になることに注意してください。

上のメッセージに既存のデータベースクラスタのデータ量と、新しいバージョンのデータベースクラスタを作成する場所の空き容量を表示しています。

.. code::

    [2024-10-29 12:00:00] INFO: Data used:       152,856 KiB (/var/lib/pgsql/12/data)
    [2024-10-29 12:00:00] INFO: Free space:    9,344,912 KiB (/var/lib/pgsql)
    [2024-10-29 12:00:00] INFO: Free space rate: 6113.54% (OK)

上の例では十分な空き容量があることが分かります。空き容量が少ない場合は、アップグレードを実施する前に空き容量を確保することを検討してください。

.. note::

    install.sh は PostgreSQL のアップグレード時に空き容量のチェックを行ないます。
    既存データベースクラスタのデータ量に対して 120% に相当する空き容量が確認できない場合は、インストールを中止します。

**冗長構成における PostgreSQL のアップグレード**

冗長構成で PostgreSQL のアップグレードを実施する場合は、両系停止アップデート手順を基本とした専用の手順となります。
詳細は :ref:`HA_update_with_pg_upgrade` を参照してください。

.. versionadded:: 1.6.10

    PostgreSQL 13 以上のインストールに対応しました。アップデート時の PostgreSQL のアップグレードに対応しました。

.. _package_jobmngr:

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ジョブマネージャパッケージ
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

ジョブマネージャとイベント送信スクリプトを含むパッケージのインストール・アップデートについて記述します。

.. _package_jobmngr_install:

****************
インストール
****************

Kompiraパッケージを展開し、install.shを実行します。
ジョブマネージャはKompira本体と通信を行うため、Kompiraパッケージをインストールしたサーバのホスト名、もしくはIPアドレスをinstall.shの引数に指定する必要があります。

<version>はKompiraのバージョン番号に置き換えてください。

<kompira_ip>はKompiraサーバのホスト名、もしくはIPアドレスです。

.. code::

    $ tar zxf kompira-<version>-bin.tar.gz
    $ cd kompira-<version>-bin
    # ./install.sh --jobmngr <kompira_ip>
    [2020-09-18 00:42:54] ****: ****************************************************************
    [2020-09-18 00:42:54] ****: Kompira-1.6.0:
    [2020-09-18 00:42:54] ****: Start: Install the Kompira
    [2020-09-18 00:42:54] ****:
    [2020-09-18 00:42:54] INFO:     SYSTEM                   = CENT
    [2020-09-18 00:42:54] INFO:     SYSTEM_NAME              = cent8
    [2020-09-18 00:42:54] INFO:     SYSTEM_RELEASE           = CentOS Linux release 8.2.2004 (Core)
    [2020-09-18 00:42:54] INFO:     SYSTEM_RELEASEVER        = 8.2.2004
    [2020-09-18 00:42:54] INFO:     PLATFORM_PYTHON          = /usr/libexec/platform-python

    ...

    [2020-09-18 00:43:24] ****: ----------------------------------------------------------------
    [2020-09-18 00:43:24] ****: Setup kompira-jobmngrd.
    [2020-09-18 00:43:24] ****:

    ...

    [2020-09-18 00:43:24] VERBOSE: run: systemctl restart kompira_jobmngrd
    [2020-09-18 00:43:24] ****:
    [2020-09-18 00:43:24] ****: Finish: Install the Kompira (status=0)
    [2020-09-18 00:43:24] ****: ****************************************************************

インストーラは自動でジョブマネージャパッケージの新規インストール処理を行います。
「Finish: Install the Kompira (status=0)」という表示があれば、正常に完了しています。

ジョブマネージャプロセスが正しく起動しているかの確認方法については、:ref:`process_jobmngr` を参照してください。

また、Kompira本体がジョブマネージャと正しく通信できているかどうかについては、Kompiraの「管理領域設定ページ」から確認することができます。
WebブラウザからKompiraにログインし、「設定」→「管理領域設定」→「default」ページを表示してください。
「ジョブマネージャ状態」の欄にジョブマネージャパッケージをインストールしたサーバのホスト名が表示されていれば、正常に通信できています。

なお、install.sh に --amqps-verify オプションを付けた場合は、インストール途中に指定した Kompira サーバから SSL 証明書を scp でコピーするため、以下のようにパスワードの入力が求められます。

.. code::

    [2023-01-16 18:34:12] INFO: 
    [2023-01-16 18:34:12] INFO: !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    [2023-01-16 18:34:12] INFO: 
    [2023-01-16 18:34:12] INFO: Start copying the SSL/CA certificates from the kompira server with scp.
    [2023-01-16 18:34:12] INFO: 
    [2023-01-16 18:34:12] INFO: PLEASE ENTER THE PASSWORD OF THE REMOTE KOMPIRA SERVER (<kompira_ip>) FOR SCP.
    [2023-01-16 18:34:12] INFO: 
    [2023-01-16 18:34:12] INFO: !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    [2023-01-16 18:34:12] INFO: 
    [2023-01-16 18:34:12] VERBOSE: run: scp -q -p -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@<kompira_ip>:/opt/kompira/ssl/certs/{kompira-bundle-ca.crt,amqp-client-kompira{.crt,.key}} /opt/kompira/ssl/certs/
    root@<kompira_ip>'s password: 

    ...


.. versionchanged:: 1.6.8

    install.sh に --amqps-verify オプションを付けた場合は、Kompira サーバから SSL 証明書を scp でコピーするようになりました。

.. _package_jobmngr_update:

***************
アップデート
***************

インストールと同様の手順を実行することで、ジョブマネージャパッケージのアップデートを行うことができます。


.. _package_sendevt:

^^^^^^^^^^^^^^^^^^^^^^^^^
イベント送信パッケージ
^^^^^^^^^^^^^^^^^^^^^^^^^

イベント送信スクリプトを含むパッケージのインストール・アップデートについて記述します。

イベント送信パッケージは、LinuxおよびWindowsへのインストールに対応しています。

.. _package_sendevt_install_linux:

*****************************
RHEL/CentOS へのインストール
*****************************
Kompiraパッケージを展開し、install.shを実行します。

イベント送信スクリプトはKompira本体にデータを送信するため、
Kompiraパッケージをインストールしたサーバのホスト名、もしくはIPアドレスをinstall.shの引数に指定する必要があります。

<version>はKompiraのバージョン番号に置き換えてください。
<kompira_ip>はKompiraサーバのホスト名、もしくはIPアドレスです。

.. code::

    $ tar zxf kompira-<version>-bin.tar.gz
    $ cd kompira-<version>-bin
    # ./install.sh --sendevt <kompira_ip>
    [2023-01-16 18:33:50] ****: ****************************************************************
    [2023-01-16 18:33:50] ****: Kompira-1.6.8:
    [2023-01-16 18:33:50] ****: Start: Install the Kompira
    [2023-01-16 18:33:50] ****: 
    [2023-01-16 18:33:50] INFO:     SYSTEM                   = CENT
    [2023-01-16 18:33:50] INFO:     SYSTEM_NAME              = cent7
    [2023-01-16 18:33:50] INFO:     SYSTEM_RELEASE           = CentOS Linux release 7.7.1908 (Core)
    [2023-01-16 18:33:50] INFO:     SYSTEM_RELEASEVER        = 7.7.1908
    [2023-01-16 18:33:50] INFO:     PLATFORM_PYTHON          = /usr/libexec/platform-python
    [2023-01-16 18:33:50] INFO:     PYTHON                   = /usr/bin/python
    [2023-01-16 18:33:50] INFO:     SYSTEMD                  = true
    [2023-01-16 18:33:50] INFO:     TMPDIR                   = /root/kompira-1.6.8-bin/.tmp.install-20230116-1833.rQ8X
    [2023-01-16 18:33:50] INFO:     LOCALE_LANG              = ja_JP.UTF-8
    [2023-01-16 18:33:50] INFO:     PATH                     = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin
    [2023-01-16 18:33:50] INFO:     HTTPS_MODE               = true
    [2023-01-16 18:33:50] INFO:     AMQPS_MODE               = true

    ...

    [2023-01-16 18:35:04] VERBOSE: run: chown :kompira /opt/kompira/ssl/certs/kompira-bundle-ca.crt /opt/kompira/ssl/certs/amqp-client-kompira.crt /opt/kompira/ssl/certs/amqp-client-kompira.key
    [2023-01-16 18:35:04] ****: ----------------------------------------------------------------
    [2023-01-16 18:35:04] ****: Setup kompira common files.
    [2023-01-16 18:35:04] ****: 
    [2023-01-16 18:35:04] INFO: Create log directory: /var/log/kompira
    [2023-01-16 18:35:04] VERBOSE: run: install -g kompira -m 775 -d /var/log/kompira
    [2023-01-16 18:35:04] VERBOSE: run: find /var/log/kompira -type f -user root ! -name audit-* -exec chown kompira:kompira {} ;
    [2023-01-16 18:35:04] INFO: Create kompira.conf
    [2023-01-16 18:35:04] VERBOSE: run: install -m 644 /root/kompira-1.6.8-bin/.tmp.install-20230116-1833.rQ8X/kompira.conf /opt/kompira/kompira.conf
    [2023-01-16 18:35:04] ****: 
    [2023-01-16 18:35:04] ****: Finish: Install the Kompira (status=0)
    [2023-01-16 18:35:04] ****: ****************************************************************


「Finish: Install the Kompira (status=0)」という表示があれば、正常に完了しています。

インストールが完了すると、/opt/kompira/bin以下にkompira_sendevtコマンドが配置された状態となります。

.. code::

    $ /opt/kompira/bin/kompira_sendevt --version
    kompira_sendevt (Kompira version 1.6.8)

なお、install.sh に --amqps-verify オプションを付けた場合は、インストール途中に指定した Kompira サーバから SSL 証明書を scp でコピーするため、以下のようにパスワードの入力が求められます。

.. code::

    [2023-01-16 18:34:12] INFO: 
    [2023-01-16 18:34:12] INFO: !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    [2023-01-16 18:34:12] INFO: 
    [2023-01-16 18:34:12] INFO: Start copying the SSL/CA certificates from the kompira server with scp.
    [2023-01-16 18:34:12] INFO: 
    [2023-01-16 18:34:12] INFO: PLEASE ENTER THE PASSWORD OF THE REMOTE KOMPIRA SERVER (<kompira_ip>) FOR SCP.
    [2023-01-16 18:34:12] INFO: 
    [2023-01-16 18:34:12] INFO: !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    [2023-01-16 18:34:12] INFO: 
    [2023-01-16 18:34:12] VERBOSE: run: scp -q -p -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@<kompira_ip>:/opt/kompira/ssl/certs/{kompira-bundle-ca.crt,amqp-client-kompira{.crt,.key}} /opt/kompira/ssl/certs/
    root@<kompira_ip>'s password: 

    ...


.. versionchanged:: 1.6.8

    install.sh に --amqps-verify オプションを付けた場合は、Kompira サーバから SSL 証明書を scp でコピーするようになりました。

.. _package_sendevt_install_windows:

*************************
Windowsへのインストール
*************************

1. **Python のインストール**

    Python 3.6 を Windows にインストールします。

    * https://www.python.org/downloads/

    上記の公式ダウンロードサイトから最新の Python 3.6 のインストーラをダウンロードして、
    対象の Windows にインストールしてください。

    インストールが完了したら、コマンドラインから Python が起動できるように、環境変数のパスを追加しておきます。

    +---------------------------------------+----------------------------------------------------------+
    | パス                                  | 説明                                                     |
    +=======================================+==========================================================+
    | ``C:\Program Files\Python36``         | Python のコマンドが含まれるフォルダ                      |
    +---------------------------------------+----------------------------------------------------------+
    | ``C:\Program Files\Python36\Scripts`` | pip コマンドなどが格納されるフォルダ                     |
    +---------------------------------------+----------------------------------------------------------+


2. **Kompira 用 Python 仮想環境 (venv) の作成**

    ``C:\Kompira`` に Kompira 用の独立した Python 仮想環境 (venv) を作成します。

    .. code::

        C:\> python -m venv C:\Kompira


3. **ログファイル出力先ディレクトリの作成**

    ログファイルの出力先としてディレクトリ ``C:\Kompira\Log`` を作成します。

    .. code::

        C:\> mkdir C:\Kompira\Log

4. **kompira_sendevt パッケージのインストール**

    Kompira パッケージを Windows 上にダウンロードして展開したら、
    dist ディレクトリに含まれる Kompira_sendevt-<version>-py3-none-any.whl を
    仮想環境の pip コマンドでインストールします。

    .. code::

        C:\> C:\Kompira\Scripts\pip.exe install Kompira_sendevt-1.6.0-py3-none-any.whl
        Processing c:\users\kompira\documents\kompira-package\kompira_sendevt-1.6.0-py3-none-any.whl
        Collecting amqp~=2.6.1 (from Kompira-sendevt==1.6.8)

        ...

        Installing collected packages: amqp, decorator, Kompira-sendevt
        Successfully installed Kompira-sendevt-1.6.8 amqp-2.6.1 vine-1.3.0


    以上でイベント送信パッケージのインストールは完了です。
    kompira_sendevt コマンドは ``C:\Kompira\Scripts`` にインストールされますので、
    次のように kompira_sendevt コマンドを実行してみてください。

    .. code::

        C:\> C:\Kompira\Scripts\kompira_sendevt.exe --version
        kompira_sendevt (Kompira version 1.6.8)

    正しくインストールされていれば、バージョン番号が出力されます。

    ``C:\Kompira\Scripts`` も環境変数のパスに追加すれば、パスを省略して実行できます。


5. **Kompira サーバから SSL 証明書ファイルの取得**

    インストール時に --amqps-verify オプションを付けるなどして、SSL 証明書の検証が有効になっている Kompira サーバに kompira_sendevt でメッセージを送信するためにはその Kompira サーバが発行した SSL 証明書が必要になります。
    kompira_sendevt で SSL 証明書を用いて接続するためには、Kompira サーバから以下のファイルを取得して ``C:\Kompira\SSL\Certs`` ディレクトリに配置してください。

    - /opt/kompira/ssl/certs/kompira-bundle-ca.crt
    - /opt/kompira/ssl/certs/amqp-client-kompira.crt
    - /opt/kompira/ssl/certs/amqp-client-kompira.key

    例えば scp コマンドが利用できる Windows であれば、以下のように Kompira サーバからファイル転送してください。``<kompira_ip>`` の部分は Kompira サーバのアドレスを指定してください。

    .. code::

        C:\> mkdir C:\Kompira\SSL\Certs
        C:\> scp root@<kompira_ip>:/opt/kompira/ssl/certs/{kompira-bundle-ca.crt,amqp-client-kompira{.crt,.key}} C:\Kompira\SSL\Certs


6. **設定ファイル kompira.conf の作成**

    kompira_sendevt が読み込む設定ファイルを ``C:\Kompira\kompira.conf`` に作成してください。
    Windows 環境におけるデフォルト設定を以下に示しますが、``<kompira_ip>`` の部分は Kompira サーバのアドレスを指定してください。

    .. code::

        [kompira]
        site_id         = 1

        [logging]
        logdir          = C:\Kompira\Log

        [amqp-connection]
        server          = <kompira_ip>
        port            = 5671
        ssl             = true
        ssl_verify      = false
        ssl_cacertfile  = 
        ssl_certfile    = 
        ssl_keyfile     = 

        [event]
        channel         = /system/channels/Alert

        [agent]
        name            = default

    Kompira サーバから取得した SSL 証明書を用いる場合は、以下の部分を書き換えてください。

    .. code::

        ssl_verify      = true
        ssl_cacertfile  = C:\Kompira\SSL\Certs\kompira-bundle-ca.crt
        ssl_certfile    = C:\Kompira\SSL\Certs\amqp-client-kompira.crt
        ssl_keyfile     = C:\Kompira\SSL\Certs\amqp-client-kompira.key


.. _package_sendevt_update:

****************
アップデート
****************

インストールと同様の手順を実行することで、イベント送信パッケージのアップデートを行うことができます。

.. _offline_install:

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
オフラインインストール
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

オフラインインストールを行なうには以下のステップを踏む必要があります。

* インターネット接続環境での kompira-extra パッケージの作成
* kompira-extra パッケージを利用したオフラインインストール

.. note::

    ただし、すべての環境で動作確認できているわけではないので、問題があればご報告ください。

****************************************************************
インターネット接続環境での kompira-extra パッケージの作成
****************************************************************

kompira-extra パッケージを作成するには、以下の条件を満たすサーバ上で実施する必要があります。

* オフラインインストールする対象と同じ構成のサーバ（少なくとも OS とバージョンは合わせてください）
* インターネットに接続できるサーバ（必要であればproxyを指定してください）

.. note::

    RHEL では必要に応じてサブスクリプションを登録しておいてください。

**install.sh を用いた kompira-extra パッケージの作成**

kompira パッケージに含まれる install.sh に ``--extra`` オプションを付与して実行してください。

.. code::

    $ tar zxf kompira-<version>-bin.tar.gz
    $ cd kompira-<version>-bin
    # ./install.sh --extra
    [2021-11-04 20:56:38] ****: ****************************************************************
    [2021-11-04 20:56:38] ****: Kompira-1.6.3:
    [2021-11-04 20:56:38] ****: Start: Install the Kompira
    [2021-11-04 20:56:38] ****: 
    [2021-11-04 20:56:38] INFO:     SYSTEM                   = CENT
    [2021-11-04 20:56:38] INFO:     SYSTEM_NAME              = cent8
    [2021-11-04 20:56:38] INFO:     SYSTEM_RELEASE           = CentOS Linux release 8.2.2004 (Core) 
    [2021-11-04 20:56:38] INFO:     SYSTEM_RELEASEVER        = 8.2.2004
    [2021-11-04 20:56:38] INFO:     PLATFORM_PYTHON          = /usr/libexec/platform-python
    [2021-11-04 20:56:38] INFO:     PYTHON                   = 
    [2021-11-04 20:56:38] INFO:     SYSTEMD                  = true
    [2021-11-04 20:56:38] INFO:     TMPDIR                   = /root/kompira-1.6.3-bin/.tmp.install-20211104-2056.P3fx
    [2021-11-04 20:56:38] INFO:     LOCALE_LANG              = ja_JP.UTF-8
    [2021-11-04 20:56:38] INFO:     PATH                     = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin
    [2021-11-04 20:56:38] INFO:     HTTPS_MODE               = true
    [2021-11-04 20:56:38] INFO:     FORCE_MODE               = false
    [2021-11-04 20:56:38] INFO:     BACKUP_MODE              = true
    [2021-11-04 20:56:38] INFO:     BACKUP_PROCESS           = false
    [2021-11-04 20:56:38] INFO:     INITDATA_MODE            = false
    [2021-11-04 20:56:38] INFO:     INITFILE_MODE            = false
    [2021-11-04 20:56:38] INFO:     OFFLINE_MODE             = false
    [2021-11-04 20:56:38] INFO:     JOBMNGR_MODE             = false
    [2021-11-04 20:56:38] INFO:     SENDEVT_MODE             = false
    [2021-11-04 20:56:38] INFO:     PROXY_URL                = 
    [2021-11-04 20:56:38] INFO:     NO_PROXY                 = localhost,127.0.0.1
    [2021-11-04 20:56:38] INFO:     KOMPIRA_SERVER           = localhost
    [2021-11-04 20:56:38] INFO:     DRY_RUN                  = false
    [2021-11-04 20:56:38] ****: ----------------------------------------------------------------

    ...

    opt/kompira/extra/1.6.3/cent8/wheelhouse/PyYAML-5.3.1-cp36-cp36m-linux_x86_64.whl
    opt/kompira/extra/1.6.3/cent8/wheelhouse/pykerberos-1.2.1-cp36-cp36m-linux_x86_64.whl
    opt/kompira/extra/1.6.3/cent8/wheelhouse/future-0.18.2-py3-none-any.whl
    opt/kompira/extra/1.6.3/cent8/wheelhouse/PTable-0.9.2-py3-none-any.whl
    [2021-11-04 21:08:58] ****: 
    [2021-11-04 21:08:58] ****: Finish: Install the Kompira (status=0)
    [2021-11-04 21:08:58] ****: ****************************************************************


**kompira-extra パッケージの確認**

問題がなければ、10～20分程度で ``kompira-extra-`` で始まるパッケージファイルが生成されますので確認してください。

.. code::

    # ls -lh kompira-extra-*.tar.gz
    -rw-r--r--. 1 root root 290M Nov  4 21:08 kompira-extra-1.6.3.cent8.tar.gz

****************************************************************
kompira-extra パッケージを利用したオフラインインストール
****************************************************************

**kompira, kompira-extra パッケージの準備**

オフラインインストールを実施したいサーバに、kompira パッケージと上で作成した kompira-extra パッケージを配置してください。

.. code::

    # ls -l kompira-*
    -rw-r--r--. 1 root root   7555278 Nov  4 21:11 kompira-1.6.3-bin.tar.gz
    -rw-r--r--. 1 root root 303772888 Nov  4 21:12 kompira-extra-1.6.3.cent8.tar.gz


**kompira-extra パッケージの展開**

root 権限で kompira-extra パッケージをルートディレクトリ配下に展開してください。

.. code::

    # tar zxf kompira-extra-1.6.3.cent8.tar.gz -C /

``/opt/kompira/extra/1.6.x/${OS}/`` 配下にオフラインインストールに必要な各種パッケージが展開されていることを確認してください。


.. code::

    $ ls -l /opt/kompira/extra/1.6.3/*
    total 40
    drwxr-xr-x. 3 root root 24576 Nov  4 21:08 packages
    drwxr-xr-x. 2 root root     6 Nov  4 20:57 pip
    drwxr-xr-x. 2 root root  8192 Nov  4 21:08 wheelhouse


**kompira オフラインインストールの実施**

kompira パッケージを展開して install.sh に ``--offline`` オプションを付けて実行してください。


.. code::

    $ tar zxf kompira-<version>-bin.tar.gz
    $ cd kompira-<version>-bin
    # ./install.sh --offline
    [2021-11-04 21:14:37] ****: ****************************************************************
    [2021-11-04 21:14:37] ****: Kompira-1.6.3:
    [2021-11-04 21:14:37] ****: Start: Install the Kompira (offline-mode)
    [2021-11-04 21:14:37] ****: 
    [2021-11-04 21:14:37] INFO:     SYSTEM                   = CENT
    [2021-11-04 21:14:37] INFO:     SYSTEM_NAME              = cent8
    [2021-11-04 21:14:37] INFO:     SYSTEM_RELEASE           = CentOS Linux release 8.2.2004 (Core) 
    [2021-11-04 21:14:37] INFO:     SYSTEM_RELEASEVER        = 8.2.2004
    [2021-11-04 21:14:37] INFO:     PLATFORM_PYTHON          = /usr/libexec/platform-python
    [2021-11-04 21:14:37] INFO:     PYTHON                   = 
    [2021-11-04 21:14:37] INFO:     SYSTEMD                  = true
    [2021-11-04 21:14:37] INFO:     TMPDIR                   = /root/kompira-1.6.3-bin/.tmp.install-20211104-2114.7XV8
    [2021-11-04 21:14:37] INFO:     LOCALE_LANG              = ja_JP.UTF-8
    [2021-11-04 21:14:37] INFO:     PATH                     = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin
    [2021-11-04 21:14:37] INFO:     HTTPS_MODE               = true
    [2021-11-04 21:14:37] INFO:     FORCE_MODE               = false
    [2021-11-04 21:14:37] INFO:     BACKUP_MODE              = true
    [2021-11-04 21:14:37] INFO:     BACKUP_PROCESS           = false
    [2021-11-04 21:14:37] INFO:     INITDATA_MODE            = false
    [2021-11-04 21:14:37] INFO:     INITFILE_MODE            = false
    [2021-11-04 21:14:37] INFO:     OFFLINE_MODE             = true
    [2021-11-04 21:14:37] INFO:     JOBMNGR_MODE             = false
    [2021-11-04 21:14:37] INFO:     SENDEVT_MODE             = false
    [2021-11-04 21:14:37] INFO:     PROXY_URL                = 
    [2021-11-04 21:14:37] INFO:     NO_PROXY                 = localhost,127.0.0.1
    [2021-11-04 21:14:37] INFO:     KOMPIRA_SERVER           = localhost
    [2021-11-04 21:14:37] INFO:     DRY_RUN                  = false
    [2021-11-04 21:14:37] ****: ----------------------------------------------------------------

    ...

    [2021-11-04 21:15:25] ****: ----------------------------------------------------------------
    [2021-11-04 21:15:25] ****: Test access to kompira.
    [2021-11-04 21:15:25] ****: 
    [2021-11-04 21:15:26] INFO: Access succeeded:   <div class="brand-version">1.6.3</div>
    [2021-11-04 21:15:26] ****: 
    [2021-11-04 21:15:26] ****: Finish: Install the Kompira (offline-mode) (status=0)
    [2021-11-04 21:15:26] ****: ****************************************************************


.. _process:

-----------------------
Kompiraプロセス管理
-----------------------

Kompiraシステムは複数のプロセスが協調動作することにより成り立っています。
以下ではKompiraを構成するプロセスについての情報を記述します。

.. _process_architecture:

^^^^^^^^^^^^^^^^^^^^^^
Kompiraのプロセス構成
^^^^^^^^^^^^^^^^^^^^^^

Kompiraシステムを構成するプロセスは、以下のようになっています。

**Kompiraデーモン (kompirad)**
    Kompiraジョブフローを実行、管理するためのデーモンプロセスです。

    Kompiraジョブマネージャに対してリモートコマンドの実行指示を出し、
    結果を受け取ります。

**Kompiraジョブマネージャ (kompira_jobmngrd)**
    Kompiraデーモンから指示されたリモートコマンドを実行するためのデーモ
    ンプロセスです。

    Kompiraデーモンからリモートコマンドの指示を受信すると、Kompiraジョブマネージャは
    接続種別で指定されたプロトコルでリモートホストへ接続し、コマンドを実行します。
    コマンドの実行結果はKompiraデーモンに送信されます。

その他、Kompiraシステムに必要なプロセスには、Apache(httpd)、
PostgreSQL(postgresql)、RabbitMQ(rabbitmq-server) があります。

これらの各プロセスは、マシン起動時に自動的に起動するようにinstall.shに
よって設定されます。

.. _process_daemon:

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Kompiraデーモンの起動・停止・状態確認
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Kompiraデーモンの起動・停止は、ルート権限で行ってください。
起動後の実効ユーザーは自動的にkompiraに変更されます。

************************
RHEL/CentOS 7/8 系の場合
************************

RHEL/CentOS 7/8 系での Kompira デーモンの起動は以下のコマンドによって行います。

.. code::

    # systemctl start kompirad

停止には以下のコマンドを実行します。

.. code::

    # systemctl stop kompirad

systemctl status コマンドで、Kompiraデーモンの状態を確認することができます。

.. code::

    $ systemctl status kompirad.service
    * kompirad.service - Kompira-daemon
       Loaded: loaded (/usr/lib/systemd/system/kompirad.service; enabled; vendor preset: disabled)
       Active: active (running) since Thu 2018-07-05 16:33:02 JST; 2h 20min ago
      Process: 5277 ExecStartPre=/opt/kompira/bin/prestart_kompirad.sh (code=exited, status=0/SUCCESS)
     Main PID: 5368 (kompirad)
       CGroup: /system.slice/kompirad.service
               `-5368 /opt/kompira/bin/python3.6 /opt/kompira/bin/kompirad

     Jul 05 16:32:32 kompira-install-test3.dev.fixpoint.co.jp systemd[1]: Starting Kompira-daemon...
     Jul 05 16:33:02 kompira-install-test3.dev.fixpoint.co.jp systemd[1]: Started Kompira-daemon.

起動している時は Active: の欄が **active (running)**、停止している時は **inactive (dead)** と表示されます。

.. _process_jobmngr:

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Kompiraジョブマネージャの起動・停止・状態確認
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


Kompiraジョブマネージャの起動・停止もKompiraデーモンと同様にルート権限で行ってください。
起動後の実効ユーザーは自動的にkompiraに変更されます。

************************
RHEL/CentOS 7/8 系の場合
************************

RHEL/CentOS 7/8 系での Kompiraジョブマネージャの起動は以下のコマンドによって行います。

.. code::

    # systemctl start kompira_jobmngrd.service

停止には以下のコマンドを実行します。

.. code::

    # systemctl stop kompira_jobmngrd.service

statusコマンドでKompiraジョブマネージャの状態を確認することができます。

.. code::

    $ systemctl status kompira_jobmngrd.service
    * kompira_jobmngrd.service - Kompira-jobmanager
       Loaded: loaded (/usr/lib/systemd/system/kompira_jobmngrd.service; enabled; vendor preset: disabled)
       Active: active (running) since Thu 2018-07-05 16:32:22 JST; 2h 25min ago
     Main PID: 5164 (kompira_jobmngr)
       CGroup: /system.slice/kompira_jobmngrd.service
               |-5164 /opt/kompira/bin/python3.6 /opt/kompira/bin/kompira_jobmngrd
               `-5197 /opt/kompira/bin/python3.6 /opt/kompira/bin/kompira_jobmngrd

     Jul 05 16:32:22 kompira-install-test3.dev.fixpoint.co.jp systemd[1]: Started Kompira-jobmanager.
     Jul 05 16:32:22 kompira-install-test3.dev.fixpoint.co.jp systemd[1]: Starting Kompira-jobmanager...

起動している時は Active: の欄が **active (running)**、停止している時は **inactive (dead)** と表示されます。


.. _process_port:

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Kompira使用ポート一覧
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Kompiraパッケージをインストールしたサーバ上では、以下に挙げるポートに外部から接続可能である必要があります。

+--------------+---------------------------------------------------------------------------------------------+
| ポート番号   | 説明                                                                                        |
+==============+=============================================================================================+
| 80/TCP       | HTTP (HTTPSからのみブラウザアクセスする場合は不要)                                          |
+--------------+---------------------------------------------------------------------------------------------+
| 443/TCP      | HTTPS (HTTPからのみブラウザアクセスする場合は不要)                                          |
+--------------+---------------------------------------------------------------------------------------------+
| 5671/TCP     | AMQPS (外部の kompira_jobmngrd や kompira_sendevt から AMQPS 接続を許可しない場合は不要)    |
+--------------+---------------------------------------------------------------------------------------------+
| 5672/TCP     | AMQP (外部の kompira_jobmngrd や kompira_sendevt から AMQP 接続を許可しない場合は不要)      |
+--------------+---------------------------------------------------------------------------------------------+

その他、httpd サーバと Kompira エンジンの RPC 用にループバックIFで 5593/TCP のポートを使用します。
（こちらは外部から接続可能にする必要はありません）


また、冗長構成を構築する場合は、各ノード間（ハートビート用の内部IFを用いる場合はその内部IF間）で以下のポートを用いた通信を行なえる必要があります。

+--------------+-----------------------------------------------+
| ポート番号   | 説明                                          |
+==============+===============================================+
| 2224/TCP     | pcs (冗長構成ミドルウェア)                    |
+--------------+-----------------------------------------------+
| 4369/TCP     | epmd (Erlang port mapper daemon)              |
+--------------+-----------------------------------------------+
| 5405/UDP     | corosync (ハートビートに使用)                 |
+--------------+-----------------------------------------------+
| 5432/TCP     | PostgreSQL (レプリケーションに使用)           |
+--------------+-----------------------------------------------+
| 25672/TCP    | RabbitMQ Server (ノード間通信に使用)          |
+--------------+-----------------------------------------------+

.. versionchanged:: 1.6.4
    rsyncd は使用しなくなったため、ポート番号一覧から削除しました。

.. versionadded:: 1.6.8

    AMQPS に対応したため、ポート一覧に 5671/TCP を追加しました。

.. _node:

-----------------------
ノードの設定
-----------------------

Kompira では以下の種類のノードに対して、リモートジョブを実行することができます。

- ローカルノード
- SSH ノード
- Windows ノード
- ネットワーク機器ノード

ノードの種類ごとに指定する接続種別や、事前にノード側に必要な設定が異なります。

接続種別の指定方法については :ref:`control_variables` を参照してください。

.. _node_local:

^^^^^^^^^^^^^^^^^^^^
ローカルノードの設定
^^^^^^^^^^^^^^^^^^^^

ローカルノードに対する接続種別は以下の1種類です。

+-----------+--------------+-----------------------------------------------------------------+
| 接続種別  | プロトコル   | 備考                                                            |
+===========+==============+=================================================================+
| ``local`` | ローカル実行 | kompira_jobmngrd が動作しているノード上でジョブを直接実行します |
+-----------+--------------+-----------------------------------------------------------------+

Kompira においてリモートノードを明示的に指定していない場合、ローカルノード上でジョブを直接実行します。
ここでのローカルノードとは kompira_jobmngrd サービスが動作しているノードを示します。

.. versionadded:: 1.6.6

    ローカルノードについての説明を追加しました。

.. _node_ssh:

^^^^^^^^^^^^^^^^^^^^
SSH ノードの設定
^^^^^^^^^^^^^^^^^^^^

SSH ノードに対する接続種別は以下の1種類です。

+----------+------------+-------------------+
| 接続種別 | プロトコル | 備考              |
+==========+============+===================+
| ``ssh``  | SSH        | SSH v2 のみに対応 |
+----------+------------+-------------------+

Kompira から SSH ノードに対してコマンド実行を行う場合、sshバージョン2でログインできる状態である必要があります。
最近の Linux などであればインストールした時点で ssh ログインできる状態になっているため、特に設定する必要はありません。
それ以外の対象ノードで ssh ログインを有効にする方法については、各システムのマニュアル等を参考にして設定してください。

.. note::

   サポートしているSSH のバージョンは v2 のみとなっています。v1 には対応しておりません。


.. _node_winrs:

^^^^^^^^^^^^^^^^^^^^
Windows ノードの設定
^^^^^^^^^^^^^^^^^^^^

Windows ノードに対しては、以下の4種類の接続種別が選べます。

+-------------------------------------+---------------------------------------------+----------------------------------------------+
| 接続種別                            | プロトコル                                  | 備考                                         |
+=====================================+=============================================+==============================================+
| ``windows/https``                   | WS-Man HTTPS                                | サーバ側に SSL 証明書の導入が必要            |
+-------------------------------------+---------------------------------------------+----------------------------------------------+
| ``windows/https-ignore-validation`` | WS-Man HTTPS (サーバ証明書の検証エラー無視) | 自己署名証明書が利用可能                     |
+-------------------------------------+---------------------------------------------+----------------------------------------------+
| ``windows/http``                    | WS-Man HTTP (メッセージ暗号化あり)          |                                              |
+-------------------------------------+---------------------------------------------+----------------------------------------------+
| ``windows/http-unencrypted``        | WS-Man HTTP (メッセージ暗号化なし)          | （非推奨）サーバ側で非暗号化通信の許可が必要 |
+-------------------------------------+---------------------------------------------+----------------------------------------------+

.. note::

    互換性のため従来の接続種別 ``winrs`` も利用できます。ただし、この場合はポート番号が指定されているかどうかで、利用するプロトコルが切り替わります。ポート番号として 5986 または 443 が指定されている場合は HTTPS が、5985 または 80 が指定されている場合は HTTP が利用されます。ポート番号が省略されている場合は HTTPS 接続を試みます。

Kompira から Windows ノードに対してコマンド実行を行う場合、事前に Windows ノード側にて WinRM の設定が必要となります。
なお、対応している WinRM のバージョンは 1.1, 2.0, 3.0 になります。

************************************
WinRM のリモート管理を有効にする
************************************

WinRM を有効にするため、Windows のコマンドプロンプトを「管理者として実行」して、
``winrm quickconfig`` （または ``winrm qc``）と実行してください。
「変更しますか [y/n]?」と表示されたら ``y`` と答えてください。
なおこの操作は最初に1回行っておけば、2回目以降は不要です。

以下は Windows 7 で実行した場合の例ですが、
Windows のバージョンやその時点での設定状況によって表示される内容の詳細は異なります。

.. ifconfig:: language == 'ja'

    .. code::

        C:\>winrm quickconfig
        WinRM はこのコンピューター上で要求を受信するように設定されていません。
        次の変更を行う必要があります:

        WinRM サービスの種類を遅延自動開始に設定します。
        WinRM サービスを開始します。
        ローカル ユーザーにリモートで管理権限を付与するよう LocalAccountTokenFilterPolicy を構成してください。

        変更しますか [y/n]? y

        WinRM は要求を受信するように更新されました。

        WinRM サービスの種類を正しく変更できました。
        WinRM サービスが開始されました。
        ローカル ユーザーにリモートで管理権限を付与するよう LocalAccountTokenFilterPolicy を構成しました。
        WinRM は、管理用にこのコンピューターへのリモート アクセスを許可するように設定されていません。
        次の変更を行う必要があります:

        このコンピューター上のあらゆる IP への WS-Man 要求を受け付けるため、HTTP://* 上に WinRM リスナーを作成します。
        WinRM ファイアウォールの例外を有効にします。

        変更しますか [y/n]? y

        WinRM はリモート管理用に更新されました。

        このコンピューター上のあらゆる IP への WS-Man 要求を受け付けるため、HTTP://* 上に WinRM リスナーを作成しました。
        WinRM ファイアウォールの例外を有効にしました。

.. ifconfig:: language != 'ja'

    .. code::

        C:\>winrm quickconfig
        ...
        Make these changes [y/n]? y
        ...

************************************
WinRM の接続設定を変更する
************************************

接続方式としては HTTPS 接続が最も安全ですが、Windows ノードに SSL 証明書を導入しておく必要があります。
ここでは詳細な手順は示しませんが、Microsoft のサポートページなどを参考にしてみてください。

.. ifconfig:: language == 'ja'

    - https://docs.microsoft.com/ja-jp/search/?terms=winrm%20https

.. ifconfig:: language != 'ja'

    - https://docs.microsoft.com/en-us/search/?terms=winrm%20https

非推奨ですが、メッセージ暗号化なしの HTTP 接続を行なう場合は、WinRM で非暗号化通信を許可しておく必要があります。
管理者として実行したコマンドプロンプトから以下のコマンドを実行することで、非暗号化通信を許可することができます。

.. code::

    C:\> winrm set winrm/config/service @{AllowUnencrypted="true"}

HTTP 接続でメッセージ暗号化ありの場合、メッセージ暗号化無しに比べると速度低下が見られる場合があります。速度低下が問題になる場合は、リスクを理解したうえで非暗号化通信の利用を検討してください。

WinRM は標準では  Administrators グループに所属する特権ユーザだけが接続できます。非特権ユーザとして接続する場合は追加の設定が必要になりますので、以下のいずれかを試してみてください。

* 当該ユーザを "Remote Management Users" グループに所属させる。
* 管理者として実行したコマンドプロンプトから以下のコマンドを実行して、当該ユーザあるいは所属グループのいずれかに読み込み権限と実行権限を与える。

    .. code::

        C:\> winrm configSDDL default

.. versionchanged:: 1.4.10

    Kompira Ver.1.4.10 以降では、デフォルトでNTLM認証に対応したため、BASIC認証の許可設定は不要となりました。

.. versionchanged:: 1.6.4

    HTTP 接続の WinRM においてメッセージ暗号化に対応したため、非暗号化通信の許可設定は必須ではなくなりました。あわせて、非暗号化通信の通信許可は非推奨となりました。

************************************
ジョブフローでの動作確認
************************************

Kompira で以下のようなジョブフローを作成・実行して windows ノードへのコマンド制御ができるか確認してください。

.. ifconfig:: language == 'ja'

    .. code::

        [__host__ = '<Windowsサーバのアドレス>',
         __user__ = '<Windowsユーザー名>',
         __password__ = '<Windowsユーザーパスワード>',
         __conntype__ = 'windows/http']
        -> ['ver']
        -> print($RESULT)

.. ifconfig:: language != 'ja'

    .. code::

        [__host__ = '<IP address of Windows server>',
         __user__ = '<Username of Windows account>',
         __password__ = '<Password of Windows account>',
         __conntype__ = 'windows/http']
        -> ['ver']
        -> print($RESULT)

ジョブフロープロセスのコンソールにWindowsのバージョン番号が表示されれば成功です。

なお WinRM 2.0 以降ではデフォルトで TCP ポート 5985 番を利用しますが、
Windows Server 2008 などの WinRM 1.1 では利用するポート番号が 80 となっていますので、
その際はポート番号の設定 ``__port__ = 80`` を追加するようにしてください。

うまく接続できない場合は、ファイアウォールで TCP ポート 5985 番（や 80番）が
通過できない設定になっていないか、ログインアカウントの設定が正しいかなどを確認してください。

.. _node_device:

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ネットワーク機器ノードの設定
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Kompira からネットワーク機器ノードに対してコマンド実行を行う場合、ネットワーク機器によっては事前に SSH または TELNET によるログインを有効化する必要があります。各機器で SSH や TELNET ログインを有効にする方法については、各機器のマニュアル等を参考にして設定してください。

.. versionadded:: 1.6.4

    ネットワーク機器ノードとのリモート連携に対応しました。

************************************
対応機種一覧
************************************

Kompira v1.6.4 時点では以下のネットワーク機器（接続プロトコル）とのリモート連携に対応しています。

* Cisco IOS (SSH, TELNET)
* Cisco ASA (SSH)
* Yamaha (SSH, TELNET)
* Juniper ScreenOS (SSH)
* HP Procurve (SSH)

各機器ごとに指定できる接続種別と動作確認を行なった機種を以下に示します。

+------------------+--------------------------+------------+----------------------------+----------------+
| ネットワーク機器 | 接続種別                 | プロトコル | 動作確認機種               | 備考           |
+==================+==========================+============+============================+================+
| Cisco IOS        | ``cisco_ios/ssh``        | SSH        | Cisco 892J, Cisco CSR1000V | PUT/GET に対応 |
|                  +--------------------------+------------+----------------------------+----------------+
|                  | ``cisco_ios/telnet``     | TELNET     | Cisco 892J, Cisco CSR1000V | PUT/GET に対応 |
+------------------+--------------------------+------------+----------------------------+----------------+
| Cisco ASA        | ``cisco_asa/ssh``        | SSH        | Cisco ASA5505              | PUT/GET に対応 |
+------------------+--------------------------+------------+----------------------------+----------------+
| Yamaha           | ``yamaha/ssh``           | SSH        | Yamaha RTX1200             |                |
|                  +--------------------------+------------+----------------------------+----------------+
|                  | ``yamaha/telnet``        | TELNET     | Yamaha RTX1200             |                |
+------------------+--------------------------+------------+----------------------------+----------------+
| Juniper ScreenOS | ``juniper_screenos/ssh`` | SSH        | Juniper SSG5               |                |
+------------------+--------------------------+------------+----------------------------+----------------+
| HP ProCurve      | ``hp_procurve/ssh``      | SSH        | ProCurve 2510G             |                |
+------------------+--------------------------+------------+----------------------------+----------------+

.. note::

    ノード種別として上記以外の機種も選択できるようになっていますが、弊社では動作確認はできていません。

************************************
ネットワーク機器連携での制限事項
************************************

ネットワーク機器との連携においては、リモートジョブの全ての機能に対応しているわけではありません。以下のような制限事項がありますのでご注意ください。

* コマンドジョブではコマンドの成否は判別できません。ログイン成功した場合は、実際のコマンド成否にかかわらず $STATUS は常に 0 になります。エラー判定が必要な場合は、標準出力にエラーメッセージが含まれていないか、などをジョブフローで判定する必要があります。
* 標準エラー出力には対応していません。内部的には PTY モード (``__use_pty__=true``) と同様になっており、出力はすべて標準出力として取得されます。
* 制御変数によるシェルの指定や実行ディレクトリの指定には対応していません。
* スクリプトジョブ、再起動ジョブには対応していません。
* 一部の機種では PUT/GET によるファイル転送に対応していますが、単一ファイルの転送のみが可能です。ワイルドカードの指定や再帰的なファイル転送には対応していません。


************************************
動作確認を行なった機種情報
************************************

弊社で動作確認を行なった各機器のバージョン情報を以下に示します。

Cisco 892J::

    Cisco IOS Software, C890 Software (C890-UNIVERSALK9-M), Version 15.0(1)M3, RELEASE SOFTWARE (fc2)
    Technical Support: http://www.cisco.com/techsupport
    Copyright (c) 1986-2010 by Cisco Systems, Inc.
    Compiled Sun 18-Jul-10 08:34 by prod_rel_team
    ROM: System Bootstrap, Version 12.4(22r)YB3, RELEASE SOFTWARE (fc1)

Cisco CSR1000V::

    Cisco IOS XE Software, Version 03.11.00.S - Standard Support Release
    Cisco IOS Software, CSR1000V Software (X86_64_LINUX_IOSD-UNIVERSALK9-M), Version 15.4(1)S, RELEASE SOFTWARE (fc2)
    Technical Support: http://www.cisco.com/techsupport
    Copyright (c) 1986-2013 by Cisco Systems, Inc.
    Compiled Tue 19-Nov-13 21:00 by mcpre

Cisco ASA5505::

    Cisco Adaptive Security Appliance Software Version 8.4(4)3 
    Device Manager Version 6.4(9)
    Compiled on Wed 11-Jul-12 10:25 by builders
    System image file is "disk0:/asa844-3-k8.bin"
    Config file at boot was "startup-config"

Yamaha RTX1200::

    RTX1200 BootROM Ver.1.01
    RTX1200 Rev.10.01.78 (Wed Nov 13 16:29:42 2019)

Juniper SSG5::

    Product Name: SSG5-Serial
    Serial Number: XXXXXXXXXXXXXXXX, Control Number: 00000000
    Hardware Version: 0710(0)-(00), FPGA checksum: 00000000, VLAN1 IP (0.0.0.0)
    Flash Type: Samsung
    Software Version: 6.2.0r8-cu1.0, Type: Firewall+VPN
    Feature: AV-K
    Compiled by build_master at: Thu Nov 18 01:29:55 PST 2010

ProCurve 2510G::

    Image stamp:    /sw/code/build/cod(cod11)
                    Nov 17 2009 16:55:04
                    Y.11.16
                    43
    Boot Image:     Primary


.. _file:

------------------------------
Kompiraの設定とログファイル
------------------------------

Kompiraが標準で使用するサーバ上のディレクトリおよび設定ファイルについて記述します。

.. _file_hierarchy:

^^^^^^^^^^^^^^^^^^^^^^^^
Kompira標準ディレクトリ
^^^^^^^^^^^^^^^^^^^^^^^^

Kompiraが標準で使用するサーバ上のディレクトリおよび設定ファイルの一覧を以下に示します。


+-------------------------------------------+-----------------------------------+
| パス                                      | 説明                              |
+--------------------+----------------------+-----------------------------------+
| /opt/kompira/      | bin/                 | Kompiraコマンド実行ファイル用     |
|                    |                      | ディレクトリ                      |
|                    +----------------------+-----------------------------------+
|                    | kompira.conf         | Kompira設定ファイル               |
+--------------------+----------------------+-----------------------------------+
| /var/log/kompira/  |                      | エンジンやジョブマネージャの      |
|                    |                      | ログファイル用ディレクトリ        |
+--------------------+----------------------+-----------------------------------+
| /var/opt/kompira/  |                      | Kompiraの各種可変ファイル用       |
|                    |                      | ディレクトリ                      |
|                    +----------------------+-----------------------------------+
|                    | kompira.lic          | Kompiraのライセンスファイル       |
|                    +----------------------+-----------------------------------+
|                    | html/                | オンラインヘルプのHTMLファイル群  |
|                    +----------------------+-----------------------------------+
|                    | repository/          | リポジトリ連携のための            |
|                    |                      | 作業用ディレクトリ                |
+--------------------+----------------------+-----------------------------------+
| /etc/httpd/conf.d/ | kompira.conf         | Apache設定ファイル                |
+--------------------+----------------------+-----------------------------------+

.. deprecated:: 1.6.4

    添付ファイルはデータベース上に保存されるように変更されたため、/var/opt/kompira/upload ディレクトリは廃止されました。

.. _file_log:

^^^^^^^^^^^^^^^^^^^^^^^
Kompiraログ
^^^^^^^^^^^^^^^^^^^^^^^

Kompira 自体のログファイルは、標準で以下のディレクトリ下に作成されます。

* /var/log/kompira/

.. note::

    Windows 環境ではログファイルは標準でディレクトリ ``C:\Kompira\Log`` の下に作成されます。

作成されるログファイルごとに、標準のログローテート設定と記録される内容は以下のようになっています。

+----------------------+-------------------------------+--------------------------------------------+
| ログファイル         | ログローテート設定            | 内容                                       |
+======================+===============================+============================================+
| kompira.log          | 固定 (daily rotate 7)         | リクエスト関連のログ出力 (httpdによる出力) |
+----------------------+-------------------------------+--------------------------------------------+
| kompirad.log         | 固定 (daily rotate 7)         | Kompiraデーモンのログ出力                  |
+----------------------+-------------------------------+--------------------------------------------+
| process.log          | 固定 (daily rotate 無制限)    | Kompiraジョブフロープロセスのログ出力      |
+----------------------+-------------------------------+--------------------------------------------+
| kompira_jobmngrd.log | kompira.conf (daily rotate 7) | Kompiraジョブマネージャのログ出力          |
+----------------------+-------------------------------+--------------------------------------------+
| kompira_sendevt.log  | kompira.conf (1GB rotate 10)  | イベント送信コマンドのログ出力             |
+----------------------+-------------------------------+--------------------------------------------+
| audit-\*.log         | logrotate (daily rotate 365)  | 各種操作による監査ログ出力                 |
+----------------------+-------------------------------+--------------------------------------------+

* ログファイルは自動的にローテートされ、古いログファイルは日付がファイル名に追加された上で保存されます。
* 上記ログファイルのうち、kompira_jobmngrd.log, kompira_sendevt.log は /opt/kompira/kompira.conf によりローテートの間隔やバックアップする世代数の設定を変更することができます。
* audit-\*.log については logrotate サービスによりログのローテートを行なっており、/etc/logrotate.d/kompira_audit でその設定を変更することができます。

Kompira を構成する各種サービスは、以下のディレクトリにログを出力します。また、各サービスごとの標準のログローテートの設定も以下に示します。

+-------------------+------------------------+------------------------------+-----------------------------------+
| サービス          | ログ出力先             | ログローテート設定           | 備考                              |
+===================+========================+==============================+===================================+
| httpd             | /var/log/httpd/        | logrotate (daily rotate 30)  |                                   |
+-------------------+------------------------+------------------------------+-----------------------------------+
| postgresql        | /var/log/postgres/     | logrotate (daily rotate 30)  |                                   |
+-------------------+------------------------+------------------------------+-----------------------------------+
| rabbitmq-server   | /var/log/rabbitmq/     | logrotate (weekly rotate 20) |                                   |
+-------------------+------------------------+------------------------------+-----------------------------------+
| pacemaker (1.x)   | /var/log/              | logrotate (weekly rotate 99) | 冗長構成時のみ (RHEL7系)          |
+-------------------+------------------------+------------------------------+-----------------------------------+
| pacemaker (2.x)   | /var/log/pacemaker/    | logrotate (weekly rotate 99) | 冗長構成時のみ (RHEL8系)          |
+-------------------+------------------------+------------------------------+-----------------------------------+
| corosync          | /var/log/cluster/      | logrotate (daily rotate 31)  | 冗長構成時のみ                    |
+-------------------+------------------------+------------------------------+-----------------------------------+
| pcsd              | /var/log/pcsd/         | logrotate (weekly rotate 5)  | 冗長構成時のみ                    |
+-------------------+------------------------+------------------------------+-----------------------------------+


.. versionadded:: 1.6.3
    監査ログが追加されました。

.. versionchanged:: 1.6.8

    Windows 環境ではログファイルがデフォルトで ``C:\Kompira\Log`` に作成されるようになりました。

.. _file_settings:

^^^^^^^^^^^^^^^^^^^^^^^
Kompira設定ファイル
^^^^^^^^^^^^^^^^^^^^^^^

/opt/kompira/kompira.conf での設定項目は、次のとおりです。

.. tabularcolumns:: |\Y{0.20}|\Y{0.20}|\Y{0.30}|\Y{0.30}|
.. table::
    :class: longtable
    :widths: auto

    +-----------------+--------------------+-------------------------------------------------+------------------------------------------------+
    | セクション名    | 項目名             | デフォルト値                                    | 内容                                           |
    +=================+====================+=================================================+================================================+
    | kompira         | site_id            | 1                                               | 本バージョンでは未使用                         |
    +-----------------+--------------------+-------------------------------------------------+------------------------------------------------+
    | logging         | ログ出力関連の設定                                                                                                    |
    +-----------------+--------------------+-------------------------------------------------+------------------------------------------------+
    |                 | loglevel           | INFO                                            | ログ出力レベルの設定                           |
    |                 |                    |                                                 | (DEBUG, INFO, WARNING, ERROR, CRITICAL)        |
    +-----------------+--------------------+-------------------------------------------------+------------------------------------------------+
    |                 | logdir             | /var/log/kompira                                | ログファイルのディレクトリ                     |
    +-----------------+--------------------+-------------------------------------------------+------------------------------------------------+
    |                 | logbackup          | | kompirad: 7                                   | ログバックアップの世代数                       |
    |                 |                    | | kompira_jobmngrd: 7                           |                                                |
    |                 |                    | | kompira_sendevt: 10                           |                                                |
    +-----------------+--------------------+-------------------------------------------------+------------------------------------------------+
    |                 | logmaxsz           | | kompirad: 0                                   | | ログファイルの最大サイズ(単位はbyte)         |
    |                 |                    | | kompira_jobmngrd: 0                           | | 0に設定すると日次ローテートとなる            |
    |                 |                    | | kompira_sendevt: 1024*1024*1024               |                                                |
    +-----------------+--------------------+-------------------------------------------------+------------------------------------------------+
    | amqp-connection | RabbitMQの接続情報関連の設定                                                                                          |
    +-----------------+--------------------+-------------------------------------------------+------------------------------------------------+
    |                 | server             | localhost                                       | 接続ホスト名                                   |
    +-----------------+--------------------+-------------------------------------------------+------------------------------------------------+
    |                 | port               | (5671 or 5672)                                  | 接続ポート番号                                 |
    +-----------------+--------------------+-------------------------------------------------+------------------------------------------------+
    |                 | user               | (guest or kompira)                              | 接続ユーザー名                                 |
    +-----------------+--------------------+-------------------------------------------------+------------------------------------------------+
    |                 | password           | (guest or kompira)                              | 接続パスワード                                 |
    +-----------------+--------------------+-------------------------------------------------+------------------------------------------------+
    |                 | ssl                | (true or false)                                 | SSLで接続するかどうか                          |
    +-----------------+--------------------+-------------------------------------------------+------------------------------------------------+
    |                 | ssl_verify         | false                                           | SSLでサーバ証明書を検証するかどうか            |
    +-----------------+--------------------+-------------------------------------------------+------------------------------------------------+
    |                 | ssl_cacertfile     |                                                 | SSLでサーバ証明書を検証するCA証明書ファイル    |
    +-----------------+--------------------+-------------------------------------------------+------------------------------------------------+
    |                 | ssl_certfile       |                                                 | SSL接続するときの証明書ファイル                |
    +-----------------+--------------------+-------------------------------------------------+------------------------------------------------+
    |                 | ssl_keyfile        |                                                 | SSL接続するときの秘密鍵ファイル                |
    +-----------------+--------------------+-------------------------------------------------+------------------------------------------------+
    |                 | heartbeat_interval | 10                                              | ハートビートの送信間隔 (単位は秒)              |
    +-----------------+--------------------+-------------------------------------------------+------------------------------------------------+
    |                 | max_retry          | 3                                               | 接続断時に再接続する最大試行回数               |
    +-----------------+--------------------+-------------------------------------------------+------------------------------------------------+
    |                 | retry_interval     | 30                                              | 接続断時に再接続する間隔 (単位は秒)            |
    +-----------------+--------------------+-------------------------------------------------+------------------------------------------------+
    | agent           | ジョブマネージャの動作に関する設定                                                                                    |
    +-----------------+--------------------+-------------------------------------------------+------------------------------------------------+
    |                 | name               | default                                         | ジョブマネージャの名称                         |
    +-----------------+--------------------+-------------------------------------------------+------------------------------------------------+
    |                 | pool_size          | 8                                               | 同時プロセスワーカー数 (1～80)                 |
    +-----------------+--------------------+-------------------------------------------------+------------------------------------------------+
    |                 | disable_cache      | false                                           | リモート接続キャッシュの無効化                 |
    +-----------------+--------------------+-------------------------------------------------+------------------------------------------------+
    |                 | cache_duration     | 300                                             | リモート接続キャッシュの有効期限 (秒)          |
    +-----------------+--------------------+-------------------------------------------------+------------------------------------------------+
    | event           | イベント送信の設定                                                                                                    |
    +-----------------+--------------------+-------------------------------------------------+------------------------------------------------+
    |                 | channel            | /system/channels/Alert                          | イベント送信先チャネルのKompira上のパス        |
    +-----------------+--------------------+-------------------------------------------------+------------------------------------------------+

なお、Windows 環境では以下のようにデフォルト値が変化します。

- logdir: ``C:\Kompira\Log``

.. note::

   リモート接続キャッシュは、リモートコマンド実行時のリモート接続を再
   利用することで、同一ノード、同一アカウントでの連続するリモートコマ
   ンド実行の処理を高速化する機能です。

   ただし、WinRS 接続では高速化の効果が得られないため、disable_cache
   の設定にかかわらずリモート接続キャッシュは使用しません。


.. versionchanged:: 1.6.8

    logdir のデフォルト値が Windows 環境では ``C:\Kompira\Log`` に変更になりました。

.. versionchanged:: 1.6.8

    user のデフォルト値が guest or kompira になりました。
    接続先ホスト名に localhost または 127.0.0.1 を指定している場合は guest に、それ以外の場合は kompira になります。

.. versionchanged:: 1.6.8

    password が指定されていないとき、デフォルト値として user と同じ文字列になるように変更されました。

.. versionchanged:: 1.6.8

    ssl のデフォルト値が true or false に変更になりました。
    ssl が指定されていないとき、server が localhost の場合は false に、それ以外の場合は true になります。

.. versionchanged:: 1.6.8

    port のデフォルト値が 5671 or 5672 に変更になりました。
    port が指定されていないとき、ssl が true の場合は 5671 に false の場合は 5672 になります。

.. versionadded:: 1.6.8

    新しい設定項目 ssl_verify, ssl_cacertfile, ssl_certfile, ssl_keyfile が追加されました。

.. versionadded:: 1.6.9.post4

    pool_size に指定できる値が 1 から 80 までという制限が加わりました。


^^^^^^^^^^^^^^^^^^^^^^^
Kompira画像ファイル
^^^^^^^^^^^^^^^^^^^^^^^

ブラウザ画面で表示される画像は Kompira サーバ上の以下に配置されています。

* /var/opt/kompira/html/kompira/img/

ここに配置されている画像ファイルは以下の通りです。画像ファイルを直接置き換えることで、画面の見た目を変更することができます。

.. tabularcolumns:: |\Y{0.20}|\Y{0.30}|\Y{0.10}|\Y{0.40}|
.. table::
    :class: longtable

    +---------------------+----------------------------+---------+--------------------------------------------------------------------+
    | ファイル名          | 用途                       | サイズ  | 説明                                                               |
    +=====================+============================+=========+====================================================================+
    | favicon.svg         | ファビコン (SVG形式)       | 16x16   | ブラウザタブやお気に入り登録したときのアイコンに利用されます       |
    +---------------------+----------------------------+---------+--------------------------------------------------------------------+
    | favicon.ico         | ファビコン (ICO形式)       | 16x16   | 同上（SVG 形式に対応していないブラウザに利用されます）             |
    +---------------------+----------------------------+---------+--------------------------------------------------------------------+
    | brand-logo.svg      | ブランドロゴ画像           | 40x40   | メニューバー左上に表示されます                                     |
    +---------------------+----------------------------+---------+--------------------------------------------------------------------+
    | login-logo.svg      | ログインロゴ画像           | 128x128 | ログイン画面およびログアウト画面の中央に表示されます               |
    +---------------------+----------------------------+---------+--------------------------------------------------------------------+
    | console-loading.gif | コンソールローディング画像 | 20x20   | プロセス詳細画面でプロセスがアクティブな間コンソールに表示されます |
    +---------------------+----------------------------+---------+--------------------------------------------------------------------+

.. note::

    サイズは一般的な解像度のディスプレイで表示される時のピクセル数を参考値として示しています。

.. _data:

-----------------------------
Kompiraのデータバックアップ
-----------------------------

Kompira上に保存したデータのバックアップとリストアを行う方法について記述します。

Kompira上で作成したジョブフローや機器情報の定義は、データベースに格納されます。
これらのデータをjson形式でファイルにエクスポートしたり、インポートしたりすることが可能です。

.. _data_export:

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Kompiraオブジェクトのエクスポート
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

以下の形式のexport_dataコマンドを実行することで、
標準出力に引数で指定したKompiraファイルシステムのパス以下のデータがjson形式でダンプされます。

.. code::

    /opt/kompira/bin/manage.py export_data [options] <path>...

たとえば、Kompiraで作成した/home/guest以下の全てのデータをファイルに
エクスポートするには、以下のコマンドを実行します。

.. code::

    $ /opt/kompira/bin/manage.py export_data /home/guest > guest.json


または、export_dir コマンドを実行することで、引数で指定した Kompira ファイルシステムのパス以下のデータを、
オブジェクト毎に YAML ファイルとしてダンプします。

.. code::

    /opt/kompira/bin/manage.py export_dir [options] <path>...

なお、以下の型を持つオブジェクトの場合は、代表するフィールドのデータのみがファイルとして出力され、
残りのフィールドは、.<オブジェクト名> という名前の YAML ファイルとして、プロパティ情報とともに出力されます。

.. tabularcolumns:: |\Y{0.4}|\Y{0.4}|\Y{0.2}|
.. table::
    :class: longtable

    +-----------------------------+----------------------------+--------------+
    | 型名                        | 代表フィールド             | ファイル形式 |
    +=============================+============================+==============+
    | Jobflow(ジョブフロー)       | source(ソース)             | テキスト     |
    +-----------------------------+----------------------------+--------------+
    | ScriptJob(スクリプトジョブ) | source(ソース)             | テキスト     |
    +-----------------------------+----------------------------+--------------+
    | Library(ライブラリ)         | sourceText(ソーステキスト) | テキスト     |
    +-----------------------------+----------------------------+--------------+
    | Template(テンプレート)      | template(テンプレート)     | テキスト     |
    +-----------------------------+----------------------------+--------------+
    | Text(テキスト)              | text(テキスト)             | テキスト     |
    +-----------------------------+----------------------------+--------------+
    | Wiki(Wikiページ)            | wikitext(Wikiテキスト)     | テキスト     |
    +-----------------------------+----------------------------+--------------+
    | Environment(環境変数)       | environment(環境変数)      | YAML         |
    +-----------------------------+----------------------------+--------------+

.. versionadded:: 1.6.7
    export_dir で、添付ファイルフィールドのデータを別ファイルとして出力するように変更しました。

.. _data_import:

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Kompiraオブジェクトのインポート
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

import_dataコマンドを用いて、エクスポートしたファイルからデータを
取り込むことができます。import_dataコマンドの形式は以下のとおりです。

.. code::

    /opt/kompira/bin/manage.py import_data [options] <filename>...


たとえば、/home/guestディレクトリをエクスポートしたファイルguest.jsonを取り込むには、
以下のコマンドを実行します。

.. code::

    $ /opt/kompira/bin/manage.py import_data guest.json
    [2014-07-25 12:34:49,576] INFO: import data: start...
    [2014-07-25 12:34:49,676] INFO: home/guest: import is skipped: "/home/guest" already exists.
    [2014-07-25 12:34:49,710] INFO: home/guest/a: import is skipped: "/home/guest/a" already exists.
    [2014-07-25 12:34:49,743] INFO: home/guest/b: import is skipped: "/home/guest/b" already exists.
    [2014-07-25 12:34:49,743] INFO: import data: finished (created=0, updated=0, skipped=3, error=0)

インポートするjsonファイル中に既に存在するパスのオブジェクトが含まれていた場合、
そのオブジェクトのインポートはスキップされます。
上記例の場合は、インポートしようとしたファイル3つが全てスキップされた状態です。

overwrite-modeオプションを指定すれば、上書きインポートをすることが可能です。

.. code::

    $ /opt/kompira/bin/manage.py import_data --overwrite-mode guest.json
    [2014-07-25 12:39:15,685] INFO: import data: start...
    [2014-07-25 12:39:15,821] INFO: import object: imported "home/guest" to "/home/guest" (updated)
    [2014-07-25 12:39:15,904] INFO: import object: imported "home/guest/a" to "/home/guest/a" (updated)
    [2014-07-25 12:39:15,971] INFO: import object: imported "home/guest/b" to "/home/guest/b" (updated)
    [2014-07-25 12:39:15,991] INFO: import fields: /home/guest: []
    [2014-07-25 12:39:16,015] INFO: import fields: /home/guest/a: ['wikitext']
    [2014-07-25 12:39:16,046] INFO: import fields: /home/guest/b: ['wikitext']
    [2014-07-25 12:39:16,046] INFO: import data: finished (created=0, updated=3, skipped=0, error=0)


export_dir コマンドでダンプしたファイルについては、import_dir コマンドを用いて取り込むことが出来ます。

.. code::

    /opt/kompira/bin/manage.py import_dir [options] <dirname>...


.. _data_backup:

^^^^^^^^^^^^^^^^^^^^^^^
バックアップ
^^^^^^^^^^^^^^^^^^^^^^^

Kompiraの全てのデータをバックアップするための手順について説明します。

Kompiraはデータベース上以外に、サーバ上の :ref:`file_hierarchy` に挙げられているパスのデータを使用します。
Kompiraのデータをバックアップする際は、export_dataコマンドによるKompiraオブジェクトのバックアップに
加えて、必要に応じてサーバ上のファイルバックアップも行う必要があります。

Kompiraオブジェクトとライセンスファイルのバックアップを行う場合の例を以下に示します。

.. code::

    $ mkdir -p /tmp/kompira_backup
    $ cd /tmp/kompira_backup
    $ /opt/kompira/bin/manage.py export_data / --virtual-mode > backup.json
    $ cp /var/opt/kompira/kompira.lic ./
    $ cd /tmp
    $ tar zcf kompira_backup.tar.gz ./kompira_backup


.. _data_export_data_option:

^^^^^^^^^^^^^^^^^^^^^^^^^^^
export_dataのオプション
^^^^^^^^^^^^^^^^^^^^^^^^^^^
export_dataコマンドには以下のオプションがあります。

.. tabularcolumns:: |\Y{0.3}|\Y{0.7}|
.. table::
    :class: longtable

    +----------------------------+--------------------------------------------+
    | オプション                 | 説明                                       |
    +============================+============================================+
    | ``--directory=DIRECTORY``  | エクスポートするパスの起点となる           |
    |                            | ディレクトリを指定します。                 |
    |                            | (デフォルトは'/')                          |
    +----------------------------+--------------------------------------------+
    | ``--virtual-mode``         | 仮想ファイルシステムに含まれるデータも     |
    |                            | 出力します。                               |
    +----------------------------+--------------------------------------------+
    | ``--owner-mode``           | エクスポート対象となったオブジェクトの     |
    |                            | 所有者のユーザオブジェクトおよびそのユーザ |
    |                            | の所属グループオブジェクトも出力します。   |
    +----------------------------+--------------------------------------------+
    | ``--zip-mode``             | ZIP 形式で出力します。                     |
    +----------------------------+--------------------------------------------+
    | ``--without-attachments``  | 添付ファイルデータを出力しません。         |
    +----------------------------+--------------------------------------------+
    | ``-h, --help``             | ヘルプメッセージを表示します。             |
    +----------------------------+--------------------------------------------+

.. versionadded:: 1.6.7

    --zip-mode, without-attachements オプションが追加されました。

.. _data_export_dir_option:

^^^^^^^^^^^^^^^^^^^^^^^^^^^
export_dirのオプション
^^^^^^^^^^^^^^^^^^^^^^^^^^^
export_dirコマンドには以下のオプションがあります。

.. tabularcolumns:: |\Y{0.3}|\Y{0.7}|
.. table::
    :class: longtable

    +----------------------------+------------------------------------------------------+
    | オプション                 | 説明                                                 |
    +============================+======================================================+
    | ``--directory=DIRECTORY``  | エクスポートするパスの起点となる                     |
    |                            | ディレクトリを指定します。                           |
    |                            | (デフォルトは'/')                                    |
    +----------------------------+------------------------------------------------------+
    | ``--property-mode``        | 表示名など属性も出力します。                         |
    +----------------------------+------------------------------------------------------+
    | ``--datetime-mode``        | 作成日時と更新日時も出力します。                     |
    +----------------------------+------------------------------------------------------+
    | ``--current=CURRENT_DIR``  | 出力先のディレクトリを指定します。                   |
    +----------------------------+------------------------------------------------------+
    | ``--without-attachments``  | 添付ファイルデータを出力しません。                   |
    +----------------------------+------------------------------------------------------+
    | ``--inline-attachments``   | 添付ファイルデータをYAMLファイルに含めて出力します。 |
    +----------------------------+------------------------------------------------------+
    | ``--linesep=LINESEP``      | 代表フィールドを出力するときの改行コードを指定       |
    |                            | します。 ``LINESEP`` には ``os_linesep``、 ``lf``、  |
    |                            | ``crlf``、 ``no_change`` のいずれかを指定できます。  |
    |                            | ``os_linesep`` では OS 標準の改行コードに、 ``lf``   | 
    |                            | では ``\n`` に、 ``crlf`` では ``\r\n`` に変換します |
    |                            | 。 ``no_change`` を指定したときは改行コードを変更し  |
    |                            | ません。デフォルトでは ``os_linesep`` です。         |
    +----------------------------+------------------------------------------------------+
    | ``-h, --help``             | ヘルプメッセージを表示します。                       |
    +----------------------------+------------------------------------------------------+

.. versionadded:: 1.6.7

    --without-attachements, --inline-attachments オプションが追加されました。

.. versionadded:: 1.6.9

    --linesep オプションが追加されました。

.. note::
    ``--linesep`` は :ref:`テキスト形式 <data_export>` のファイルにのみ影響します。

.. _data_import_data_option:

^^^^^^^^^^^^^^^^^^^^^^^^^^^
import_dataのオプション
^^^^^^^^^^^^^^^^^^^^^^^^^^^
import_dataコマンドには以下のオプションがあります。

.. tabularcolumns:: |\Y{0.3}|\Y{0.7}|
.. table::
    :class: longtable

    +----------------------------+-----------------------------------------------------------------------------+
    | オプション                 | 説明                                                                        |
    +============================+=============================================================================+
    | ``--user=USER``            | インポートするデータの所有者をUSER                                          |
    |                            | (ユーザーIDを指定)に設定します。                                            |
    +----------------------------+-----------------------------------------------------------------------------+
    | ``--directory=ORIGIN-DIR`` | インポート先の起点となるディレクトリを指定します。                          |
    |                            | (デフォルトは'/')                                                           |
    +----------------------------+-----------------------------------------------------------------------------+
    | ``--overwrite-mode``       | 既存のオブジェクトがある場合に上書きします。                                |
    +----------------------------+-----------------------------------------------------------------------------+
    | ``--owner-mode``           | インポートするデータの所有者を                                              |
    |                            | エクスポート時の所有者情報に設定します。                                    |
    +----------------------------+-----------------------------------------------------------------------------+
    | ``--update-config-mode``   | Config型オブジェクトの設定データも上書きします。                            |
    |                            | (--overwrite-mode オプションも同時に指定する必要があります)                 |
    +----------------------------+-----------------------------------------------------------------------------+
    | ``--now-updated-mode``     | 現在時刻をオブジェクトの更新日時に設定します。                              |
    +----------------------------+-----------------------------------------------------------------------------+
    | ``-h, --help``             | ヘルプメッセージを表示します。                                              |
    +----------------------------+-----------------------------------------------------------------------------+

.. versionadded:: 1.6.7

    --update-config-mode オプションが追加されました。

.. _data_import_dir_option:

^^^^^^^^^^^^^^^^^^^^^^^^^^^
import_dirのオプション
^^^^^^^^^^^^^^^^^^^^^^^^^^^
import_dirコマンドには以下のオプションがあります。

.. tabularcolumns:: |\Y{0.3}|\Y{0.7}|
.. table::
    :class: longtable

    +----------------------------+-----------------------------------------------------------------------------+
    | オプション                 | 説明                                                                        |
    +============================+=============================================================================+
    | ``--user=USER``            | インポートするデータの所有者をUSER                                          |
    |                            | (ユーザーIDを指定)に設定します。                                            |
    +----------------------------+-----------------------------------------------------------------------------+
    | ``--directory=ORIGIN-DIR`` | インポート先の起点となるディレクトリを指定します。                          |
    |                            | (デフォルトは'/')                                                           |
    +----------------------------+-----------------------------------------------------------------------------+
    | ``--overwrite-mode``       | 既存のオブジェクトがある場合に上書きします。                                |
    +----------------------------+-----------------------------------------------------------------------------+
    | ``--owner-mode``           | インポートするデータの所有者を                                              |
    |                            | エクスポート時の所有者情報に設定します。                                    |
    +----------------------------+-----------------------------------------------------------------------------+
    | ``--update-config-mode``   | Config型オブジェクトの設定データも上書きします。                            |
    |                            | (--overwrite-mode オプションも同時に指定する必要があります)                 |
    +----------------------------+-----------------------------------------------------------------------------+
    | ``--now-updated-mode``     | 現在時刻をオブジェクトの更新日時に設定します。                              |
    +----------------------------+-----------------------------------------------------------------------------+
    | ``--linesep=LINESEP``      | 代表フィールドを読み込むときの改行コードを指定します。                      |
    |                            | ``LINESEP`` には ``os_linesep``、 ``lf``、 ``crlf``、 ``no_change``         |
    |                            | のいずれかを指定できます。 ``os_linesep`` では OS 標準の改行コードに、      |
    |                            | ``lf`` では ``\n`` に、 ``crlf`` では ``\r\n`` に変換します。 ``no_change`` |
    |                            | を指定したときは改行コードを変更しません。デフォルトでは ``crlf`` です。    |
    +----------------------------+-----------------------------------------------------------------------------+
    | ``-h, --help``             | ヘルプメッセージを表示します。                                              |
    +----------------------------+-----------------------------------------------------------------------------+

.. versionadded:: 1.6.7

    --update-config-mode オプションが追加されました。

.. versionadded:: 1.6.9

    --linesep オプションが追加されました。

.. note::
    ``--linesep`` は :ref:`テキスト形式 <data_export>` のファイルにのみ影響します。

.. _license:

-----------------------
Kompiraライセンス
-----------------------
license_infoコマンドを用いて、Kompiraのライセンス状態を確認することができます。
license_infoコマンドの形式は以下のとおりです。

.. code::

    /opt/kompira/bin/manage.py license_info

以下はライセンスが登録されている場合の実行例です。

.. code::

    $ /opt/kompira/bin/manage.py license_info
    *** Kompira License Information ***
    License ID:     KP-REGLM0-0000000001
    Edition:        REGL
    Hardware ID:    NODE:000C29FB949E
    Expire date:    2015-12-31
    The number of registered nodes: 0 / 100
    The number of registered jobflows:      2 / 100
    The number of registered scripts:       0 / 100
    Licensee:       fixpoint,inc.
    Signature:      dwyWvG9eKbnGxcpWfVr1H0wSybLkGL7UqB2E6d5f0jYapfTx/AABJ66W3sRpK0byk+9Y724
                    NuEZ9Rh90ySU8f2GRsIyujuVrgPloajokbdZrPFIqOlyvLkak8MAWcGJxiioPHPNd2Tv2BN
                    Osq6bs5ZfJlCReEJhYyyngnXjeLBM=

ライセンスが登録されていない場合は、仮ライセンス情報が表示されます。

.. code::

    $ /opt/kompira/bin/manage.py license_info
    *** Kompira License Information ***
    License ID:     KP-TEMP-0000000000
    Edition:        temporary
    Hardware ID:    NODE:000C29FB949E
    Expire date:    2015-01-22
    The number of registered nodes: 0 / 100
    The number of registered jobflows:      2 / 100
    The number of registered scripts:       0 / 100
    Licensee:
    Signature:      None

    Kompira is running with temporary license.

ライセンスファイルパスは/var/opt/kompira/kompira.licです。

license_updateコマンドを用いて、上記のパスにライセンスファイルを配置したり更新したりすることができます。

license_updateコマンドの形式は以下のとおりです。

.. code::

    /opt/kompira/bin/manage.py license_update <LICENSE_FILE>

license_updateコマンドには以下のオプションがあります。

+--------------------+--------------------------------------------------------+
| オプション         | 説明                                                   |
+====================+========================================================+
| ``--no-backup``    | ライセンスファイルのバックアップを行いません           |
+--------------------+--------------------------------------------------------+
| ``--force``        | ライセンスファイルの検証に失敗しても強制的に更新します |
+--------------------+--------------------------------------------------------+

.. versionadded:: 1.6.2
    license_update コマンド

.. seealso::
    :ref:`settings_license`: ライセンスの確認と登録はブラウザ上からも行うことが可能です。

.. _Misc:

-----------------------
秘密鍵の管理
-----------------------

.. _Misc_keychange:

^^^^^^^^^^^^^^
秘密鍵の変更
^^^^^^^^^^^^^^

パスワードフィールドの暗号化に使用する秘密鍵を変更するには、change_secretkey コマンドをroot権限で実行します。
実行するとデータベースに暗号化されて保存されている全てのパスワードデータを新しい秘密鍵で再暗号化して保存し直します。

change_secretkeyは以下の形式です。

.. code::

    # /opt/kompira/bin/manage.py change_secretkey [options] <new_secretkey>

オプションは以下のとおりです。

+---------------------------+-----------------------------------------------------+
| オプション                | 説明                                                |
+===========================+=====================================================+
| ``--no-backup``           | 変更前の鍵をバックアップしません。                  |
+---------------------------+-----------------------------------------------------+
| ``--force``               | 途中で再暗号化に失敗したパスワードデータがあっても、|
|                           | 再暗号化を続行します。                              |
+---------------------------+-----------------------------------------------------+

.. note::

    秘密鍵の文字列は /var/opt/kompira/.secret_key に保存されています。

.. note::

    change_secretkey を実行後は、 httpd サービスと kompirad サービスをリスタートしてください。
    冗長構成の場合は、アクティブ側で change_secretkey を実行した後で、スタンバイ側への切り替えを行ってください。

.. _HA:

-----------------------
冗長構成管理
-----------------------
Kompira を2台のサーバで Pacemaker/corosync を用いた Active-Standby 型の冗長構成で動作させることができます。
ここでは、そのインストール方法や状態確認方法、フェイルオーバー等について記述します。

.. _HA_introduction:

^^^^^^^^^^^^^^
はじめに
^^^^^^^^^^^^^^
PacemakerはKompiraが動作する上で必要なリソース(アプリケーション)を監視し、エラーを検知した場合はフェイルオーバーを行なうことで冗長性を実現します。

Pacemakerで監視するリソースの一覧を以下に示します。

**httpd, kompirad, kompira_jobmngrd**
    Kompiraの動作に必要なプロセスです。
    アクティブ状態のサーバ上でのみ動作します。

**RabbitMQ**
    Kompiraの動作に必要なRabbitMQプロセスです。
    アクティブ状態のサーバのプロセスがMaster、スタンバイ状態のサーバのプロセスがSlaveとして動作します。

**IPaddr2**
    仮想IPアドレスを管理するためのリソースです。

**PostgreSQL**
    PostgreSQLデータベースプロセスです。
    アクティブ状態のサーバのプロセスがMaster、スタンバイ状態のサーバのプロセスがSlaveとして動作します。
    PostgreSQLはレプリケーションの設定がされており、プライマリ機とセカンダリ機のデータが同期されます。

.. _HA_install:

^^^^^^^^^^^^^^^^^^^
インストール
^^^^^^^^^^^^^^^^^^^

Kompiraの冗長構成を構築する場合、2台のサーバにそれぞれKompiraをインストールしてから、
プライマリ機、セカンダリ機の順に冗長構成のセットアップを実施する必要があります。

2台のサーバには2つのネットワークインタフェースが必要になります。
ネットワークインターフェース名は OS のバージョンや環境によって、eth0, eth1,... であったり、ens192, ens224,... であったりします。

以降の説明では、それぞれのサーバをプライマリ機(ha-kompira1)、セカンダリ機(ha-kompira2)と呼び、ネットワークインターフェースとしては eth0, eth1 を持っていることとします。
また、eth0 はサービス提供用のネットワークに接続され、eth1 はハートビート用インターフェースとして使用するため独立したネットワークで 2 台のサーバが接続されていることとします。

なお、冗長構成を構築した初期状態ではプライマリ機がアクティブ状態、セカンダリ機がスタンバイ状態となります。

Kompira の冗長構成を構築するにはパッケージに含まれる setup_cluster.sh を利用します。
以下ではOSインストール直後のサーバ2台に対して、冗長構成のKompiraをインストールする手順を記述します。

.. note::
    setup_cluster.sh は、install.sh と同様に外部から必要な各種ミドルウェアをダウンロードします。
    外部ネットワークに接続可能な環境で実行してください。

.. _HA_install_primary:

**********************
プライマリ機の設定
**********************

Kompiraパッケージを通常インストール後、--primary オプションを指定して setup_cluster.sh を実行することでプライマリ機のセットアップを行います。

また setup_cluster.sh を実行するときに、以下の情報を引数で指定します。

- ハートビートネットワークデバイス名
- クラスタに割り当てる仮想IPアドレス(VIP)とそのネットワークマスク長

例えば、ハートビートネットワークデバイスとして eth1 を、仮想IPアドレスとして 192.168.0.100 とネットワークマスク長に 24 を指定する場合、以下のようにコマンドを実行します。

.. code::

    $ tar zxf kompira-<version>-bin.tar.gz
    $ cd kompira-<version>-bin
    # ./install.sh
    # ./setup_cluster.sh --primary --heartbeat-device eth1 192.168.0.100/24

.. note::
    内部的には冗長構成の各ノードを名前解決できる必要があるため、``/etc/hosts`` に ha-kompira1 (プライマリ機)や ha-kompira2 (セカンダリ機)といった別名の登録を行なうようになっています。setup_cluster.sh ではサーバのホスト名は変更しません。

.. _HA_install_secondary:

**********************
セカンダリ機の設定
**********************

Kompiraパッケージを通常インストール後、--secondary オプションを指定して setup_cluster.sh を実行することでセカンダリ機のセットアップを行ないます。

また setup_cluster.sh を実行するときに、以下の情報を引数で指定します。仮想IPアドレスの指定は不要です。

- ハートビートネットワークデバイス名

例えば、ハートビートネットワークデバイスとして eth1 を指定する場合、以下のようにコマンドを実行します。

.. code::

    $ tar zxf kompira-<version>-bin.tar.gz
    $ cd kompira-<version>-bin
    # ./install.sh
    # ./setup_cluster.sh --secondary --heartbeat-device eth1

.. note::
    セカンダリ機でのsetup_cluster.shの実行時、プライマリ機からデータベースのスナップショットを取得します。
    セットアップ済みのプライマリ機を立ち上げ、接続している状態でsetup_cluster.shを実行してください。

.. _HA_install_check:

**********************
状態確認
**********************
プライマリ機、セカンダリ機でインストール処理が完了したら、以下のURLに対してWebブラウザからアクセスし、
ログイン画面が表示されることを確認してください。

.. code::

    http://192.168.0.100/

URLはプライマリ機インストール時に設定した仮想IPアドレスです。
このURLはプライマリ機に障害が発生し、フェイルオーバーが発生した場合でも維持されます。

また、冗長構成の各リソースの状態を確認するには、プライマリ機またはセカンダリ機でcrm_monコマンドを使用します。

.. code::

    # crm_mon -A1
    Cluster Summary:
      * Stack: corosync
      * Current DC: ha-kompira1 (version 2.1.0-8.el8-7c3f660707) - partition with quorum
      * Last updated: Wed Sep  8 22:21:02 2021
      * Last change:  Wed Sep  8 22:19:56 2021 by hacluster via crmd on ha-kompira1
      * 2 nodes configured
      * 9 resource instances configured

    Node List:
      * Online: [ ha-kompira1 ha-kompira2 ]

    Active Resources:
      * Resource Group: webserver:
        * res_memcached     (systemd:memcached):     Started ha-kompira1
        * res_kompirad      (systemd:kompirad):      Started ha-kompira1
        * res_kompira_jobmngrd      (systemd:kompira_jobmngrd):      Started ha-kompira1
        * res_httpd (ocf::heartbeat:apache):         Started ha-kompira1
        * res_vip   (ocf::heartbeat:IPaddr2):        Started ha-kompira1
      * Clone Set: res_pgsql-clone [res_pgsql] (promotable):
        * Masters: [ ha-kompira1 ]
        * Slaves: [ ha-kompira2 ]
      * Clone Set: res_rabbitmq-clone [res_rabbitmq]:
        * Started: [ ha-kompira1 ha-kompira2 ]

    Node Attributes:
      * Node: ha-kompira1:
        * master-res_pgsql                  : 1001
        * rmq-node-attr-last-known-res_rabbitmq     : rabbit@ha-kompira1
        * rmq-node-attr-res_rabbitmq        : rabbit@ha-kompira1
      * Node: ha-kompira2:
        * master-res_pgsql                  : 1000
        * rmq-node-attr-last-known-res_rabbitmq     : rabbit@ha-kompira2
        * rmq-node-attr-res_rabbitmq        : rabbit@ha-kompira2

crm_monコマンドの出力において確認するべき点を示します。

- **Resource Group**

    アクティブ機のみで動作するリソースが表示されます。
    「Started <アクティブ機のホスト名>」と表示されていれば正常です。

- **Clone Set**

    両方のサーバで動作するリソースが表示されます。
    promotable リソースの場合、Mastersにアクティブ機側のホスト名、Slavesにスタンバイ機側のホスト名が表示されていれば正常です。

- **Node Attributes**

    PostgreSQLプロセスの詳細な状態が表示されています。
    正しくレプリケーションが行われている場合、
    master-res_pgsqlの行にアクティブ機側には 1001、スタンバイ機側には 1000 と表示されます。

.. _HA_license:

*****************
ライセンス登録
*****************
冗長構成の場合、アクティブ機とスタンバイ機、両方のサーバに対してそれぞれライセンスファイルを登録する必要があります。

:ref:`license` に記載された手順を実行し、各サーバに対してライセンスファイルを登録してください。

.. _HA_update:

^^^^^^^^^^^^^^^^^^^
アップデート
^^^^^^^^^^^^^^^^^^^

まず、冗長構成のアップデートに際しての注意点を示します。

* アップデート作業前にアクティブ系・スタンバイ系ともに正常に動作していることをご確認ください。片系しか正常に動作していないような環境では、アップデートできない可能性もあります。
* 各ステップで異常が発生していないか、アップデートに失敗していないかなど確認しながら作業するようにしてください。
* いずれのアップデート手順でも、アクティブ系で実行中であったジョブは強制終了されます。アップデート後の起動および系切り替えで、強制終了されたジョブの動作が再開するわけではありませんのでご注意ください。
* アップデート手順について、バージョンに特有の注意事項がある場合があります。事前にリリースノート等をご確認ください。
* 古い erlang / rabbitmq-server を利用していた環境では、以下に示す片系停止アップデート手順が行なえない場合があります。
* rabbitmq-server は互換性のためマイナーバージョンを +1 づつしかアップデートしません。最新版まで更新するには複数回アップデートする必要がある場合があります。
* rabbitmq-server はマイナーバージョンが上がると機能が追加されている場合があります。有効でない機能があると次回アップデートできない場合がありますので、アップデート後は ``rabbitmqctl enable_feature_flag all`` コマンドで全ての機能を有効にするようにしてください。
* PostgreSQL のアップグレードを実施する場合は、両系停止アップデート手順を基本とした専用の手順になりますのでご注意ください。

冗長構成をアップデートする場合、大きく2通りのアップデート手順があります。その手順によって、Master/Slave の切り替えを伴う方式と、切り替えを伴わない方式を選ぶことができます。以下に、簡単な手順を示しますので参考にしてください。

**************************************************
両系停止アップデート手順（切り替えを伴わない）
**************************************************

1. スタンバイ系を停止 (pcs cluster stop)
2. アクティブ系を停止 (pcs cluster stop --force) ※ここで動作中のジョブが強制終了します
3. アクティブ系をアップデート (./install.sh) ※ここで自動起動ジョブが開始します
4. スタンバイ系をアップデート (./install.sh)
5. rabbitmq-server の機能有効化 (rabbitmqctl enable_feature_flag all) ※ rabbitmq-server がマイナーアップデートした場合

系切り替えが発生しない代わりに両系を停止するため、ジョブが停止する期間が長めになります。

.. warning::

    両系停止アップデートの手順3、および、片系停止アップデートの手順2で install.sh の --skip-cluster-start オプションを指定すると、冗長構成の設定が正しく更新されないことがあるのでご注意ください。

**************************************************
片系停止アップデート手順（切り替えを伴う）
**************************************************

1. スタンバイ系を停止 (pcs cluster stop)
2. スタンバイ系をアップデート (./install.sh)
3. アクティブ系を停止 (pcs cluster stop) ※ここで系切り替えが発生して、アップデート済みのスタンバイ系がアクティブになります。旧アクティブ系で動作中であったジョブは強制終了して、新アクティブ系で自動起動ジョブが開始します。
4. 旧アクティブ系をアップデート (./install.sh)
5. rabbitmq-server の機能有効化 (rabbitmqctl enable_feature_flag all) ※ rabbitmq-server がマイナーアップデートした場合

系切り替えを伴いますが、片系は動作しているため、ジョブが停止する期間が短めになります。

ただし、古い erlang / rabbitmq-server からアップデートする場合など互換性に問題がある場合は、片系停止アップデートは行なえません。
このとき、install.sh の最後に以下のような警告が表示され、クラスタの自動再開処理もスキップされます。

.. code::

    [2023-02-03 12:00:00] WARN: !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    [2023-02-03 12:00:00] WARN: 
    [2023-02-03 12:00:00] WARN: FULL STOP UPGRADES ARE REQUIRED! (For version compatibility)
    [2023-02-03 12:00:00] WARN: 
    [2023-02-03 12:00:00] WARN:   erlang: R16B -> 23.3.4.11
    [2023-02-03 12:00:00] WARN:   rabbitmq-server: 3.3.5 -> 3.10.0
    [2023-02-03 12:00:00] WARN: 
    [2023-02-03 12:00:00] WARN:  - Automatic cluster start was skipped.
    [2023-02-03 12:00:00] WARN:  - Please stop both systems and upgrade each one.
    [2023-02-03 12:00:00] WARN:  - Then start the clusters in order with the following command.
    [2023-02-03 12:00:00] WARN: 
    [2023-02-03 12:00:00] WARN:      # pcs cluster start
    [2023-02-03 12:00:00] WARN: 
    [2023-02-03 12:00:00] WARN:  - At that time, start the cluster first on the node that was active before the upgrade.
    [2023-02-03 12:00:00] WARN: 
    [2023-02-03 12:00:00] WARN: !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

この場合は、両系停止アップデート手順に切り替えてください。
アップデート後は pcs cluster start コマンドで冗長構成をアクティブ系から順次再開してください。

.. _HA_update_with_pg_upgrade:

************************************************************
PostgreSQL アップグレードを伴う両系停止アップデート手順
************************************************************

冗長構成で PostgreSQL のアップグレードを実施する場合は、両系停止アップデートを基本とした専用の手順となります。
以下のように手順 3 および手順 4 で、アップグレードしたい PostgreSQL のバージョンを指定してください。

1. スタンバイ系を停止 (pcs cluster stop)
2. アクティブ系を停止 (pcs cluster stop --force) ※ここで動作中のジョブが強制終了します
3. アクティブ系をアップデート (./install.sh --postgresql-version=17)
4. スタンバイ系をアップデート (./install.sh --postgresql-version=17)
5. アクティブ系を再開 (pcs cluster start)
6. スタンバイ系を sync_master.sh で再開 (/opt/kompira/bin/sync_master.sh --force)

.. warning::

    手順 3 および手順 4 で、必ず同じメジャーバージョンを指定するようにしてください。

手順 3 および手順 4 における install.sh の最後に以下のような警告が表示され、クラスタの自動再開処理もスキップされます。

.. code::

    [2024-10-29 12:00:00] WARN: !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    [2024-10-29 12:00:00] WARN: 
    [2024-10-29 12:00:00] WARN: FULL STOP UPGRADES ARE REQUIRED! (For version compatibility)
    [2024-10-29 12:00:00] WARN: 
    [2024-10-29 12:00:00] WARN:   postgresql: 12.17 -> 17.0
    [2024-10-29 12:00:00] WARN: 
    [2024-10-29 12:00:00] WARN:  - Automatic cluster start was skipped.
    [2024-10-29 12:00:00] WARN:  - Please stop both systems and upgrade each one.
    [2024-10-29 12:00:00] WARN:  - First, start the cluster with the following command on the node that was active before the upgrade.
    [2024-10-29 12:00:00] WARN: 
    [2024-10-29 12:00:00] WARN:      # pcs cluster start
    [2024-10-29 12:00:00] WARN: 
    [2024-10-29 12:00:00] WARN:  - Next, start the cluster with the following command on the node that was standby before the upgrade.
    [2024-10-29 12:00:00] WARN: 
    [2024-10-29 12:00:00] WARN:      # /opt/kompira/bin/sync_master.sh --force
    [2024-10-29 12:00:00] WARN: 
    [2024-10-29 12:00:00] WARN: !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


このあと手順 5 として、アクティブ系を基本の手順同様に pcs cluster start でクラスタを再開させてください。このとき pcs status や crm_mon コマンドで、アクティブ系のすべてのリソースが正常に起動することを確認してください。

最後に手順 6 として、スタンバイ系を sync_master.sh で再開させてください。このとき ``--force`` オプションを付けて、強制的にアクティブ系のデータを同期するようにしてください。

.. versionchanged:: 1.6.6

    冗長構成時の install.sh 実行後に自動で pcs cluster start を実行するようになりました。
    これにともない冗長構成のアップデート手順が変更されました。

.. versionchanged:: 1.6.8

    片系停止アップデートが行なえない場合、警告を表示して pcs cluster start をスキップするようになりました。

.. versionchanged:: 1.6.8.post2

    冗長構成では rabbitmq-server はマイナーバージョンが +1 づつしか上がらないようになりました。

.. versionadded:: 1.6.8.post2

    rabbitmq-server の機能を有効化する手順が追加されました。

.. versionadded:: 1.6.10

    PostgreSQL アップグレードを伴う両系停止アップデート手順を追加しました。

.. _HA_stop_start:

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
冗長構成の停止・起動
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
冗長構成で動作しているKompiraの停止・起動方法について記述します。

はじめに、crm_monコマンドを使用して2台のサーバのどちらがアクティブ状態として動作しているかを確認します。
crm_monコマンド中のリソース部分の表示で、「Started」および「Masters」と表示されているのがアクティブ状態のサーバとなります。

以降の説明では、ha-kompira1がアクティブ状態であると仮定して手順を記述します。

原則として、停止する場合はスタンバイ機を停止してからアクティブ機を停止、
起動する場合はアクティブ機を起動してからスタンバイ機を起動という順序で行います。

これは、アクティブ機を先に停止するとスタンバイ機がアクティブ機に異常が起こったと判断してフェイルオーバー処理が行われてしまうためです。
誤ってフェイルオーバーがされてしまった場合は、:ref:`HA_recovery` の手順を参照してください。

********************
冗長構成の停止
********************
まず、セカンダリ(ha-kompira2)のPacemakerプロセスを停止します。

.. code::

    # pcs cluster stop
    Stopping Cluster (pacemaker)...
    Stopping Cluster (corosync)...

サービスが停止したのを確認してから、プライマリ(ha-kompira1)で同様の処理を行います。冗長構成の最後の一台を停止させるときは --force オプションが必要になります。

.. code::

    # pcs cluster stop --force
    Stopping Cluster (pacemaker)...
    Stopping Cluster (corosync)...

これでPacemaker/corosyncによるリソースの監視が停止します。
なお、pacemakerプロセスが停止している場合、crm_monコマンドは実行できないことに注意してください。

プロセスだけでなくサーバーOSのシャットダウンを行う場合、上記処理は必要ありません。
ただし、シャットダウンの場合もスタンバイ機のシャットダウンが完了してからアクティブ機のシャットダウンを行ってください。

********************
冗長構成の起動
********************
起動を行う場合は、停止とは反対の手順を実行します。
はじめに、プライマリ(ha-kompira1)のPacemakerプロセスを起動します。

.. code::

    # pcs cluster start
    Starting Cluster...

.. note::
    RHEL7 系など Pacemaker (1.x) 環境では、pcs cluster start 実行時には以下のように表示されます。

    .. code::

        # pcs cluster start
        Starting Cluster (corosync)...
        Starting Cluster (pacemaker)...

pacemakerプロセスが起動すると、pacemakerに登録されているリソースが順次起動します。
crm_monコマンドを実行し、全てのリソースが起動するまで待機してください。

リソースが起動したら、セカンダリ(ha-kompira2)のPacemakerプロセスを起動します。

.. code::

    # pcs cluster start
    Starting Cluster...

以上で冗長構成の起動が完了します。

プロセスだけでなくサーバーOSの起動から行う場合、上記処理は必要ありません。
Pacemakerサービスは自動起動されるように設定されています。

アクティブ機を起動し、起動が完了したことを確認してからスタンバイ機の起動を行ってください。

.. _HA_recovery:

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
フェイルオーバー時の動作とフェイルバック
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

アクティブ機で何らかの障害が発生すると、自動的にフェイルオーバーが実行されてスタンバイ機がアクティブ状態に昇格します。

以下はアクティブ状態であったha-kompira1がシャットダウンした後にha-kompira2でcrm_monコマンドを実行した場合の表示です。

.. code::

    # crm_mon -A1
    Cluster Summary:
      * Stack: corosync
      * Current DC: ha-kompira2 (version 2.1.0-8.el8-7c3f660707) - partition with quorum
      * Last updated: Wed Sep  8 22:27:37 2021
      * Last change:  Wed Sep  8 22:27:09 2021 by root via crm_attribute on ha-kompira2
      * 2 nodes configured
      * 9 resource instances configured

    Node List:
      * Online: [ ha-kompira2 ]
      * OFFLINE: [ ha-kompira1 ]

    Active Resources:
      * Resource Group: webserver:
        * res_memcached     (systemd:memcached):     Started ha-kompira2
        * res_kompirad      (systemd:kompirad):      Started ha-kompira2
        * res_kompira_jobmngrd      (systemd:kompira_jobmngrd):      Started ha-kompira2
        * res_httpd (ocf::heartbeat:apache):         Started ha-kompira2
        * res_vip   (ocf::heartbeat:IPaddr2):        Started ha-kompira2
      * Clone Set: res_pgsql-clone [res_pgsql] (promotable):
        * Masters: [ ha-kompira2 ]
      * Clone Set: res_rabbitmq-clone [res_rabbitmq]:
        * Started: [ ha-kompira2 ]

    Node Attributes:
      * Node: ha-kompira2:
        * master-res_pgsql                  : 1001
        * rmq-node-attr-last-known-res_rabbitmq     : rabbit@ha-kompira2
        * rmq-node-attr-res_rabbitmq        : rabbit@ha-kompira2

ha-kompira1がOFFLINEと表示されており、各リソースはha-kompira2上で動作していることが確認できます。

以降では、ha-kompira1が復旧可能だった場合、復旧不能だった場合に分けて手順を記述します。

*****************************
サーバーが復旧可能だった場合
*****************************
シャットダウンしたha-kompira1を正常に起動できた場合の手順です。

ha-kompira1を起動すると、状態は以下のようになります。

.. code::

    # crm_mon -A1
    Cluster Summary:
      * Stack: corosync
      * Current DC: ha-kompira2 (version 2.1.0-8.el8-7c3f660707) - partition with quorum
      * Last updated: Wed Sep  8 22:35:16 2021
      * Last change:  Wed Sep  8 22:34:57 2021 by root via crm_attribute on ha-kompira2
      * 2 nodes configured
      * 9 resource instances configured

    Node List:
      * Online: [ ha-kompira1 ha-kompira2 ]

    Active Resources:
      * Resource Group: webserver:
        * res_memcached     (systemd:memcached):     Started ha-kompira2
        * res_kompirad      (systemd:kompirad):      Started ha-kompira2
        * res_kompira_jobmngrd      (systemd:kompira_jobmngrd):      Started ha-kompira2
        * res_httpd (ocf::heartbeat:apache):         Started ha-kompira2
        * res_vip   (ocf::heartbeat:IPaddr2):        Started ha-kompira2
      * Clone Set: res_pgsql-clone [res_pgsql] (promotable):
        * Masters: [ ha-kompira2 ]
        * Slaves: [ ha-kompira1 ]
      * Clone Set: res_rabbitmq-clone [res_rabbitmq]:
        * Started: [ ha-kompira1 ha-kompira2 ]

    Node Attributes:
      * Node: ha-kompira1:
        * master-res_pgsql                  : -1
        * rmq-node-attr-last-known-res_rabbitmq     : rabbit@ha-kompira1
        * rmq-node-attr-res_rabbitmq        : rabbit@ha-kompira1
      * Node: ha-kompira2:
        * master-res_pgsql                  : 1001
        * rmq-node-attr-last-known-res_rabbitmq     : rabbit@ha-kompira2
        * rmq-node-attr-res_rabbitmq        : rabbit@ha-kompira2

ha-kompira1ではデータベースが正しく同期されておらず、スタンバイ機として正常な状態にはなっていません。

スタンバイ機としてのセットアップを完了するためには、スタンバイ機でkompiraパッケージに付属しているsync_master.shを使用します。
sync_master.shはアクティブ機のデータベースをスタンバイ機にコピーし、レプリケーションの設定を行った上でデータベースプロセスを起動します。

.. code::

    # /opt/kompira/bin/sync_master.sh
    [2023-08-03 18:19:46] ****: ****************************************************************
    [2023-08-03 18:19:46] ****: Kompira-1.6.8.post3:
    [2023-08-03 18:19:46] ****: Start: Sync with the Master
    ...
    [2023-08-03 18:19:49] INFO: Waiting for the resources to stabilize.
    [2023-08-03 18:19:49] INFO: nodes[2]: ha-kompira1 ha-kompira2 (local=ha-kompira1)
    [2023-08-03 18:19:49] INFO: webserver resources[5]: res_memcached res_kompirad res_kompira_jobmngrd res_httpd res_vip
    ---------------------------------+------------------------------------------------------------+------------------------------------------------------
        postgres[0],     postgres[1] |                  rabbitmq[0],                  rabbitmq[1] | memcached,  kompirad,  jobmngrd,     httpd,       vip
    ---------------------------------+------------------------------------------------------------+------------------------------------------------------
        Slave(1000),    Master(1001) |                           (),  Started(rabbit@ha-kompira2) |   Started,   Started,   Started,   Started,   Started
        Slave(1000),    Master(1001) |                   Starting(),  Started(rabbit@ha-kompira2) |   Started,   Started,   Started,   Started,   Started
        Slave(1000),    Master(1001) |                   Starting(),  Started(rabbit@ha-kompira2) |   Started,   Started,   Started,   Started,   Started
        Slave(1000),    Master(1001) |                   Starting(),  Started(rabbit@ha-kompira2) |   Started,   Started,   Started,   Started,   Started
        Slave(1000),    Master(1001) |                   Starting(),  Started(rabbit@ha-kompira2) |   Started,   Started,   Started,   Started,   Started
        Slave(1000),    Master(1001) |                   Starting(),  Started(rabbit@ha-kompira2) |   Started,   Started,   Started,   Started,   Started
        Slave(1000),    Master(1001) |                   Starting(),  Started(rabbit@ha-kompira2) |   Started,   Started,   Started,   Started,   Started
        Slave(1000),    Master(1001) |                   Starting(),  Started(rabbit@ha-kompira2) |   Started,   Started,   Started,   Started,   Started
        Slave(1000),    Master(1001) |                    Started(),  Started(rabbit@ha-kompira2) |   Started,   Started,   Started,   Started,   Started
        Slave(1000),    Master(1001) |  Started(rabbit@ha-kompira1),  Started(rabbit@ha-kompira2) |   Started,   Started,   Started,   Started,   Started
    ---------------------------------+------------------------------------------------------------+------------------------------------------------------
    ...
    [2023-08-03 18:19:51] INFO: Display state of resources.
      * Resource Group: webserver:
        * res_memcached     (systemd:memcached):     Started ha-kompira2
        * res_kompirad      (systemd:kompirad):      Started ha-kompira2
        * res_kompira_jobmngrd      (systemd:kompira_jobmngrd):      Started ha-kompira2
        * res_httpd (ocf::heartbeat:apache):         Started ha-kompira2
        * res_vip   (ocf::heartbeat:IPaddr2):        Started ha-kompira2
      * Clone Set: res_pgsql-clone [res_pgsql] (promotable):
        * Masters: [ ha-kompira2 ]
        * Slaves: [ ha-kompira1 ]
      * Clone Set: res_rabbitmq-clone [res_rabbitmq]:
        * Started: [ ha-kompira1 ha-kompira2 ]
    [2023-08-03 18:19:51] ****: 
    [2023-08-03 18:19:51] ****: Finish: Sync with the Master (status=0)
    [2023-08-03 18:19:51] ****: ****************************************************************


sync_master.shを実行後にcrm_monコマンドを呼び出すと、ha-kompira1 の master-res_pgsql が 1000 となったことが確認できます。

.. code::

    # crm_mon -A1
    Cluster Summary:
      * Stack: corosync
      * Current DC: ha-kompira2 (version 2.1.0-8.el8-7c3f660707) - partition with quorum
      * Last updated: Thu Sep  9 00:35:55 2021
      * Last change:  Thu Sep  9 00:30:55 2021 by root via crm_attribute on ha-kompira2
      * 2 nodes configured
      * 9 resource instances configured

    Node List:
      * Online: [ ha-kompira1 ha-kompira2 ]

    Active Resources:
      * Resource Group: webserver:
        * res_memcached     (systemd:memcached):     Started ha-kompira2
        * res_kompirad      (systemd:kompirad):      Started ha-kompira2
        * res_kompira_jobmngrd      (systemd:kompira_jobmngrd):      Started ha-kompira2
        * res_httpd (ocf::heartbeat:apache):         Started ha-kompira2
        * res_vip   (ocf::heartbeat:IPaddr2):        Started ha-kompira2
      * Clone Set: res_pgsql-clone [res_pgsql] (promotable):
        * Masters: [ ha-kompira2 ]
        * Slaves: [ ha-kompira1 ]
      * Clone Set: res_rabbitmq-clone [res_rabbitmq]:
        * Started: [ ha-kompira1 ha-kompira2 ]

    Node Attributes:
      * Node: ha-kompira1:
        * master-res_pgsql                  : 1000
        * rmq-node-attr-last-known-res_rabbitmq     : rabbit@ha-kompira1
        * rmq-node-attr-res_rabbitmq        : rabbit@ha-kompira1
      * Node: ha-kompira2:
        * master-res_pgsql                  : 1001
        * rmq-node-attr-last-known-res_rabbitmq     : rabbit@ha-kompira2
        * rmq-node-attr-res_rabbitmq        : rabbit@ha-kompira2

*****************************
サーバーが復旧不能だった場合
*****************************

ハードウェア障害などによって、シャットダウンした機器を交換する必要がある場合の手順です。
この場合、OSインストール直後のサーバを用意し、スタンバイ状態として導入します。

冗長構成環境ではアクティブ機とスタンバイ機それぞれにライセンスファイルを登録する必要があります。
install.sh を実行後、license_infoコマンドを使用してハードウェアIDの確認およびライセンスファイルの登録を行ってください。

.. code::

    $ tar zxf kompira-<version>-bin.tar.gz
    $ cd kompira-<version>-bin
    # ./install.sh

    $ cp kompira_KP-EVALM100-0000000001.lic /var/opt/kompira/kompira.lic
    $ cd /var/opt/kompira
    $ chown apache:apache kompira.lic
    $ /opt/kompira/bin/manage.py license_info

    # ./setup_cluster.sh --primary --slave-mode

上記コマンドは、ha-kompira1をスタンバイ状態としてセットアップする場合の例です。

冗長構成環境ではアクティブ機とスタンバイ機それぞれにライセンスファイルを登録する必要があるため、setup_cluster.shを実行する前にライセンスファイルの登録手順を行う必要があります。

setup_cluster.shの実行においてha-kompira1ではなくha-kompira2を追加する場合は、--primaryオプションの代わりに--secondaryオプションを使用します。

setup_cluster.shの処理が完了したら、:ref:`HA_install_check` を参考に動作確認を行ってください。

.. seealso:: :ref:`license`

.. _HA_setup_cluster_option:

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
setup_cluster.shのオプション
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

setup_cluster.shの動作オプションを以下に示します。


.. tabularcolumns:: |\Y{0.3}|\Y{0.2}|\Y{0.5}|
.. table::
    :class: longtable
    :widths: auto

    +------------------------------+-----------------+--------------------------------------------------+
    | オプション                   | デフォルト値    | 説明                                             |
    +==============================+=================+==================================================+
    | ``--primary``                | true(指定あり)  | プライマリとしてセットアップを開始します。       |
    +------------------------------+-----------------+--------------------------------------------------+
    | ``--secondary``              | false(指定なし) | セカンダリとしてセットアップを開始します。       |
    +------------------------------+-----------------+--------------------------------------------------+
    | | ``--heartbeat-device=``    |                 | ハートビート用ネットワークデバイスを指定します。 |
    | |      ``DEVICE``            |                 |                                                  |
    +------------------------------+-----------------+--------------------------------------------------+
    | ``--master-mode``            |                 | アクティブ状態としてセットアップします。         |
    +------------------------------+-----------------+--------------------------------------------------+
    | ``--slave-mode``             |                 | スタンバイ状態としてセットアップします。         |
    +------------------------------+-----------------+--------------------------------------------------+
    | ``--without-vip``            |                 | VIP無しの構成でセットアップします。              |
    |                              |                 | (別途ロードバランサ等による ACT/SBY 監視と       |
    |                              |                 | アクセス振り分けの設定が必要です)                |
    +------------------------------+-----------------+--------------------------------------------------+
    | ``--without-jobmanager``     |                 | ジョブマネージャ無しの構成でセットアップします。 |
    +------------------------------+-----------------+--------------------------------------------------+
    | | ``--hostname-prefix=``     | ha-kompira      | 設定するホスト名のプレフィックスを指定します。   |
    | |      ``PREFIX_NAME``       |                 |                                                  |
    +------------------------------+-----------------+--------------------------------------------------+
    | | ``--heartbeat-netaddr=``   | 192.168.99.0    | ハートビート用インタフェースに設定する           |
    | |     ``NETWORK_ADDRESS``    |                 | ネットワークアドレスを指定します。               |
    +------------------------------+-----------------+--------------------------------------------------+
    | ``--manual``                 |                 | パラメータの自動設定を行いません。               |
    +------------------------------+-----------------+--------------------------------------------------+
    | ``--manual-heartbeat``       |                 | ハートビート用ネットワークを手動設定します。     |
    |                              |                 | ``--heartbeat-primary`` および                   |
    |                              |                 | ``--heartbeat-secondary`` の指定が必要です。     |
    |                              |                 | ``--heartbeat-netaddr`` の指定は無視します。     |
    |                              |                 | ハートビートはユニキャストモードで動作します。   |
    +------------------------------+-----------------+--------------------------------------------------+
    | | ``--heartbeat-primary=``   |                 | プライマリのIPアドレスを指定します。             |
    | |       ``NETWORK_ADDRESS``  |                 |                                                  |
    +------------------------------+-----------------+--------------------------------------------------+
    | | ``--heartbeat-secondary=`` |                 | セカンダリのIPアドレスを指定します。             |
    | |       ``NETWORK_ADDRESS``  |                 |                                                  |
    +------------------------------+-----------------+--------------------------------------------------+
    | ``--cluster-name=NAME``      |                 | クラスタ名を指定します (15文字まで)。            |
    +------------------------------+-----------------+--------------------------------------------------+
    | | ``--cluster-device=``      |                 | VIP を割り当てるネットワークデバイスを           |
    | |      ``DEVICE``            |                 | 指定します。                                     |
    +------------------------------+-----------------+--------------------------------------------------+
    | ``--token=TOKEN``            | 30000           | トークンタイムアウト (ミリ秒) を指定します。     |
    +------------------------------+-----------------+--------------------------------------------------+
    | ``--consensus=CONSENSUS``    |                 | コンセンサスタイムアウト (ミリ秒) を指定します。 |
    +------------------------------+-----------------+--------------------------------------------------+
    | ``--proxy=PROXY``            |                 | プロキシサーバを以下の形式で指定します。         |
    |                              |                 | ``[user:passwd@]proxy.server:port``              |
    +------------------------------+-----------------+--------------------------------------------------+
    | ``--noproxy=HOSTS``          |                 | プロキシの対象外となるホストをコンマ区切りのリス |
    |                              |                 | トで指定します。                                 |
    +------------------------------+-----------------+--------------------------------------------------+
    | ``--offline``                |                 | オフラインモードでセットアップします。           |
    +------------------------------+-----------------+--------------------------------------------------+
    | ``--dry-run``                |                 | ドライランモードで実行します。パラメータチェック |
    |                              |                 | のみで、実際のセットアップは行いません。         |
    +------------------------------+-----------------+--------------------------------------------------+
    | ``--help``                   |                 | ヘルプメッセージを表示します。                   |
    +------------------------------+-----------------+--------------------------------------------------+

.. versionchanged:: 1.6.7

    --token オプションのデフォルト値を 30000 に変更しました。

.. _HA_sync_master_option:

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
sync_master.sh のオプション
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

sync_master.sh はアクティブ系とデータ同期を取りたいノードで実行してください。
sync_master.sh を実行するとアクティブ系のデータベースを自ノードにコピーして、スタンバイ系としてクラスタを再開させます。
sync_master.sh は何らかの理由でダウンしていたスタンバイ系の回復に用いるため、クラスタを再開できるように pacemaker が記録している失敗履歴をクリアします。

sync_master.sh は以下の形式です。

.. code::

    # /opt/kompira/bin/sync_master.sh [options]

オプションは以下のとおりです。

.. table::
    :class: longtable
    :widths: auto

    +---------------------------+-------------------------------------------------------------------------------------+
    | オプション                | 説明                                                                                |
    +===========================+=====================================================================================+
    | ``--force``               | データが残っていても強制的にアクティブ系のデータをコピーします。                    |
    +---------------------------+-------------------------------------------------------------------------------------+
    | ``--no-save-datadir``     | アクティブ系とのデータ同期する前のデータディレクトリの退避を行なわず削除します。    |
    +---------------------------+-------------------------------------------------------------------------------------+

sync_master.sh は実行したノードに適正なデータが残っていれば、それを用いてアクティブ系とのデータ同期を試みます。
アクティブ系とのデータ同期がとれれば、データをコピーする必要なくスタンバイ系としてクラスタを再開できることになります。
データ同期が確認できない場合は、自動的にアクティブ系からデータコピーを開始して、その後にスタンバイ系としてクラスタを再開することになります。

sync_master.sh に ``--force`` オプションを付けて実行すると、データが残っていても強制的にアクティブ系のデータをコピーをします。
データ同期の判定が正しく行なわれないような場合に、動作が改善する可能性があります。

sync_master.sh はアクティブ系からデータコピーを開始する前に既存のデータベースクラスタを退避します。
具体的にはデータディレクトリ、例えば ``/var/lib/pgsql/<pgver>/data`` を ``/var/lib/pgsql/<pgver>/data.old`` という名前に変更します。
データコピーに成功すると退避していた ``data.old`` は自動的に削除されます。
データコピーに失敗した場合は、退避した ``/var/lib/pgsql/<pgver>/data.old`` は元の名前 ``/var/lib/pgsql/<pgver>/data`` に戻されます。

このような処理のため、データコピー中は退避データと同期データを合わせた容量が必要になることに注意してください。
sync_master.sh を ``--no-save-datadir`` オプションを付けて実行すると、この退避を行なわずに削除してからデータ同期を開始するため、必要な空き容量を削減することができます。
ただし、同期失敗時に元に戻すことができなくなるので注意してください。

.. versionchanged:: 1.6.10

    --force および --no-save-datadir オプションが追加されました。

.. _audit:

----------------------
監査ログ管理
----------------------

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
はじめに
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

ユーザが Kompira に対して各種操作をしたときに、その操作の種類や、認可されたかどうか、また成功したかどうか、といった情報をログに記録します。

******************************
監査ログの対象となる操作
******************************

ブラウザでの操作や API を用いた連携操作、サーバ上の管理コマンドによる操作などが監査ログの記録対象となります。

一方で、以下については、監査ログの記録対象となりません。

- ジョブフロー動作によるデータ操作やプロセス操作
- Kompira システム外部での操作（DB管理コマンドを用いた直接的なデータ操作など）
- static コンテンツへのアクセス

******************************
操作レベルと記録レベル
******************************

ある記録対象の操作が監査ログに実際に記録されるかどうかは、その操作の種類や結果から算出される「操作レベル値」と、設定項目である「記録レベル値」によって決まります。算出された操作レベル値が設定項目の記録レベル値以上のとき、監査ログに当該エントリが出力されます。


.. ifconfig:: language == 'ja'

    .. code::

        監査ログの記録条件： 操作レベル値 ≧ 記録レベル値


.. ifconfig:: language != 'ja'

    .. code::

        Conditions for recording audit logs: Operation level value >= Logging level value


操作レベル値は操作における複数の項目から算出します。いくつかの項目ごとに設定された操作レベルの基準値が決まり、その最大値が最終的な操作レベル値となります。通常この値は 1 から 3 の間の数値となります。各項目の操作レベル基準値のデフォルトについては :ref:`audit_spec` を参照してください。

たとえば、「ブラウザ上で既存のジョブフローオブジェクトを編集した（許可され、成功した）」という場合、以下のような項目ごとの操作レベル基準値が適用されて、最終的な操作レベル値は 2 となります。

+---------------+-----------------+--------------------+
| 項目          | 値              | 操作レベル(基準値) |
+===============+=================+====================+
| ``interface`` | ``"web"``       | 1                  |
+---------------+-----------------+--------------------+
| ``class``     | ``"object"``    | 1                  |
+---------------+-----------------+--------------------+
| ``type``      | ``"update"``    | 2                  |
+---------------+-----------------+--------------------+
| ``permit``    | ``"allowed"``   | 1                  |
+---------------+-----------------+--------------------+
| ``result``    | ``"succeeded"`` | 1                  |
+---------------+-----------------+--------------------+

記録レベル値のデフォルトは 2 です。詳細については :ref:`audit_config` を参照してください。

.. _audit_logfile:

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
監査ログファイル
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

******************************
監査ログの記録先
******************************

監査ログファイルは以下のディレクトリに作成されます。

.. code::

    /var/log/kompira/

作成されるログファイル名は以下のようになります。

.. code::

    audit-${USERNAME}.log

ここで ``${USERNAME}`` の部分は、その操作を処理したプロセスを実行したOS上のユーザ名となります。たとえばブラウザで操作を行った場合、サーバ上の Apache サービスが実際の処理をしており、``{$USERNAME}`` 部分は ``apache`` となります。ブラウザ上で Kompira にログインしているユーザ名とは異なることに注意してください。

監査ログファイルは Kompira 自身によるローテートは行わず、OS 標準のサービスによりローテートされるようにインストール時に設定されます。

監査ログファイルは作成時に umask 値として ``027`` が適用されます。ログファイルの所有者は ``${USERNAME}`` と同じになり、グループには書き込み権限がマスクされ、他ユーザには全アクセス権限がマスクされます。

******************************
監査ログのファイル形式
******************************

監査ログは UTF-8 でエンコードされたテキストファイルで、1エントリを1行の JSON 形式で出力します。

******************************
監査ログの記録項目
******************************

監査ログの1エントリに記録される項目を以下に示します。

+--------------+-----------------+--------+--------------------------------------------------------+
| 項目         | 名称            | 形式   | 説明                                                   |
+==============+=================+========+========================================================+
| 操作レベル   | ``level``       | 整数   | 操作レベル値                                           |
+--------------+-----------------+--------+--------------------------------------------------------+
| 操作開始日時 | ``started``     | 日時   | 操作を開始した日時                                     |
+--------------+-----------------+--------+--------------------------------------------------------+
| 操作終了日時 | ``finished``    | 日時   | 操作が終了した日時                                     |
+--------------+-----------------+--------+--------------------------------------------------------+
| 操作元情報   | ``exec``        | 辞書   | 操作元 Linux プロセスの情報（辞書形式）                |
+--------------+-----------------+--------+--------------------------------------------------------+
| 操作ユーザ   | ``user``        | 文字列 | 操作した Kompira ユーザ名                              |
+--------------+-----------------+--------+--------------------------------------------------------+
| 操作方式     | ``interface``   | 文字列 | ブラウザによる操作か管理コマンドによる操作かなどの区別 |
+--------------+-----------------+--------+--------------------------------------------------------+
| 操作分類     | ``class``       | 文字列 | セッション操作やオブジェクト操作などの区分             |
+--------------+-----------------+--------+--------------------------------------------------------+
| 操作対象     | ``target_path`` | 文字列 | オブジェクトパス（セッション操作以外の時）             |
+--------------+-----------------+--------+--------------------------------------------------------+
|              | ``target_type`` | 文字列 | 型オブジェクト（オブジェクト操作時）                   |
+--------------+-----------------+--------+--------------------------------------------------------+
| 操作種別     | ``type``        | 文字列 | 「参照」や「削除」など操作の種類を示す区分             |
+--------------+-----------------+--------+--------------------------------------------------------+
| 操作認否     | ``permit``      | 文字列 | 操作が「許可」または「拒否」されたかを示す区分         |
+--------------+-----------------+--------+--------------------------------------------------------+
| 操作成否     | ``result``      | 文字列 | 操作が「成功」または「失敗」したかの記録               |
+--------------+-----------------+--------+--------------------------------------------------------+
| 結果理由     | ``reason``      | 文字列 | 失敗の場合の原因（原因が分かる場合）                   |
+--------------+-----------------+--------+--------------------------------------------------------+
| 詳細情報     | ``detail``      | 辞書   | 操作に関する詳細情報（操作ごとに異なる辞書形式）       |
+--------------+-----------------+--------+--------------------------------------------------------+

******************************
監査ログのサンプル
******************************

以下にブラウザで操作したときの監査ログファイル ``/var/log/kompira/audit-apache.log`` のサンプルを示します。ログは1エントリ1行で出力されていますが、ここでは分かりやすく整形して表示しています。

.. code::

    {
      "level": 3,
      "started": "2021-10-05T15:51:31.403016+09:00",
      "finished": "2021-10-05T15:51:31.452097+09:00",
      "exec": {
        "pid": 1286192,
        "name": "/usr/sbin/httpd",
        "user": "apache",
        "remote": "10.10.0.110"
      },
      "user": "root",
      "interface": "web",
      "class": "session",
      "target_path": null,
      "target_type": null,
      "type": "login",
      "permit": "allowed",
      "result": "succeeded",
      "reason": null,
      "detail": {
        "next_page": "/"
      }
    }
    {
      "level": 2,
      "started": "2021-10-05T15:51:43.447941+09:00",
      "finished": "2021-10-05T15:51:43.486984+09:00",
      "exec": {
        "pid": 1285426,
        "name": "/usr/sbin/httpd",
        "user": "apache",
        "remote": "10.10.0.110"
      },
      "user": "root",
      "interface": "web",
      "class": "object",
      "target_path": "/config/license",
      "target_type": "/system/types/License",
      "type": "read",
      "permit": "allowed",
      "result": "succeeded",
      "reason": null,
      "detail": {
        "http_method": "GET",
        "http_status": 200
      }
    }

.. _audit_spec:

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
監査ログの項目詳細
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

監査ログに記録される項目についての詳細を示します。
以下の節におけるテーブルで「操作レベル」は、操作レベル基準値のデフォルトを示しています。

******************************
操作レベル (level)
******************************

操作の内容や結果によって算出された操作レベルを数値で示します。この操作レベル値が設定項目の記録レベル値以上のとき、監査ログに当該エントリが出力されます。

******************************
操作日時 (started, finished)
******************************

項目 ``started`` は操作の開始日時を、項目 ``finished`` は操作の終了日時を示します。
これらは以下のように、ローカルタイムで ISO8601 形式で記録されます。

.. code::

    "2021-10-01T11:45:08.977356+09:00"


******************************
操作元情報 (exec)
******************************

操作元を示す辞書には以下のような情報が記録されます。

+------------------+--------------------+--------+---------------------------------------------+
| 項目             | 名称               | 形式   | 説明                                        |
+==================+====================+========+=============================================+
| 操作元プロセスID | ``exec["pid"]``    | 整数   | Kompiraサーバ上の処理プロセスID             |
+------------------+--------------------+--------+---------------------------------------------+
| 操作元プロセス名 | ``exec["name"]``   | 文字列 | Kompiraサーバ上の処理プロセス名             |
+------------------+--------------------+--------+---------------------------------------------+
| 操作元ユーザ名   | ``exec["user"]``   | 文字列 | Kompiraサーバ上の処理プロセスの実行ユーザ名 |
+------------------+--------------------+--------+---------------------------------------------+
| 操作元アドレス   | ``exec["remote"]`` | 文字列 | 操作元のIPアドレス（ブラウザ操作の場合）    |
+------------------+--------------------+--------+---------------------------------------------+

******************************
操作ユーザ (user)
******************************

操作を行った Kompira ユーザ名を記録します。ブラウザ上で Kompira にログインして操作をした場合は、そのログインユーザ名となります。サーバのコンソール上で管理コマンドによる操作を行なった場合などでは、Kompira の認証を伴っていないため空文字列になります。

******************************
操作方式 (interface)
******************************

どのような方式を用いて操作したのかの区分を記録します。

+-----------+------------+------------------------------------------+
| 値        | 操作レベル | 説明                                     |
+===========+============+==========================================+
| ``"web"`` | 1          | Webブラウザによる操作                    |
+-----------+------------+------------------------------------------+
| ``"api"`` | 1          | REST-API による操作                      |
+-----------+------------+------------------------------------------+
| ``"mng"`` | 2          | 管理コマンド（manage.py など）による操作 |
+-----------+------------+------------------------------------------+

******************************
操作分類 (class)
******************************

何を操作したのか、その分類を示します。

+----------------+------------+--------------------------------------------------------+
| 値             | 操作レベル | 説明                                                   |
+================+============+========================================================+
| ``"session"``  | 3          | セッション操作（ログイン・ログアウト）                 |
+----------------+------------+--------------------------------------------------------+
| ``"user"``     | 3          | ユーザ情報操作（ユーザ追加・削除、パスワード変更など） |
+----------------+------------+--------------------------------------------------------+
| ``"group"``    | 3          | グループ情報操作                                       |
+----------------+------------+--------------------------------------------------------+
| ``"object"``   | 1          | オブジェクト操作                                       |
+----------------+------------+--------------------------------------------------------+
| ``"task"``     | 1          | タスク操作                                             |
+----------------+------------+--------------------------------------------------------+
| ``"incident"`` | 1          | インシデント操作                                       |
+----------------+------------+--------------------------------------------------------+
| ``"process"``  | 1          | プロセス操作                                           |
+----------------+------------+--------------------------------------------------------+
| ``"schedule"`` | 1          | スケジュール操作                                       |
+----------------+------------+--------------------------------------------------------+
| ``"packages"`` | 1          | システムパッケージ情報操作                             |
+----------------+------------+--------------------------------------------------------+

****************************************
操作対象 (target_path, target_type)
****************************************

何を操作したのか、その具体的な対象を示します。

操作分類が ``session`` 以外のときは、操作対象をそのパスで識別することができます。以下のようにパスを項目 ``target_path`` として記録します。

.. code::

    "/system/user/id_1"


さらに、オブジェクト操作の場合では、その型オブジェクトのパスを項目 ``target_type`` に記録します。

.. code::

    "/system/types/Directory"


******************************
操作種別 (type)
******************************

どのような操作をしたのかという種類を記録します。

+-----------------+------------+----------------------------------------------+
| 値              | 操作レベル | 操作例                                       |
+=================+============+==============================================+
| ``"login"``     | 3          | ログイン                                     |
+-----------------+------------+----------------------------------------------+
| ``"logout"``    | 3          | ログアウト                                   |
+-----------------+------------+----------------------------------------------+
| ``"create"``    | 3          | オブジェクトの新規作成                       |
+-----------------+------------+----------------------------------------------+
| ``"rename"``    | 3          | オブジェクトの名称変更                       |
+-----------------+------------+----------------------------------------------+
| ``"copy"``      | 3          | オブジェクトのコピー                         |
+-----------------+------------+----------------------------------------------+
| ``"move"``      | 3          | オブジェクトの移動                           |
+-----------------+------------+----------------------------------------------+
| ``"export"``    | 3          | エクスポート                                 |
+-----------------+------------+----------------------------------------------+
| ``"import"``    | 3          | インポート                                   |
+-----------------+------------+----------------------------------------------+
| ``"execute"``   | 3          | ジョブフローやスクリプトジョブの実行         |
+-----------------+------------+----------------------------------------------+
| ``"suspend"``   | 3          | プロセスの停止                               |
+-----------------+------------+----------------------------------------------+
| ``"resume"``    | 3          | プロセスの続行                               |
+-----------------+------------+----------------------------------------------+
| ``"terminate"`` | 3          | プロセスの中止                               |
+-----------------+------------+----------------------------------------------+
| ``"read"``      | 1          | オブジェクトの参照                           |
+-----------------+------------+----------------------------------------------+
| ``"list"``      | 1          | オブジェクトの一覧                           |
+-----------------+------------+----------------------------------------------+
| ``"search"``    | 1          | オブジェクトの検索                           |
+-----------------+------------+----------------------------------------------+
| ``"new"``       | 1          | 新規オブジェクトの編集（作成前）             |
+-----------------+------------+----------------------------------------------+
| ``"edit"``      | 1          | 既存オブジェクトの編集（更新前）             |
+-----------------+------------+----------------------------------------------+
| ``"confirm"``   | 1          | オブジェクト操作の確認（削除前）             |
+-----------------+------------+----------------------------------------------+
| ``"update"``    | 2          | オブジェクトの更新                           |
+-----------------+------------+----------------------------------------------+
| ``"clear"``     | 2          | チャネルのメッセージクリアや管理領域のクリア |
+-----------------+------------+----------------------------------------------+
| ``"recv"``      | 2          | チャネルからのメッセージ受信                 |
+-----------------+------------+----------------------------------------------+
| ``"send"``      | 2          | チャネルへのメッセージ送信                   |
+-----------------+------------+----------------------------------------------+
| ``"delete"``    | 3          | オブジェクトの削除                           |
+-----------------+------------+----------------------------------------------+

いくつかの操作種別は特定の操作分類でのみ利用されます。たとえばログインやログアウトは操作分類が ``session`` のときだけです。

ある操作種別が複数の操作分類で利用される場合はありますが、操作分類ごとに異なる操作レベル基準値を設定することはできません。

******************************
操作の結果 (permit, result)
******************************

操作の結果としてその認否と成否が記録されます。

項目 ``permit`` は操作が許可されたかどうかを示します。例えばオブジェクト操作では設定されたパーミッションによって、操作が許可されたり拒否されたりします。

+---------------+------------+------------------+
| 値            | 操作レベル | 説明             |
+===============+============+==================+
| ``"allowed"`` | 1          | 操作が許可された |
+---------------+------------+------------------+
| ``"denied"``  | 3          | 操作が拒否された |
+---------------+------------+------------------+

項目 ``result`` は操作に成功したかどうかを示します。

+-----------------+------------+----------------+
| 値              | 操作レベル | 説明           |
+=================+============+================+
| ``"succeeded"`` | 1          | 操作に成功した |
+-----------------+------------+----------------+
| ``"failed"``    | 1          | 操作に失敗した |
+-----------------+------------+----------------+

******************************
詳細情報 (detail)
******************************

操作ごとに追加の詳細情報を辞書形式で記録します。

※ 詳細情報については、監査ログ機能がリリースされた後も仕様が調整される可能性がありますのでご注意ください。

**ログイン**

+----------------------+--------------------------------+
| 項目                 | 説明                           |
+======================+================================+
| ``next_page``        | ログイン後に遷移するページ     |
+----------------------+--------------------------------+
| ``invalid_password`` | 不正パスワード（認証エラー時） |
+----------------------+--------------------------------+

**REST-API**

+-------------------+---------------------------------+
| 項目              | 説明                            |
+===================+=================================+
| ``invalid_token`` | 不正APIトークン（認証エラー時） |
+-------------------+---------------------------------+

**エクスポート**

+---------------------+-------------------------------------+
| 項目                | 説明                                |
+=====================+=====================================+
| ``export_format``   | エクスポート形式（'json' or 'dir'） |
+---------------------+-------------------------------------+
| ``export_options``  | エクスポート時に指定したオプション  |
+---------------------+-------------------------------------+
| ``export_paths``    | エクスポート対象のパス              |
+---------------------+-------------------------------------+
| ``export_counters`` | エクスポート結果のカウンタ情報      |
+---------------------+-------------------------------------+

**インポート**

+---------------------+-----------------------------------+
| 項目                | 説明                              |
+=====================+===================================+
| ``import_format``   | インポート形式（'json' or 'dir'） |
+---------------------+-----------------------------------+
| ``import_options``  | インポート時に指定したオプション  |
+---------------------+-----------------------------------+
| ``import_sources``  | インポートしたファイル名          |
+---------------------+-----------------------------------+
| ``import_counters`` | インポート結果のカウンタ情報      |
+---------------------+-----------------------------------+

**オブジェクトの検索**

+-------------------+----------------+
| 項目              | 説明           |
+===================+================+
| ``search_params`` | 検索パラメータ |
+-------------------+----------------+

**オブジェクトの新規作成**

+-----------------+------------------------------------------------+
| 項目            | 説明                                           |
+=================+================================================+
| ``create_name`` | 新規作成するオブジェクトの名称                 |
+-----------------+------------------------------------------------+
| ``create_type`` | 新規作成するオブジェクトの型オブジェクトのパス |
+-----------------+------------------------------------------------+

**ジョブフローやスクリプトジョブの実行**

+--------------------+----------------------------------------------------------+
| 項目               | 説明                                                     |
+====================+==========================================================+
| ``execute_pid``    | 実行したプロセスID                                       |
+--------------------+----------------------------------------------------------+
| ``execute_params`` | 実行時に指定したパラメータ                               |
+--------------------+----------------------------------------------------------+
| ``execute_form``   | 実行に利用したフォームのパス（フォームから実行した場合） |
+--------------------+----------------------------------------------------------+
| ``execute_table``  | 実行に利用したテーブルのパス（テーブルから実行した場合） |
+--------------------+----------------------------------------------------------+

**オブジェクトの名称変更**

+---------------+--------------+
| 項目          | 説明         |
+===============+==============+
| ``rename_to`` | 変更する名前 |
+---------------+--------------+

**オブジェクトのコピー**

+------------------+--------------------------------------+
| 項目             | 説明                                 |
+==================+======================================+
| ``copy_objects`` | コピー元オブジェクトのリスト         |
+------------------+--------------------------------------+
| ``copy_rename``  | コピー時に指定したオブジェクトの名称 |
+------------------+--------------------------------------+

**オブジェクトの移動**

+------------------+------------------------------------+
| 項目             | 説明                               |
+==================+====================================+
| ``move_objects`` | 移動元オブジェクトのリスト         |
+------------------+------------------------------------+
| ``move_rename``  | 移動時に指定したオブジェクトの名称 |
+------------------+------------------------------------+

**オブジェクトの削除**

+--------------------+------------------------------------------+
| 項目               | 説明                                     |
+====================+==========================================+
| ``delete_objects`` | 削除したパスまたはオブジェクトIDのリスト |
+--------------------+------------------------------------------+
| ``delete_file``    | 削除した添付ファイルのファイル名         |
+--------------------+------------------------------------------+

**チャネルへのメッセージ送信**

+---------------+----------------------------------------------------------+
| 項目          | 説明                                                     |
+===============+==========================================================+
| ``send_form`` | 送信に利用したフォームのパス（フォームから送信した場合） |
+---------------+----------------------------------------------------------+

**管理コマンド: compile_jobflow / compile_library**

+--------------------+------------------------------------------+
| 項目               | 説明                                     |
+====================+==========================================+
| ``compile_paths``  | コンパイル対象として指定したパスのリスト |
+--------------------+------------------------------------------+
| ``compile_result`` | コンパイル結果（個数情報）               |
+--------------------+------------------------------------------+

**管理コマンド: license_info / license_update**

+------------------+---------------------------------------------------------+
| 項目             | 説明                                                    |
+==================+=========================================================+
| ``license_id``   | ライセンスID                                            |
+------------------+---------------------------------------------------------+
| ``license_path`` | 導入したライセンスファイル名（license_update した場合） |
+------------------+---------------------------------------------------------+

**管理コマンド: process**

+------------------------+----------------------------------+
| 項目                   | 説明                             |
+========================+==================================+
| ``process_query``      | プロセスオブジェクトの検索クエリ |
+------------------------+----------------------------------+
| ``process_count``      | 検索されたプロセスの個数         |
+------------------------+----------------------------------+
| ``process_listed``     | 表示したプロセスの個数           |
+------------------------+----------------------------------+
| ``process_deleted``    | 削除したプロセスの個数           |
+------------------------+----------------------------------+
| ``process_terminated`` | 終了させたプロセスの個数         |
+------------------------+----------------------------------+
| ``process_suspended``  | 停止させたプロセスの個数         |
+------------------------+----------------------------------+
| ``process_resumed``    | 続行させたプロセスの個数         |
+------------------------+----------------------------------+

**その他の詳細情報**

+------------------+-------------------------------+
| 項目             | 説明                          |
+==================+===============================+
| ``http_method``  | HTTP 操作時のメソッド名       |
+------------------+-------------------------------+
| ``http_status``  | HTTP 操作時のステータスコード |
+------------------+-------------------------------+
| ``target_attr``  | 操作対象の属性名              |
+------------------+-------------------------------+
| ``target_index`` | 操作対象のインデックス値      |
+------------------+-------------------------------+
| ``bulk_deleted`` | 一括削除時の詳細情報          |
+------------------+-------------------------------+

.. _audit_config:

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
設定ファイル
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

監査ログに関する設定を以下のファイルで行うことができます。

.. code::

    /opt/kompira/kompira_audit.yaml

******************************
設定ファイルの形式
******************************

設定ファイルは ``kompira_audit.yaml`` は YAML 形式で記述します。全体としては辞書構造で、以下の設定項目が必要になります。

+----------------------+------+------------------------------------------------------------------+
| 名称                 | 形式 | 説明                                                             |
+======================+======+==================================================================+
| ``logging_level``    | 整数 | 監査ログの記録レベル値                                           |
+----------------------+------+------------------------------------------------------------------+
| ``operation_levels`` | 辞書 | 操作ごとの操作レベル基準値テーブル                               |
+----------------------+------+------------------------------------------------------------------+
| ``target_levels``    | 配列 | オブジェクト操作等における操作対象ごとの操作レベル基準値テーブル |
+----------------------+------+------------------------------------------------------------------+

******************************
設定ファイルの自動再読み込み
******************************

監査ログの設定ファイルをサーバー上で更新すると、次の監査ログ記録のタイミングで自動的に再読み込みされます。サービスの再起動などは不要です。

******************************
デフォルトの設定ファイル
******************************

.. code::

    #--------------------------------------------------------------------
    # kompira_audit.yaml
    #
    # Configuration file to control audit log output.
    #--------------------------------------------------------------------
    #
    # logging_level: recording level value
    #
    # If the calculated operation level value is less than the recording
    # level value, no audit log will be recorded.
    #
    logging_level: 2

    #
    # operation_levels: basic operation level table
    #
    # Table of operation level reference values for each operation.
    # The operation level value for an operation is the maximum of
    # several operation level criteria values.
    #
    operation_levels:
    interface:
        web: 1
        api: 1
        mng: 2
    class:
        session: 3
        user: 3
        group: 3
        object: 1
        task: 1
        incident: 1
        process: 1
        schedule: 1
        packages: 1
    type:
        login: 3
        logout: 3
        create: 3
        rename: 3
        copy: 3
        move: 3
        export: 3
        import: 3
        execute: 3
        suspend: 3
        resume: 3
        terminate: 3
        read: 1
        list: 1
        search: 1
        edit: 1
        confirm: 1
        update: 2
        clear: 2
        recv: 2
        send: 2
        delete: 3
    permit:
        allowed: 1
        denied: 3
    result:
        succeeded: 1
        failed: 1

    #
    # target_levels: operation level table for object operation
    #
    # Operation level reference value to be applied to each target
    # during object manipulation.
    #
    target_levels:
      - {path: '/config/*', type: null, level: 2}
      - {path: '/system/*', type: '/system/types/Config', level: 2}


.. _system_packages:

----------------------
システムパッケージ管理
----------------------

Kompira 環境にインストールされている Python や Web 用のパッケージの情報が以下で閲覧できます。
各パッケージ種別ごとにインストールされているパッケージのバージョンやライセンスに関する情報を確認することができます。

.. tabularcolumns:: |\Y{0.3}|\Y{0.7}|
.. table::
    :class: longtable

    +--------------------------+---------------------------------------------------------------------------+
    | パス                     | 説明                                                                      |
    +==========================+===========================================================================+
    | ``/system/packages/PIP`` | Kompira 環境で PIP で管理されている Python パッケージ情報                 |
    +--------------------------+---------------------------------------------------------------------------+
    | ``/system/packages/Web`` | Kompira 環境で static コンテンツとして管理されている Web 用パッケージ情報 |
    +--------------------------+---------------------------------------------------------------------------+

.. note::

    システムパッケージ情報は Kompira をインストールまたはアップデートした後に kompirad が起動したタイミングで自動的に収集および更新されます。

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
パッケージ情報の管理コマンド
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Kompira サーバ上で以下のコマンドを利用することでパッケージ情報を管理することができます。

.. code::

    $ /opt/kompira/bin/manage.py packages_info [options...]

******************************
パッケージ情報の表示
******************************

オプションを省略または ``--show`` オプションを指定した場合、すでに収集されているパッケージ情報をコンソールに一覧表示します。

.. code::

    $ /opt/kompira/bin/manage.py packages_info --show


パッケージ情報の一覧表示の例を以下に示します。

.. code::

    +------+----------------------+-----------+----------+-----------------+
    | Type | Name                 | Installed | Latest   | License         |
    +------+----------------------+-----------+----------+-----------------+
    | pip  | APScheduler          | 3.6.3     | 3.8.1    | MIT License     |
    | pip  | Creoleparser         | 0.7.5     | None     | MIT License     |
    | pip  | Django               | 3.0.5     | 3.2.8    | BSD License     |
    | pip  | Genshi               | 0.7.5     | None     | BSD License     |
    | pip  | GitPython            | 3.1.18    | None     | BSD License     |
       :         :                    :           :            :


******************************
パッケージ情報の収集
******************************

``--collect`` オプションを指定した場合、インストールされているパッケージ情報を収集します。
ただし、Kompira サーバ上の ``root`` または ``kompira`` ユーザのみが実行できます。

.. code::

    $ /opt/kompira/bin/manage.py packages_info --collect

このとき、各パッケージの最新バージョン情報を収集するためにインターネット接続が必要になります。
プロキシ接続が必要な場合は ``--proxy`` オプション（または ``https_proxy`` 環境変数）で指定してください。

インターネットに接続できないなど、最新バージョン情報の収集を行わない場合は ``--no-collect-latest`` オプションを追加で指定してください。
あるいは、明示的に最新バージョン情報の収集を行なうことを指定したい場合は ``--collect-latest`` オプションを追加で指定してください。

.. note::

    なお、収集されたパッケージ情報はサーバ上の ``/var/opt/kompira/packages/`` 配下に保存されます。

******************************
パッケージ情報の更新
******************************

``--update`` オプションを指定した場合、収集済みパッケージ情報をもとに Kompira 上のシステムパッケージ情報オブジェクト（Wiki 型）を更新します。
ただし、Kompira サーバ上の ``root`` または ``kompira`` ユーザのみが実行できます。

.. code::

    $ /opt/kompira/bin/manage.py packages_info --update

``--update`` オプションと ``--collect`` オプションを併用した場合は、パッケージ情報の収集に続けてシステムパッケージ情報オブジェクトの更新を行ないます。


.. _ssl_certs:

----------------------
SSL 証明書管理
----------------------

Kompira では SSL 接続のために次の証明書を利用します。

- 以下の SSL 証明書に署名するための CA 証明書
- AMQPS 接続用のサーバ証明書 (rabbitmq-server が利用します)
- AMQPS 接続用のクライアント証明書 (kompira_jobmngrd, kompira_sendevt が利用します)

.. note::

    この節の説明は Kompira サーバを SSL 証明書による検証を行なうように構成した場合のためにあります。
    たとえばインストール時に install.sh に --amqps-verify オプションを付けた場合などが該当します。
    SSL 証明書の検証が有効になっていない場合は、この節の説明で登場する「SSL 証明書の検証」は行なわれません。

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
証明書ファイルの配置
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Kompira が利用する SSL 証明書は以下のディレクトリに配置します。

.. tabularcolumns:: |\Y{0.3}|\Y{0.7}|
.. table::
    :class: longtable

    +---------------------------------+--------------------------------------------------------------------------------------------------------+
    | パス                            | 説明                                                                                                   |
    +=================================+========================================================================================================+
    | ``/opt/kompira/ssl/ca-source/`` | SSL 証明書に署名するための CA 証明書ファイルを配置するディレクトリ                                     |
    +---------------------------------+--------------------------------------------------------------------------------------------------------+
    | ``/opt/kompira/ssl/certs/``     | SSL 接続で用いる SSL 証明書ファイル、SSL 証明書の検証に用いる CA 証明書ファイルを配置するディレクトリ  |
    +---------------------------------+--------------------------------------------------------------------------------------------------------+

これらのディレクトリに配置する証明書ファイルについて以下で説明します。
なお、各証明書ファイルには拡張子が .csr および .key となる、CSR ファイルと秘密鍵ファイルも同じ場所に配置されています。

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/kompira/ssl/ca-source/
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

SSL 証明書に署名するための CA 証明書ファイルを ``/opt/kompira/ssl/ca-source/`` に配置します。

******************************
kompira-local-ca.crt
******************************

この Kompira サーバで作成した SSL 証明書に署名する CA 証明書です。

この CA 証明書は Kompira をインストールした時に自動的に作成されます。

******************************
kompira-other-ca.crt
******************************

冗長構成において対向 Kompira サーバの kompira-local-ca.crt をコピーしたものです。
後述の ``ssl_utils.sh get-other-ca`` コマンドで対向 Kompira サーバから scp でコピーするか、別の手段を用いてコピーしてください。

Kompira はこの CA 証明書を直接利用することはなく、後述する CA 証明書をまとめた kompira-bundle-ca.crt を利用して SSL の検証を行ないます。

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/kompira/ssl/certs/
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

SSL 接続で用いる SSL 証明書ファイルおよび検証に用いる CA 証明書ファイルを ``/opt/kompira/ssl/certs/`` に配置します。

******************************
kompira-bundle-ca.crt
******************************

/opt/kompira/ssl/ca-source/ に配置された CA 証明書を1つにまとめたファイルです。
通常は自動的に作成されますが、後述する ``ssl_utils.sh update-bundle-ca`` コマンドで更新することもできます。

Kompira サーバ上の rabbitmq-server は、この CA 証明書をクライアント SSL 証明書の検証に用いるように設定されます。
すなわち、これに含まれるいずれかの CA 証明書によって署名された SSL 証明書を持ったクライアントだけが SSL 接続できるようになります。
他の Kompira サーバが生成した CA 証明書によって署名された SSL 証明書を持つクライアントは、この Kompira サーバには SSL 接続できないことに注意してください。

kompira_jobmngrd および kompira_sendevt は、この CA 証明書をサーバ SSL 証明書の検証に用いるように設定されます (kompira.conf で指定することもできます)。
すなわち、これに含まれるいずれかの CA 証明書によって署名された SSL 証明書を持ったサーバにのみ SSL 接続できるようになります。
単独で kompira_jobmngrd または kompira_sendevt をインストールしたノードでは、この CA 証明書を事前にコピーする必要があることに注意してください。
手順については ``ssl_utils.sh client-setup`` コマンドを参考にしてください。

kompira-bundle-ca.crt は、Kompira をインストールした時点ではそのサーバの kompira-local-ca.crt のみを含んでいます。

冗長構成をセットアップしたときは、2台のサーバで相互に対向の kompira-local-ca.crt を取得して kompira-bundle-ca.crt を更新しておくことを推奨します。
それにより、いずれかの CA 証明書で署名された SSL 証明書を持つクライアントが、どちらのサーバにも SSL 接続できるようになります。
たとえば、VIP アドレスに対して kompira_sendevt でイベントを送信する場合、実際にどちらのサーバに接続するかは事前に分からないため、2つの CA 証明書をまとめた kompira-bundle-ca.crt をクライアント側で持っておく必要があることに注意してください。
詳細については :ref:`ssl_certs_admin_ca_in_cluster` を参考にしてください。

******************************
amqp-server.crt
******************************

AMQP サーバ側 (rabbitmq-server) が利用する SSL 証明書です。
kompira-local-ca.crt によって署名されています。
この証明書は Kompira をインストールした時に自動的に作成されます。

******************************
amqp-client-kompira.crt
******************************

AMQP クライアント側 (kompira_jobmngrd, kompira_sendevt) が利用する SSL 証明書です。
kompira-local-ca.crt によって署名されています。
この証明書は Kompira をインストールした時に自動的に作成されます。

単独で kompira_jobmngrd または kompira_sendevt をインストールしたノードでは、この SSL 証明書を事前にコピーする必要があることに注意してください。
手順については ``ssl_utils.sh client-setup`` コマンドを参考にしてください。

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
SSL 証明書管理スクリプト
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

ssl_utils.sh スクリプトを用いることで、SSL 証明書作成などの管理を行なうことができます。

.. code::

    # /opt/kompira/bin/ssl_utils.sh command [options]

ssl_utils.sh スクリプトは root 権限で実行する必要があります。

***************************************
サーバ側 SSL 環境のセットアップ
***************************************

.. code::

    # /opt/kompira/bin/ssl_utils.sh server-setup

Kompira サーバ上で利用する CA 証明書および SSL 証明書を作成します。
内部的には以下の処理を行なっています。

- ローカルCA証明書の作成
- バンドルCA証明書の更新
- SSL証明書の作成 (AMQPサーバ用)
- SSL証明書の作成 (AMQPクライアント用)

すべての証明書は有効期限 10000 日で作成されます。

この処理は intall.sh で Kompira をインストールするときに自動的に実行されるため、通常は利用することはありません。

***************************************
クライアント側 SSL 環境のセットアップ
***************************************

.. code::

    # /opt/kompira/bin/ssl_utils.sh client-setup kompira-server

Kompira サーバとは別のノードにインストールした kompira_jobmngrd または kompira_sendevt が SSL 接続するには、Kompira サーバから CA 証明書および SSL 証明書を取得しておく必要があります。
このコマンドはコマンドライン引数 kompira-server で指定した Kompira サーバから scp コマンドを用いて必要な証明書を取得します。
install.sh に --jobmngr または --sendevt オプションを付けたときは自動的に実行されますので、通常は利用することはありません。

このコマンドを実行すると、内部で scp コマンドを用いてファイル転送するため、Kompira サーバの root アカウントのパスワードを入力する必要があります。
以下のような表示がありますので、パスワードを入力してください。

.. code::

    [2023-01-16 18:34:12] INFO: 
    [2023-01-16 18:34:12] INFO: !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    [2023-01-16 18:34:12] INFO: 
    [2023-01-16 18:34:12] INFO: Start copying the SSL/CA certificates from the kompira server with scp.
    [2023-01-16 18:34:12] INFO: 
    [2023-01-16 18:34:12] INFO: PLEASE ENTER THE PASSWORD OF THE REMOTE KOMPIRA SERVER (<kompira-server>) FOR SCP.
    [2023-01-16 18:34:12] INFO: 
    [2023-01-16 18:34:12] INFO: !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    [2023-01-16 18:34:12] INFO: 
    [2023-01-16 18:34:12] VERBOSE: run: scp -q -p -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@<kompira-server>:/opt/kompira/ssl/certs/{kompira-bundle-ca.crt,amqp-client-kompira{.crt,.key}} /opt/kompira/ssl/certs/
    root@<kompira-server>'s password: 

何らかの理由で scp コマンドでファイル転送ができない場合は、他の実施可能な手段で Kompira サーバ上の以下のファイルを同じディレクトリにコピーしてください。

- /opt/kompira/ssl/certs/kompira-bundle-ca.crt
- /opt/kompira/ssl/certs/amqp-client-kompira.crt
- /opt/kompira/ssl/certs/amqp-client-kompira.key

手動でコピーした場合はこれらのファイルのグループを kompira に設定して kompira_jobmngrd からアクセスできるようにしてください。

.. code::

    # chown :kompira /opt/kompira/ssl/certs/*

また、kompira_sendevt を SSL 接続で利用する場合は、実行するユーザがこれらのファイルにアクセスできる必要があることにも注意してください。
必要に応じて実行ユーザを調整するか、これらのファイルのパーミッションを調整してください。

.. note::

    Windows 環境に kompira_sendevt をインストールした場合は、Kompira サーバから取得した証明書ファイルを ``C:\Kompira\SSL\Certs`` ディレクトリに配置してください。詳細は :ref:`package_sendevt_install_windows` を参照してください。


******************************
CA 証明書の管理
******************************

**バンドルCA証明書の更新**

.. code::

    # /opt/kompira/bin/ssl_utils.sh update-bundle-ca

``/opt/kompira/ssl/ca-source/`` に配置された CA 証明書を、一つの CA 証明書 kompira-bundle-ca.crt としてまとめます。
``ssl_utils.sh server-setup`` または ``ssl_utils.sh get-other-ca`` コマンドを実行したときは内部で処理されますので、通常は利用することはありません。

**ローカルCA証明書の作成**

.. code::

    # /opt/kompira/bin/ssl_utils.sh create-local-ca

ローカルCA証明書 kompira-local-ca.crt を作成します。
ディレクトリ /opt/kompira/ssl/ca-source/ に以下のファイルが作成されます。

- kompira-local-ca.key : 秘密鍵ファイル (RSA-key 2048 bit)
- kompira-local-ca.crt : CA 証明書ファイル

CA 証明書の有効期限は 10000 日となります。

``ssl_utils.sh server-setup`` コマンドを実行したときは内部で処理されますので、通常は利用することはありません。

.. _ssl_certs_admin_ca_in_cluster:

******************************
冗長構成での CA 証明書管理
******************************

**他ノードのCA証明書の取得(scp)**

.. code::

    # /opt/kompira/bin/ssl_utils.sh get-other-ca [other-server]

コマンドライン引数 other-server で指定した Kompira サーバから CA 証明書 kompira-local-ca.crt を取得します。
取得した CA 証明書を kompira-other-ca.crt として保存したのち、バンドルCA証明書を更新します。

このコマンドを実行すると、内部で scp コマンドを用いてファイル転送するため、Kompira サーバの root アカウントのパスワードを入力する必要があります。
以下のような表示がありますので、パスワードを入力してください。

.. code::

    [2023-01-16 18:34:12] INFO: 
    [2023-01-16 18:34:12] INFO: !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    [2023-01-16 18:34:12] INFO: 
    [2023-01-16 18:34:12] INFO: Start copying the SSL/CA certificates from the other kompira server with scp..
    [2023-01-16 18:34:12] INFO: 
    [2023-01-16 18:34:12] INFO: PLEASE ENTER THE PASSWORD OF THE OTHER KOMPIRA SERVER (<other-server>) FOR SCP..
    [2023-01-16 18:34:12] INFO: 
    [2023-01-16 18:34:12] INFO: !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    [2023-01-16 18:34:12] INFO: 
    [2023-01-16 18:34:12] VERBOSE: run: scp -q -p -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@<other-server>:/opt/kompira/ssl/ca-source/kompira-local-ca.crt /opt/kompira/ssl/ca-source/kompira-other-ca.crt
    root@<other-server>'s password: 

何らかの理由で scp コマンドでファイル転送ができない場合は、他の実施可能な手段で対向 Kompira サーバ上の /opt/kompira/ssl/ca-source/kompira-local-ca.crt を自サーバの /opt/kompira/ssl/ca-source/kompira-other-ca.crt としてコピーしてください。その後 ``ssl_utils.sh update-bundle-ca`` コマンドでバンドルCA証明書を更新してください。

******************************
SSL証明書の作成
******************************

.. code::

    # /opt/kompira/bin/ssl_utils.sh create-cert certname subject

新しい SSL 証明書を作成します。
オプション certname で指定した名前をもとに、ディレクトリ /opt/kompira/ssl/certs/ に以下のファイルが作成されます。

- <certname>.key : 秘密鍵ファイル (RSA-key 2048 bit)
- <certname>.csr : CSRファイル
- <certname>.crt : SSL 証明書ファイル

証明書のサブジェクトにはオプション subject で指定した値が設定され、また有効期限は 10000 日となります。
SSL 証明書ファイルは kompira-local-ca.crt で署名されています。

``ssl_utils.sh server-setup`` コマンドを実行したときに、AMQP サーバ用および AMQP クライアント用の証明書は自動的に作成されます。

