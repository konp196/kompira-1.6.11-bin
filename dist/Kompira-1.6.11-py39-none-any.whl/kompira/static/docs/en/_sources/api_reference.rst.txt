*******************************
 Kompira REST API リファレンス
*******************************

:著者: Kompira 開発チーム

.. highlight:: none


イントロダクション
==================

本ドキュメントは、REST API の仕様について記述します。

共通
====

エンドポイント
--------------

REST API のエンドポイントは、通常の Kompira オブジェクトへのリソースパ
スと同様です。すなわちルートエンドポイントは ::

    http[s]://<hostname>/

となります。

ブラウザからのアクセスと API リクエストを区別するために、HTTP リクエス
トの Accept ヘッダに ::

    Accept: application/json

を含める必要があります。

もしくは、クエリ文字列に ``format=json`` を含める方法もあります。

ユーザ認証
----------

認証はトークン認証と、セッション認証方式の2種類が許可されます。セッショ
ン認証方式はブラウザからのアクセスを想定したものなので、REST API のクラ
イアントでは通常は使用しません。

トークン認証を使用する場合、以下のようにリクエストの Authorization ヘッ
ダにトークン鍵を含めます。

.. ifconfig:: language == 'ja'

    .. code::

        Authorization: Token <トークン鍵>

.. ifconfig:: language != 'ja'

    .. code::

        Authorization: Token <token key>

または、HTTP リクエストのクエリ文字列に以下のようにトークン鍵を含める方
法もあります。

.. ifconfig:: language == 'ja'

    .. code::

        token=<トークン鍵>

.. ifconfig:: language != 'ja'

    .. code::

        token=<token key>

ユーザ設定ページにて、各ユーザの REST API を有効にすると、アクセストー
クンが生成されます。REST API を無効にし、再度有効にすると、トークンが再初
期化されます。

フォーマット
------------

データフォーマットは JSON 形式のみサポートしています。

日時型データ (Datetime)
.......................

日時型データは UTC であり、以下の形式(ISO8601)が用いられます。

.. ifconfig:: language == 'ja'

    .. code::

        %Y-%m-%dT%H:%M:%S.%fZ もしくは %Y-%m-%dT%H:%M:%SZ

.. ifconfig:: language != 'ja'

    .. code::

        %Y-%m-%dT%H:%M:%S.%fZ or %Y-%m-%dT%H:%M:%SZ

入力時にはマイクロ秒や秒を省略することが可能です。末尾の UTC 指示子で
ある Z を省いた場合は、ローカル時刻（JST) とみなされ、内部で UTC に変換
されます。

オブジェクト型データ (Object)
.............................

オブジェクト型データはオブジェクトの絶対パスにより表現されます。

ファイル型データ (File)
.......................

ファイル型データは出力時は、以下のように name, data をキーに持つ辞書型
データとなります。

.. ifconfig:: language == 'ja'

    .. code::

        { "name": "<ファイル名>", "data": "<BASE64エンコードされたファイルデータ>" }

.. ifconfig:: language != 'ja'

    .. code::

        { "name": "<file name>", "data": "<BASE64 encoded file data>" }

入力時は、name と data をキーに持つ辞書型データとします。

.. ifconfig:: language == 'ja'

    .. code::

        { "name": "<ファイル名>", "data": "<BASE64エンコードされたファイルデータ>" }

.. ifconfig:: language != 'ja'

    .. code::

        { "name": "<file name>", "data": "<BASE64 encoded file contents string>" }


エラー
------

エラー時は、エラーを示す HTTP ステータスコードを返します。この時、 HTTP レ
スポンスのコンテンツボディにはエラー理由を示すデータが含まれます。

多くのエラーデータは以下のように detail キーを含む辞書データとなります。

.. ifconfig:: language == 'ja'

    .. code::

        { "detail": "<エラーの理由>" }

.. ifconfig:: language != 'ja'

    .. code::

        { "detail": "<reason of error>" }

必須のフィールドがリクエストデータに含まれていないようなバリデーション
エラーの場合、以下のような辞書データを返します。

.. ifconfig:: language == 'ja'

    .. code::

        { "<フィールド名>": ["<エラーメッセージ>", ...],
          "<フィールド名>": ["<エラーメッセージ>", ...],
        ... }

.. ifconfig:: language != 'ja'

    .. code::

        { "<field name>": ["<error message>", ...],
          "<field name>": ["<error message>", ...],
        ... }

ページネート
------------

一覧取得の場合、以下の形式のページネートされたデータが返されます。

.. ifconfig:: language == 'ja'

    .. code::

        {
            "count": <オブジェクト総数>,
            "next": <次ページのURL>,
            "previous": <前ページのURL>,
            "results": <オブジェクトデータリスト>
        }

.. ifconfig:: language != 'ja'

    .. code::

        {
            "count": <total number of objects>,
            "next": <next page URL>,
            "previous": <previous page URL>,
            "results": <objects data list>
        }

ページを指定して取得する場合、クエリパスに page=<ページ番号> を含めます。
最後のページを取得したい場合は、ページ番号に last を指定します。

ページサイズのデフォルトは 25 です。ページサイズを変更したい場合、

.. ifconfig:: language == 'ja'

    .. code::

        page_size=<ページサイズ>

.. ifconfig:: language != 'ja'

    .. code::

        page_size=<page size>

をクエリ文字列に含めます。


取得属性の指定
--------------

取得する属性名をクエリパスに ``attrs=<属性名>`` と指定することで、オブジェクトデータの一部の属性値だけを取得することが可能です。

たとえば、オブジェクトのIDと表示名だけを取得する場合は、以下に示す例のように、属性名として ``id`` と ``display_name`` を指定します。 ::

    /some/object?attrs=id&attrs=display_name


一覧取得においても、同様に取得したい属性を指定することが可能です。たとえば、プロセス一覧取得において、プロセスIDと状態のみ取得したい場合は、以下のように指定します。::

    /process?attrs=id&attrs=status


フィルタリング
--------------

一覧取得において、オブジェクトの属性でフィルタリングするには、クエリパスに ``<属性名>=<値>`` を指定します。

たとえば、正常に完了したプロセスのみの一覧を取得する場合、以下のように指定します。 ::

    /process?status=DONE

また、以下のように複数の属性をクエリパスで指定した場合は、AND によるフィルタリングとなります。 ::

    /app.descendant?display_name=test&owner=root

上記は完全一致によるフィルタリングですが、以下のように属性名に続けてルックアップを記述することで、
細かなフィルタリング条件の指定が可能です。

.. ifconfig:: language == 'ja'

    .. code::

        <属性名>__<ルックアップ>=<値>

.. ifconfig:: language != 'ja'

    .. code::

        <attribute-name>__<lookup>=<value>


たとえば、表示名に ``test`` を含むオブジェクトをフィルタリングできます。 ::

    /app.descendant?display_name__contains=test

ルックアップの種類ごとの値のフィルタリング方式は以下のとおりです。

.. tabularcolumns:: |\Y{0.3}|\Y{0.7}|
.. table::
    :class: longtable

    +---------------------------------+-----------------------------------------------------------------------------------------------+
    | ルックアップ                    | フィルタリング方式                                                                            |
    +=================================+===============================================================================================+
    | ``exact``, ``iexact``           | 属性が指定した値に一致する。``iexact`` では大小文字を区別しない。                             |
    +---------------------------------+-----------------------------------------------------------------------------------------------+
    | ``contains``, ``icontains``     | 属性が指定した値を含む。``icontains`` では大小文字を区別しない。                              |
    +---------------------------------+-----------------------------------------------------------------------------------------------+
    | ``startswith``, ``istartswith`` | 属性が指定した値で始まる。``istartswith`` では大小文字を区別しない。                          |
    +---------------------------------+-----------------------------------------------------------------------------------------------+
    | ``endswith``, ``iendswith``     | 属性が指定した値で終わる。``iendswith`` では大小文字を区別しない。                            |
    +---------------------------------+-----------------------------------------------------------------------------------------------+
    | ``regex``, ``iregex``           | 属性が指定した正規表現にマッチする。``iregex`` では大文字小文字区別しない。                   |
    +---------------------------------+-----------------------------------------------------------------------------------------------+
    | ``gt``, ``gte``                 | 属性が指定した値より大きい(``gt``)、または、属性が指定した値以上である(``gte``)。             |
    +---------------------------------+-----------------------------------------------------------------------------------------------+
    | ``lt``, ``lte``                 | 属性が指定した値より小さい(``lt``)、または、属性が指定した値以下である(``lte``)。             |
    +---------------------------------+-----------------------------------------------------------------------------------------------+
    | ``in``                          | 属性が指定した値に含まれる。                                                                  |
    +---------------------------------+-----------------------------------------------------------------------------------------------+

仮想オブジェクト以外の一般のオブジェクトにおける属性値によるフィルタリングでは、属性によって指定できるルックアップが異なります。
属性の一覧と指定できるルックアップは以下のとおりです。

.. tabularcolumns:: |\Y{0.3}|\Y{0.7}|
.. table::
    :class: longtable

    +----------------------+--------------------------------------------------------------------------------------------------+
    | 属性                 | 指定できるルックアップ                                                                           |
    +======================+==================================================================================================+
    | owner                | ``exact``, ``in``                                                                                |
    +----------------------+--------------------------------------------------------------------------------------------------+
    | abspath              | ``exact``, ``iexact``, ``contains``, ``icontains``, ``startswith``,                              |
    |                      | ``istartswith``, ``endswith``, ``iendswith``, ``regex``, ``iregex``                              |
    +----------------------+--------------------------------------------------------------------------------------------------+
    | display_name         | ``exact``, ``iexact``, ``contains``, ``icontains``, ``startswith``,                              |
    |                      | ``istartswith``, ``endswith``, ``iendswith``, ``regex``, ``iregex``                              |
    +----------------------+--------------------------------------------------------------------------------------------------+
    | description          | ``exact``, ``iexact``, ``contains``, ``icontains``, ``startswith``,                              |
    |                      | ``istartswith``, ``endswith``, ``iendswith``, ``regex``, ``iregex``                              |
    +----------------------+--------------------------------------------------------------------------------------------------+
    | created              | ``exact``, ``gt``, ``gte``, ``lt``, ``lte``                                                      |
    +----------------------+--------------------------------------------------------------------------------------------------+
    | updated              | ``exact``, ``gt``, ``gte``, ``lt``, ``lte``                                                      |
    +----------------------+--------------------------------------------------------------------------------------------------+
    | type_object          | ``exact``, ``in``                                                                                |
    +----------------------+--------------------------------------------------------------------------------------------------+
    | parent_object        | ``exact``, ``in``                                                                                |
    +----------------------+--------------------------------------------------------------------------------------------------+

また、仮想オブジェクトでは、属性のデータ型によって指定できるルックアップが異なります。

.. tabularcolumns:: |\Y{0.3}|\Y{0.7}|
.. table::
    :class: longtable

    +----------------------+--------------------------------------------------------------------------------------------------+
    | 属性の型             | 指定できるルックアップ                                                                           |
    +======================+==================================================================================================+
    | 文字列型             | ``exact``, ``iexact``, ``contains``, ``icontains``, ``startswith``,                              |
    |                      | ``istartswith``, ``endswith``, ``iendswith``, ``regex``, ``iregex``                              |
    +----------------------+--------------------------------------------------------------------------------------------------+
    | 整数型               | ``exact``, ``gt``, ``gte``, ``lt``, ``lte``                                                      |
    +----------------------+--------------------------------------------------------------------------------------------------+
    | 日時型               | ``exact``, ``gt``, ``gte``, ``lt``, ``lte``                                                      |
    +----------------------+--------------------------------------------------------------------------------------------------+
    | オブジェクト型       | ``exact``                                                                                        |
    +----------------------+--------------------------------------------------------------------------------------------------+
    | ユーザ型             | ``exact``                                                                                        |
    +----------------------+--------------------------------------------------------------------------------------------------+
    | 真偽型               | ``exact``                                                                                        |
    +----------------------+--------------------------------------------------------------------------------------------------+

なお、ルックアップを指定していないときは ``exact`` が適用されます。


並び順の指定
------------

オブジェクトの一覧取得において並び順を指定するには、クエリパスに ``order_by=<属性名>`` を指定します。
この場合、指定した属性に関して昇順で並べ替えした結果を一覧として返します。
降順にしたい場合は、クエリパスに ``order_by=-<属性名>`` を指定します。

order_by で並び順を指定できるオブジェクト属性は以下の通りです。

    +----------------------+---------------------------+
    | 属性                 | 適用される並び順          |
    +======================+===========================+
    | id                   | オブジェクトの ID 順      |
    +----------------------+---------------------------+
    | owner                | 所有者の ID 順            |
    +----------------------+---------------------------+
    | abspath              | 絶対パス順                |
    +----------------------+---------------------------+
    | display_name         | 表示名順                  |
    +----------------------+---------------------------+
    | description          | 説明順                    |
    +----------------------+---------------------------+
    | created              | 作成日時順 (古い順)       |
    +----------------------+---------------------------+
    | updated              | 更新日時順 (古い順)       |
    +----------------------+---------------------------+
    | type_object          | 型オブジェクトの ID 順    |
    +----------------------+---------------------------+
    | parent_object        | 親オブジェクトの ID 順    |
    +----------------------+---------------------------+

.. versionadded:: 1.6.6post1
    order_by で指定できる属性に description と parent_object を追加しました


オブジェクト型 (Object)
.......................

仮想オブジェクト以外の一般のオブジェクトのフィルタリングに使用できる属性は以下のとおりです。

+----------------------+--------------------------------------------------------------------------------------------------+
| 属性名               | 意味 (属性の型) または [指定できるルックアップ]                                                  |
+======================+==================================================================================================+
| ``owner``            | 所有者 (ユーザ型)                                                                                |
+----------------------+--------------------------------------------------------------------------------------------------+
| ``display_name``     | 表示名 (文字列型)                                                                                |
+----------------------+--------------------------------------------------------------------------------------------------+
| ``description``      | 説明 (文字列型)                                                                                  |
+----------------------+--------------------------------------------------------------------------------------------------+
| ``created``          | 作成日時 (日時型)                                                                                |
+----------------------+--------------------------------------------------------------------------------------------------+
| ``updated``          | 更新日時 (日時型)                                                                                |
+----------------------+--------------------------------------------------------------------------------------------------+
| ``type_object``      | 型オブジェクト (オブジェクト型)                                                                  |
+----------------------+--------------------------------------------------------------------------------------------------+

さらに、型オブジェクトが特定される状況では、フィールド値によるフィルタリングも指定できます。

.. ifconfig:: language == 'ja'

    .. code::

        field:<フィールド名>__<ルックアップ>=<値>

.. ifconfig:: language != 'ja'

    .. code::

        field:<field-name>__<lookup>=<value>


たとえば、以下のように指定します。 ::

    /.descendant?type_object=/system/types/Jobflow&field:source__contains=urlopen&field:defaultMonitoringMode=MAIL

型オブジェクトが特定される状況とは、以下のいずれかを言います。

* ``type_object`` 属性フィルタリングによって型オブジェクトが指定されている
* 起点となるオブジェクトがテーブル型であり、テーブルに型オブジェクトが設定されている

型オブジェクトが特定されていない状況で、フィールド値によるフィルタリングを指定するとエラーになります。

なお、フィールド値によるフィルタリングでは、フィールドのデータ型に応じて指定できるルックアップが異なります。

.. tabularcolumns:: |\Y{0.3}|\Y{0.7}|
.. table::
    :class: longtable

    +----------------------+-------------------------------------------------------------------------------------------------------------+
    | フィールドの型       | 指定できるルックアップ                                                                                      |
    +======================+=============================================================================================================+
    | 文字列型             | ``exact``, ``iexact``, ``contains``, ``icontains``, ``startswith``,                                         |
    |                      | ``istartswith``, ``endswith``, ``iendswith``, ``regex``, ``iregex``, ``in``, ``range``                      |
    +----------------------+-------------------------------------------------------------------------------------------------------------+
    | 整数型               | ``exact``, ``isnull``, ``gt``, ``gte``, ``lt``, ``lte``, ``in``, ``range``                                  |
    +----------------------+-------------------------------------------------------------------------------------------------------------+
    | 真偽値型             | ``exact``                                                                                                   |
    +----------------------+-------------------------------------------------------------------------------------------------------------+
    | 日時型               | ``exact``, ``isnull``, ``gt``, ``gte``, ``lt``, ``lte``, ``range``                                          |
    +----------------------+-------------------------------------------------------------------------------------------------------------+
    | オブジェクト型       | ``exact``, ``isnull``                                                                                       |
    +----------------------+-------------------------------------------------------------------------------------------------------------+
    | 添付ファイル型       | (文字列型と同じ、ファイル名がフィルタ対象になります)                                                        |
    +----------------------+-------------------------------------------------------------------------------------------------------------+
    | 配列型               | (文字列型と同じ、配列の値がフィルタ対象になります)                                                          |
    +----------------------+-------------------------------------------------------------------------------------------------------------+
    | 辞書型               | (文字列型と同じ、辞書の値がフィルタ対象になります)                                                          |
    +----------------------+-------------------------------------------------------------------------------------------------------------+

プロセス型 (Process)
....................

プロセスオブジェクトのフィルタリングに使用できる属性は以下のとおりです。

+----------------------+--------------------------------------------------------------------------------------------------+
| 属性名               | 意味 (属性の型) または [指定できるルックアップ]                                                  |
+======================+==================================================================================================+
| ``job``              | ジョブオブジェクト (オブジェクト型)                                                              |
+----------------------+--------------------------------------------------------------------------------------------------+
| ``user``             | 実行ユーザー (ユーザ型)                                                                          |
+----------------------+--------------------------------------------------------------------------------------------------+
| ``started_time``     | 開始日時 (日時型)                                                                                |
+----------------------+--------------------------------------------------------------------------------------------------+
| ``finished_time``    | 終了日時 (日時型)                                                                                |
+----------------------+--------------------------------------------------------------------------------------------------+
| ``status``           | ステータス [exact]                                                                               |
+----------------------+--------------------------------------------------------------------------------------------------+
| ``schedule``         | スケジュールオブジェクト (オブジェクト型)                                                        |
+----------------------+--------------------------------------------------------------------------------------------------+
| ``parent``           | 親プロセス (プロセス型)                                                                          |
+----------------------+--------------------------------------------------------------------------------------------------+
| ``current_job``      | 実行中ジョブオブジェクト (オブジェクト型)                                                        |
+----------------------+--------------------------------------------------------------------------------------------------+
| ``suspended``        | 一時停止フラグ (真偽型)                                                                          |
+----------------------+--------------------------------------------------------------------------------------------------+
| ``lineno``           | 実行中行番号 (整数型)                                                                            |
+----------------------+--------------------------------------------------------------------------------------------------+
| ``console``          | コンソール (文字列型)                                                                            |
+----------------------+--------------------------------------------------------------------------------------------------+

スケジュール型 (Scheduler)
..........................

スケジュールオブジェクトのフィルタリングに使用できる属性は以下のとおりです。

+----------------------+--------------------------------------------------------------------------------------------------+
| 属性名               | 意味 (属性の型) または [指定できるルックアップ]                                                  |
+======================+==================================================================================================+
| ``name``             | スケジュール名 (文字列型)                                                                        |
+----------------------+--------------------------------------------------------------------------------------------------+
| ``description``      | 説明 (文字列型)                                                                                  |
+----------------------+--------------------------------------------------------------------------------------------------+
| ``user``             | ユーザー (ユーザ型)                                                                              |
+----------------------+--------------------------------------------------------------------------------------------------+
| ``job``              | ジョブオブジェクト (オブジェクト型)                                                              |
+----------------------+--------------------------------------------------------------------------------------------------+
| ``year``             | 年 [exact, contains]                                                                             |
+----------------------+--------------------------------------------------------------------------------------------------+
| ``month``            | 月 [exact, contains]                                                                             |
+----------------------+--------------------------------------------------------------------------------------------------+
| ``day``              | 日 [exact, contains]                                                                             |
+----------------------+--------------------------------------------------------------------------------------------------+
| ``week``             | 週 [exact, contains]                                                                             |
+----------------------+--------------------------------------------------------------------------------------------------+
| ``day_of_week``      | 曜日 [exact, contains]                                                                           |
+----------------------+--------------------------------------------------------------------------------------------------+
| ``hour``             | 時 [exact, contains]                                                                             |
+----------------------+--------------------------------------------------------------------------------------------------+
| ``minute``           | 分 [exact, contains]                                                                             |
+----------------------+--------------------------------------------------------------------------------------------------+
| ``disabled``         | 無効化 (真偽型)                                                                                  |
+----------------------+--------------------------------------------------------------------------------------------------+

インシデント型 (Incident)
.........................

インシデントオブジェクトのフィルタリングに使用できる属性は以下のとおりです。

+----------------------+--------------------------------------------------------------------------------------------------+
| 属性名               | 意味 (属性の型) または [指定できるルックアップ]                                                  |
+======================+==================================================================================================+
| ``name``             | インシデント名 (文字列型)                                                                        |
+----------------------+--------------------------------------------------------------------------------------------------+
| ``device``           | デバイス名 (文字列型)                                                                            |
+----------------------+--------------------------------------------------------------------------------------------------+
| ``service``          | サービス名 (文字列型)                                                                            |
+----------------------+--------------------------------------------------------------------------------------------------+
| ``created_date``     | 作成日時 (日時型)                                                                                |
+----------------------+--------------------------------------------------------------------------------------------------+
| ``closed_date``      | 完了日時 (日時型)                                                                                |
+----------------------+--------------------------------------------------------------------------------------------------+
| ``status``           | ステータス [exact]                                                                               |
+----------------------+--------------------------------------------------------------------------------------------------+
| ``owner``            | 所有者 (ユーザ型)                                                                                |
+----------------------+--------------------------------------------------------------------------------------------------+

タスク型 (Task)
...............

タスクオブジェクトのフィルタリングに使用できる属性は以下のとおりです。

+----------------------+--------------------------------------------------------------------------------------------------+
| 属性名               | 意味 (属性の型) または [指定できるルックアップ]                                                  |
+======================+==================================================================================================+
| ``name``             | タスク名 (文字列型)                                                                              |
+----------------------+--------------------------------------------------------------------------------------------------+
| ``title``            | タイトル (文字列型)                                                                              |
+----------------------+--------------------------------------------------------------------------------------------------+
| ``message``          | メッセージ (文字列型)                                                                            |
+----------------------+--------------------------------------------------------------------------------------------------+
| ``status``           | ステータス [exact]                                                                               |
+----------------------+--------------------------------------------------------------------------------------------------+
| ``owner``            | 所有者 (ユーザ型)                                                                                |
+----------------------+--------------------------------------------------------------------------------------------------+
| ``created_date``     | 作成日時 (日時型)                                                                                |
+----------------------+--------------------------------------------------------------------------------------------------+
| ``closed_date``      | 完了日時 (日時型)                                                                                |
+----------------------+--------------------------------------------------------------------------------------------------+

ユーザー型 (User)
.................

ユーザーオブジェクトのフィルタリングに使用できる属性は以下のとおりです。

+----------------------+--------------------------------------------------------------------------------------------------+
| 属性名               | 意味 (属性の型) または [指定できるルックアップ]                                                  |
+======================+==================================================================================================+
| ``username``         | ユーザー名 (文字列型)                                                                            |
+----------------------+--------------------------------------------------------------------------------------------------+
| ``first_name``       | 名 (文字列型)                                                                                    |
+----------------------+--------------------------------------------------------------------------------------------------+
| ``last_name``        | 姓 (文字列型)                                                                                    |
+----------------------+--------------------------------------------------------------------------------------------------+
| ``email``            | E-mail (文字列型)                                                                                |
+----------------------+--------------------------------------------------------------------------------------------------+
| ``last_login``       | 最終ログイン日時 (日時型)                                                                        |
+----------------------+--------------------------------------------------------------------------------------------------+
| ``is_active``        | 有効化 (真偽型)                                                                                  |
+----------------------+--------------------------------------------------------------------------------------------------+
| ``is_ldap_user``     | LDAPユーザかどうか (真偽型)                                                                      |
+----------------------+--------------------------------------------------------------------------------------------------+
| ``home_directory``   | ホームディレクトリ (オブジェクト型)                                                              |
+----------------------+--------------------------------------------------------------------------------------------------+
| ``environment``      | 環境変数 (オブジェクト型)                                                                        |
+----------------------+--------------------------------------------------------------------------------------------------+

グループ型 (Group)
..................

グループオブジェクトのフィルタリングに使用できる属性は以下のとおりです。

+----------------------+--------------------------------------------------------------------------------------------------+
| 属性名               | 意味 (属性の型) または [指定できるルックアップ]                                                  |
+======================+==================================================================================================+
| ``name``             | グループ名 (文字列型)                                                                            |
+----------------------+--------------------------------------------------------------------------------------------------+
| ``is_ldap_group``    | LDAPグループかどうか (真偽型)                                                                    |
+----------------------+--------------------------------------------------------------------------------------------------+

Kompiraオブジェクトへのアクセス
===============================

オブジェクト情報の取得
----------------------

**リクエスト**
  - GET <オブジェクトパス>

**応答**

.. ifconfig:: language == 'ja'

    .. code::

        {
            "id": <オブジェクトID>,
            "abspath": <オブジェクトパス>,
            "owner": <オブジェクト所有ユーザー名>,
            "fields": <フィールドデータ辞書>,
            "extra_properties": <オブジェクト拡張属性>,
            "user_permissions": <ユーザーパーミッション辞書>,
            "group_permissions": <グループパーミッション辞書>,
            "display_name": <表示名>,
            "description": <説明>,
            "created": <オブジェクト生成日時>,
            "updated": <オブジェクト最終更新日時>,
            "type_object": <型オブジェクトのパス>,
            "parent_object": <親オブジェクトのパス>
        }

.. ifconfig:: language != 'ja'

    .. code::

        {
            "id": <object ID>,
            "abspath": <object path>,
            "owner": <username of object owner>,
            "fields": <field data dictionary>,
            "extra_properties": <extra properties>,
            "user_permissions": <user permissions dictionary>,
            "group_permissions": <group permissions dictionary>,
            "display_name": <display name>,
            "description": <desciption>,
            "created": <datetime of object created>,
            "updated": <datetime of object updated>,
            "type_object": <path of type obejct>,
            "parent_object": <path of parent object>
        }

フィールドデータ辞書とオブジェクト拡張属性は、オブジェクトの型によって異なるキーを含む辞書データです。

.. note::

   設定型オブジェクトの場合、上記に加えて設定項目のキーと値を含む辞書データが格納された data フィールドが含まれます。

.. note::

   Password型フィールド、Array<Password>型フィールド、Dictionary<Password>型フィールドのパスワードデータの取得には、
   オブジェクトの書き込み権限が必要です。書き込み権限が無い場合は、null値で置き換えられたデータが返されます。

.. versionchanged:: 1.6.8

   パスワードデータの取得にオブジェクトの書き込み権限が必要となりました。


オブジェクト情報の更新
----------------------

**リクエスト**
  - PUT <オブジェクトパス>
  - PATCH <オブジェクトパス>

  PUTはオブジェクトのデータ全体を置き換えます。オブジェクトの一部更新の場合
  は、PATCHリクエストを使用します。

**リクエストデータ**

.. ifconfig:: language == 'ja'

    .. code::

        {
            "owner": <オブジェクト所有ユーザー名>,
            "fields": <フィールドデータ辞書>,
            "user_permissions": <ユーザーパーミッション辞書>,
            "group_permissions": <グループパーミッション辞書>,
            "display_name": <表示名>,
            "description": <説明>                 # 省略可能
        }

.. ifconfig:: language != 'ja'

    .. code::

        {
            "owner": <username of object owner>,
            "fields": <field data dictionary>,
            "user_permissions": <user permissions dictionary>,
            "group_permissions": <group permissions dictionary>,
            "display_name": <display name>,
            "description": <desciption>           # optional
        }

PATCH リクエストの場合、属性を省略するとそのキーに対応するオブジェクトの値は変更されません。

**応答**
    更新されたオブジェクトのデータ

オブジェクトの新規追加
----------------------

ディレクトリオブジェクト、もしくは、テーブルオブジェクトに対して POST
リクエストを送信すると、オブジェクトが新規に作成されます。

**リクエスト**
  - POST <ディレクトリ又はテーブルのオブジェクトパス>

**リクエストデータ**

.. ifconfig:: language == 'ja'

    .. code::

        {
            "owner": <オブジェクト所有ユーザー名>,# 省略可能(省略時はリクエストユーザーが所有者となる)
            "fields": <フィールドデータ辞書>,
            "name": <オブジェクト名>,
            "user_permissions": <ユーザーパーミッション辞書>,
            "group_permissions": <グループパーミッション辞書>,
            "display_name": <表示名>,# 省略可能
            "description": <説明>,# 省略可能
            "type_object": <型オブジェクトのパス>
        }

.. ifconfig:: language != 'ja'

    .. code::

        {
            "owner": <username of object owner>,  # optional
            "fields": <field data dictionary>,
            "name": <object name>,
            "user_permissions": <user permissions dictionary>,
            "group_permissions": <group permissions dictionary>,
            "display_name": <display name>,       # optional
            "description": <desciption>,          # optional
            "type_object": <path of type obejct>
        }

**応答**
  HTTP 201 Created 応答と新規追加されたオブジェクトのデータ

オブジェクトの削除
------------------

オブジェクトパスに対して DELETE リクエストを送信することで、そのオブジェ
クトを削除することができます。

プロセス、スケジュール、インシデント、タスク、の各オブジェクトも同様に
削除することができる。

**リクエスト**
  - DELETE <オブジェクトパス>

**応答**
  成功すると HTTP 204 No Content が返されます。

子/子孫オブジェクトの一覧取得
-----------------------------

ディレクトリオブジェクト、もしくは、テーブルオブジェクトの子や子孫オブ
ジェクトの一覧を取得することができます。

**リクエスト**
  - GET <オブジェクトパス>.children# 子オブジェクト一覧
  - GET <オブジェクトパス>.descendant# 子孫オブジェクト一覧

**応答**
  オブジェクトデータの一覧が返されます。

.. note::

   ディレクトリやテーブル以外のオブジェクトの場合、空の一覧が返されます。

.. note::

   取得した一覧データのうち、読み取り権限が無いオブジェクトには、fields 属性（フィールドデータ辞書）が含まれません。

ジョブフローの実行
------------------

**リクエスト**
  - POST <ジョブフローパス>.execute

**リクエストデータ**

.. ifconfig:: language == 'ja'

    .. code::

        {
            "step_mode": <ステップモード>,               # true or false
            "checkpoint_mode": <チェックポイントモード>, # true or false
            "monitoring_mode": <監視モード>,             # NOTHING, MAIL, ABORT_MAIL
            "parameters": <ジョブフローパラメータの辞書>
        }

.. ifconfig:: language != 'ja'

    .. code::

        {
            "step_mode": <step mode>,                    # true or false
            "checkpoint_mode": <checkpoint mode>,        # true or false
            "monitoring_mode": <monitoring mode>,        # NOTHING, MAIL, ABORT_MAIL
            "parameters": <jobflow parameters dictionary>
        }

**応答**
  実行されたジョブフロープロセスのパスが返されます。

スクリプトジョブの実行
----------------------

**リクエスト**
  - POST <スクリプトジョブパス>.execute

**リクエストデータ**

.. ifconfig:: language == 'ja'

    .. code::

        {
            "node": <実行ノードオブジェクトのパス>,
            "account": <実行アカウントオブジェクトのパス>,
            "command_line": <コマンドライン文字列>
        }

.. ifconfig:: language != 'ja'

    .. code::

        {
            "node": <path of node object>,
            "account": <path of account object>,
            "command_line": <command line string>
        }

**応答**
  実行されたジョブフロープロセスのパスが返されます。

メッセージ送信
--------------

チャネルオブジェクトに対してメッセージ送信が可能です。

**リクエスト**
  - POST <チャネルオブジェクトパス>.send

**リクエストデータ**
  任意の JSON 形式のデータ

**応答**
  成功すると HTTP 200 OK が返されます。

メッセージ受信
--------------

チャネルオブジェクトからメッセージを受信します。

**リクエスト**
  - POST <チャネルオブジェクトパス>.recv

**リクエストデータ**

.. ifconfig:: language == 'ja'

    .. code::

        {
            "timeout": <タイムアウト値(秒)>
        }

.. ifconfig:: language != 'ja'

    .. code::

        {
            "timeout": <timeout (seconds)>
        }

**応答**
  成功すると受信データが返されます。
  受信タイムアウトすると、ステータスコードとして HTTP 408 Request Timeout が返されます。

.. note::

  チャネルにデータが無い場合は、タイムアウトで指定された秒数だけ待ちます。タイムアウトのデフォルト値は 0 秒です。


プロセス
========

プロセス一覧の取得
------------------

**リクエスト**
  - GET /process

  子プロセス一覧を取得する場合は、以下のリクエストを投げます。

  - GET /process/id_<プロセスID>.children

**応答**
  プロセス詳細データの一覧が返されます。

プロセス詳細の取得
------------------

**リクエスト**
   - GET /process/id_<プロセスID>

**応答**

.. ifconfig:: language == 'ja'

    .. code::

        {
            "id": <プロセスID>,
            "abspath": <プロセスオブジェクトパス>,
            "user": <実行ユーザー名>,
            "elapsed_time": <プロセス経過時間>,
            "started_time": <実行開始日時>,
            "finished_time": <実行終了日時>,
            "status": <実行ステータス>,
            "exit_status": <終了時ステータス>,
            "result": <実行結果>,
            "error": <実行エラー>,
            "suspended": <停止中>,
            "lineno": <行番号>,
            "console": <コンソール文字列>,
            "job": <実行開始ジョブフローパス>,
            "schedule": <スケジュールパス>,
            "parent": <親プロセスパス>,
            "current_job": <実行中ジョブフローパス>
        }

.. ifconfig:: language != 'ja'

    .. code::

        {
            "id": <process id>,
            "abspath": <path of process object>,
            "user": <username of execution user>,
            "elapsed_time": <elapsed time from process started>,
            "started_time": <datetime of process started>,
            "finished_time": <datetime of process finished>,
            "status": <process status>,
            "exit_status": <exit status>,
            "result": <result>,
            "error": <error>,
            "suspended": <suspended>,
            "lineno": <line number>,
            "console": <console string>,
            "job": <path of starting jobflow>,
            "schedule": <path of schedule>,
            "parent": <path of parent process>,
            "current_job": <path of executing jobflow>
        }

プロセスの操作
--------------

**リクエスト**
  -  POST /process/id_<プロセスID>.terminate  # プロセス実行を中止する
  -  POST /process/id_<プロセスID>.suspend    # プロセス実行を一時停止する
  -  POST /process/id_<プロセスID>.resume     # プロセス実行を再開する

**リクエストデータ**
  resume において以下のリクエストデータを渡すことで、再開時の実行モードを指定す
  ることができます。

.. ifconfig:: language == 'ja'

    .. code::

        {
            "step_mode": <ステップモード>,                # true/false を指定
            "checkpoint_mode": <チェックポイントモード>   # true/false を指定
        }

.. ifconfig:: language != 'ja'

    .. code::

        {
            "step_mode": <step mode>,                     # true/false
            "checkpoint_mode": <checkpoint mode>          # true/false
        }

**応答**
  成功時は true、失敗時は false が返されます。

プロセスの実行完了を待つ
------------------------

**リクエスト**
  -  POST /process/id_<プロセスID>.wait

**リクエストデータ**

.. ifconfig:: language == 'ja'

    .. code::

        {
            "timeout": <タイムアウト値>                 # 0以上の整数値を指定
        }

.. ifconfig:: language != 'ja'

    .. code::

        {
            "timeout": <timeout value>                  # an integer value of 0 or more
        }

**応答**
  成功時はプロセスの詳細情報が返されます。
  タイムアウトすると、ステータスコードとして HTTP 408 Request Timeout が返されます。


スケジュール
============

スケジュール一覧の取得
----------------------

**リクエスト**
  - GET /scheduler

**応答**
  スケジュール詳細データの一覧が返されます。

スケジュール詳細の取得
----------------------

**リクエスト**
  - GET /scheduler/id_<スケジュールID>

**応答**

.. ifconfig:: language == 'ja'

    .. code::

        {
            "id": <スケジュールID>,
            "abspath": <スケジュールオブジェクトパス>,
            "user": <ユーザー名>,
            "scheduled_datetimes: <実行予定日時一覧>,
            "parameters": <パラメータリスト>,
            "name": <スケジュール名>,
            "description": <説明>,
            "year": <年>,
            "month": <月>,
            "day": <日>,
            "week": <週>,
            "day_of_week": <曜日>,
            "hour": <時>,
            "minute": <分>,
            "disabled": <無効化>,
            "job": <実行ジョブオブジェクトパス>
      }

.. ifconfig:: language != 'ja'

    .. code::

        {
            "id": <schedule id>,
            "abspath": <path of schedule object>,
            "user": <username>,
            "scheduled_datetimes: <datetimes of scheduled>,
            "parameters": <parameters list>,
            "name": <schedule name>,
            "description": <description>,
            "year": <year>,
            "month": <month>,
            "day": <day>,
            "week": <week>,
            "day_of_week": <day of week>,
            "hour": <houe>,
            "minute": <minute>,
            "disabled": <disabled>,
            "job": <path of execution jobflow>
      }

スケジュールの更新
------------------

**リクエスト**
  - PUT /scheduler/id_<スケジュールID>
  - PATCH /scheduler/id_<スケジュールID>

**リクエストデータ**

.. ifconfig:: language == 'ja'

    .. code::

        {
            "user": <ユーザー名>,
            "parameters": <パラメータリスト>,
            "name": <スケジュール名>,            # 必須パラメータ
            "description": <説明>,
            "year": <年>,
            "month": <月>,
            "day": <日>,
            "week": <週>,
            "day_of_week": <曜日>,
            "hour": <時>,
            "minute": <分>,
            "disabled": <無効化>,
            "job": <実行ジョブオブジェクトパス>  # 必須パラメータ
        }

.. ifconfig:: language != 'ja'

    .. code::

        {
            "user": <username>,
            "parameters": <parameters list>,
            "name": <schedule name>,             # mandatory
            "description": <description>,
            "year": <year>,
            "month": <month>,
            "day": <day>,
            "week": <week>,
            "day_of_week": <day of week>,
            "hour": <houe>,
            "minute": <minute>,
            "disabled": <disabled>,
            "job": <path of execution jobflow>   # mandatory
        }

**応答**
  更新されたオブジェクトのデータ


スケジュールの作成
------------------

**リクエスト**
  - POST /scheduler

**リクエストデータ**
  更新リクエストと同様

**応答**
  作成されたオブジェクトのデータ


インシデント
============

インシデント一覧の取得
----------------------

**リクエスト**
  - GET /incident

**応答**
  インシデント詳細データの一覧が返される。

インシデント詳細の取得
----------------------

**リクエスト**
  - GET /incident/id_<インシデントID>

**応答**

.. ifconfig:: language == 'ja'

    .. code::

        {
            "id": <インシデントID>,
            "abspath": <インシデントオブジェクトパス>,
            "owner": <所有者>,
            "worklogs": <作業ログ一覧>,
            "alerts": <アラート一覧>,
            "name": <インシデント名>,
            "device": <デバイス名>,
            "service": <サービス名>,
            "created_date": <作成日時>,
            "closed_date": <完了日時>,
            "status": <ステータス>                    # "OPENED", "WORKING", "CLOSED" のいずれか
        }

.. ifconfig:: language != 'ja'

    .. code::

        {
            "id": <incident id>,
            "abspath": <path of incident object>,
            "owner": <username of owner>,
            "worklogs": <worklogs>,
            "alerts": <alerts>,
            "name": <incident name>,
            "device": <device name>,
            "service": <service name>,
            "created_date": <datetime of incident created>,
            "closed_date": <datetime of incident closed>,
            "status": <incident status>               # "OPENED", "WORKING", "CLOSED"
        }

インシデントの更新
------------------

**リクエスト**
  - PUT /incident/id_<インシデントID>
  - PATCH /incident/id_<インシデントID>

**リクエストデータ**

.. ifconfig:: language == 'ja'

    .. code::

        {
            "owner": <所有者>,
            "name": <インシデント名>,
            "device": <デバイス名>,
            "service": <サービス名>,
            "status": <ステータス>
        }

.. ifconfig:: language != 'ja'

    .. code::

        {
            "owner": <username of owner>,
            "name": <incident name>,
            "device": <device name>,
            "service": <service name>,
            "status": <incident status>
        }

**応答**
  更新されたオブジェクトのデータ

作業ログの追加
--------------

**リクエスト**
  - POST /incident/id_<インシデントID>.worklogs

**リクエストデータ**

.. ifconfig:: language == 'ja'

    .. code::

        {
            "user": <ユーザー名>,
            "description": <作業ログ>
        }

.. ifconfig:: language != 'ja'

    .. code::

        {
            "user": <username>,
            "description": <description>
        }

**応答**
  追加された作業ログのデータ

インシデントの作成
------------------

**リクエスト**
  - POST /incident

**リクエストデータ**
  更新リクエストと同様

**応答**
  作成されたオブジェクトのデータ


タスク
======

タスク一覧の取得
----------------

**リクエスト**
  - GET /task

**応答**
  タスク詳細データの一覧

タスク詳細の取得
----------------

**リクエスト**
  - GET /task/id_<タスクID>

**応答**

.. ifconfig:: language == 'ja'

    .. code::

        {
            "id": <タスクID>,
            "abspath": <タスクオブジェクトパス>,
            "owner": <所有者>,
            "assigned_users": <宛先ユーザー一覧>,
            "assigned_groups": <宛先グループ一覧>,
            "name": <タスク名>,
            "title": <タスク件名>,
            "message": <タスクメッセージ>,
            "action_text": <アクション文字列>,
            "result": <結果>,
            "status": <ステータス>,      # "WAITING", "ONGOING", "DONE", "CANCELED" のいずれか
            "created_date": <作成日時>,
            "closed_date": <完了日時>
        }

.. ifconfig:: language != 'ja'

    .. code::

        {
            "id": <task id>,
            "abspath": <path of task object>,
            "owner": <username of owner>,
            "assigned_users": <assigned users>,
            "assigned_groups": <assigned groups>,
            "name": <task name>,
            "title": <task title>,
            "message": <message>,
            "action_text": <action text>,
            "result": <result>,
            "status": <status>,          # "WAITING", "ONGOING", "DONE", "CANCELED"
            "created_date": <datetime of task created>,
            "closed_date": <datetime of task closed>
        }

タスクのキャンセル
------------------

**リクエスト**
  - POST /task/id_<インシデントID>.cancel

**応答** ::
  成功すると HTTP 200 OK が返されます。

タスクの送信
------------

タスクチャネルに対してメッセージを送信します。

**リクエスト**
  - POST /task/id_<インシデントID>.submit

**リクエストデータ**

.. ifconfig:: language == 'ja'

    .. code::

        {
            "result": <結果メッセージ>
        }

.. ifconfig:: language != 'ja'

    .. code::

        {
            "result": <result message>
        }

リクエストデータを省略した場合は、タスクチャネルに "OK" が渡されます。


ユーザー/グループ管理
=====================

ユーザー一覧の取得
------------------

**リクエスト**
  - GET /config/user

**応答**
  ユーザー詳細データの一覧

ユーザー詳細の取得
------------------

**リクエスト**
  - GET /config/user/id_<ユーザーID>

**応答**

.. ifconfig:: language == 'ja'

    .. code::

        {
            "id": <ユーザーID>,
            "abspath": <ユーザーオブジェクトパス>,
            "groups": <グループ一覧>,
            "last_login": <最終ログイン日時>,
            "username": <ユーザー名>,
            "first_name": <名>,
            "last_name": <姓>,
            "email": <E-mailアドレス>,
            "is_active": <有効フラグ>,
            "is_ldap_user": <LDAPユーザフラグ>,
            "home_directory": <ホームディレクトリ>,
            "environment": <環境オブジェクト>
        }

.. ifconfig:: language != 'ja'

    .. code::

        {
            "id": <user id>,
            "abspath": <path of user object>,
            "groups": <groups>,
            "last_login": <datetime of last login>,
            "username": <username>,
            "first_name": <first name>,
            "last_name": <last name>,
            "email": <E-mail address>,
            "is_active": <active flag>,
            "is_ldap_user": <LDAP user flag>,
            "home_directory": <path of home directory>,
            "environment": <path of environment object>
        }

ユーザーの更新
--------------

**リクエスト**
  - PUT /config/user/id_<ユーザーID>
  - PATCH /config/user/id_<ユーザーID>

**リクエストデータ**

.. ifconfig:: language == 'ja'

    .. code::

        {
            "groups": <グループ一覧>,
            "last_login": <最終ログイン日時>,
            "username": <ユーザー名>,           # 必須フィールド
            "password": <パスワード>,           # 必須フィールド
            "first_name": <名>,
            "last_name": <姓>,
            "email": <E-mailアドレス>,
            "is_active": <有効フラグ>,
            "is_ldap_user": <LDAPユーザフラグ>,
            "home_directory": <ホームディレクトリ>,
            "environment": <環境オブジェクト>
        }

.. ifconfig:: language != 'ja'

    .. code::

        {
            "groups": <groups>,
            "last_login": <datetime of last login>,
            "username": <username>,             # mandatory
            "password": <password>,             # mandatory
            "first_name": <first name>,
            "last_name": <last name>,
            "email": <E-mail address>,
            "is_active": <active flag>,
            "is_ldap_user": <LDAP user flag>,
            "home_directory": <path of home directory>,
            "environment": <path of environment object>
        }

**応答**
  更新されたオブジェクトのデータ

.. note::

    root ユーザの is_active フィールドを false に設定することはできません。
    組み込みユーザ (admin, root, guest) の is_ldap_user を true に設定することはできません。
    また、非特権ユーザは groups、および、is_active, is_ldap_user フィールドを変更することはできません。


ユーザーの新規作成
------------------

**リクエスト**
  - POST /config/user

**リクエストデータ**
  ユーザー更新と同じ

**応答**
  作成されたオブジェクトのデータ


グループ一覧の取得
------------------

**リクエスト**
  - GET /config/group

**応答**
  グループ詳細データの一覧


グループ詳細の取得
------------------

**リクエスト**
  - GET /config/group/id_<グループID>

**応答**

.. ifconfig:: language == 'ja'

    .. code::

        {
            "id": <グループID>,
            "abspath": <グループオブジェクトパス>,
            "name": <グループ名>,
            "is_ldap_group": <LDAPグループフラグ>
        }

.. ifconfig:: language != 'ja'

    .. code::

        {
            "id": <group id>,
            "abspath": <path of group object>,
            "name": <group name>,
            "is_ldap_group": <LDAP group flag>
        }

グループの更新
--------------

**リクエスト**
  - PUT /config/group/id_<グループID>
  - PATCH /config/group/id_<グループID>

**リクエストデータ**

.. ifconfig:: language == 'ja'

    .. code::

        {
            "name": <グループ名>,
            "is_ldap_group": <LDAPグループフラグ>
        }

.. ifconfig:: language != 'ja'

    .. code::

        {
            "name": <group name>,
            "is_ldap_group": <LDAP group flag>
        }

**応答**
  更新されたオブジェクトのデータ

.. note::

    組み込みグループ (other, wheel) の is_ldap_group を true に設定することはできません。
    また、非特権ユーザはグループを更新することはできません。


グループの新規追加
------------------

**リクエスト**
  - POST /config/group

**リクエストデータ**
  グループ更新と同じ

**応答**
  更新されたオブジェクトのデータ

