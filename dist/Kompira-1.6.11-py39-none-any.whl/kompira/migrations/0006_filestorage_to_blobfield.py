# Generated by Django 3.0.5 on 2021-11-04 11:10
import json
import logging
from os.path import join
from django.core.files.base import ContentFile
from django.core.files.storage import default_storage
from django.db import migrations, models, connection

import kompira.models.fields

logger = logging.getLogger('kompira')

#
# FileField の StringData の value フィールドに格納されている JSON 形式の文字列 {'name': <file_name>, 'path': <file_path>} から、
# ファイルデータを読み込み、
# - name: StringData フィールド
# - data: KompiraBlobData フィールド
# に書き込みを行う。
#
def up_migrate_file_field(apps, schema_editor):
    from kompira.models.core import FileData
    #
    # kompira_filedata テーブルの value フィールドを読み込んで、
    # <FileData ID> => {'name': <file_name>, 'path': <file_path>} の辞書を作成
    #
    file_data = {}
    cursor = connection.cursor()
    cursor.execute('SELECT id, value from kompira_filedata')
    for (id, value) in cursor.fetchall():
        file_data[id] = value
    #
    # FileDataを取得して、マイグレーション実行
    #
    qs = FileData.objects.all()
    for entry in qs:
        value = file_data.get(entry.id)
        if not value:
            continue
        try:
            value = json.loads(value)
        except json.decoder.JSONDecodeError as e:
            logger.error("Failed to decode the file data '%s': %s", entry.field, e)
            continue
        new_value = {'name': value['name']}
        if value['path'] is not None:
            try:
                with default_storage.open(value['path']) as f:
                    new_value['data'] = f.read()
            except OSError as e:
                #
                # $KOMPIRA_VAR_HOME/upload/ 以下に当該ファイルが存在しない場合、
                # ファイル名データだけ取り込み、はエラーメッセージを出力して続行する
                #
                logger.error("Failed to import the file data '%s' to DB: %s", entry.field, e)
        entry.value = new_value
        entry.save()

#
# 逆マイグレート: file_data フィールドのデータをファイルに書き出して、
# kompira_filedata テーブルの value フィールドに
#
#   {'name': <file_name>, 'path': <file_path>}
#
# を JSON 形式で書き出す
#
def down_migrate_file_field(apps, schema_editor):
    from kompira.models.core import FileData
    cursor = connection.cursor()
    qs = FileData.objects.all()
    for entry in qs:
        file_path = None
        if entry.value['data'] is not None:
            file_path = make_path(entry.field, entry.id)
            default_storage.save(file_path, ContentFile(entry.value['data']))
        value = {'name': entry.value['name'], 'path': file_path}
        #
        # FileData の value フィールドに json 形式のデータを格納
        #
        cursor.execute('UPDATE kompira_filedata SET VALUE=%s WHERE id=%s', [json.dumps(value), entry.id])


def make_path(field, data_id):
    return join(field.object.abspath.lstrip('/'), f'{field.name}_{data_id}.file')


class Migration(migrations.Migration):

    dependencies = [
        ('kompira', '0005_alter_process_exit_status_biginteger'),
    ]

    operations = [
        migrations.AddField(
            model_name='filedata',
            name='oid',
            field=kompira.models.fields.KompiraBlobField(blank=True, null=True, verbose_name='oid'),
        ),
        migrations.AddField(
            model_name='filedata',
            name='name',
            field=models.CharField(max_length=1024, null=True, verbose_name='name'),
        ),
        migrations.AddField(
            model_name='filedata',
            name='size',
            field=models.IntegerField(blank=True, null=True, verbose_name='size'),
        ),
        migrations.RunPython(up_migrate_file_field, down_migrate_file_field),
        #
        # ファイルの取り込みが終わった後で kompira_filedata テーブルの value フィールドを削除する
        #
        migrations.RemoveField(
            model_name='filedata',
            name='value',
        ),
    ]
